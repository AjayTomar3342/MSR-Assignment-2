,0
0,     Add a link to `ImmutableSortedMultiset` to `collect/package-info java` \n\nFixes    com/google/guava/pull/5384\n\n
1,     Remove `@Beta` from `CountingOutputStream` \n\n
2,     Fix assertion for `FilesTest testCopyIdenticalFiles()` \n\nFixes    com/google/guava/issues/5381\n\n
3,     Remove `@Beta` from `HashCode` \n\n   com/google/guava/issues/3284\n\n
4,     Fix a comment to reflect that the ImmutableSortedMap copyOf method uses the natural ordering of the keys  rather than a provided comparator \n\nPiperOrigin-RevId: 350137044\n  
5,     Update Public Suffix data \n\n
6,     Internal change\n\n
7,     Internal change \n\n
8,     Optimize CRC32C \n\nPiperOrigin-RevId: 348814325\n  
9,     Cache only  m2/repository  not all of  m2 \n\nHopefully this will fix  Could not find artifact org apache maven plugins:maven-checkstyle-plugin:jar:3 1 1 in google-maven-central  from    com/google/guava/pull/5363\n\nCompare CL 310633203 for Truth \n\n
10,     Bump deps \n\nMy methodology was something like:\n\n```\n( for F in   android; do ( mvn org codehaus mojo:versions-maven-plugin:2 8 1:update-properties org codehaus mojo:versions-maven-plugin:2 8 1:use-latest-releases -f $F/pom xml -DgenerateBackupPoms=false ); done )\n```\n\nFixes    com/google/guava/pull/5273\nFixes    com/google/guava/pull/5274\nMore completely addresses    com/google/guava/pull/4018\n\n
11,     Set @Target on @IgnoreJRERequirement \n\nValues:\n   mojohaus org/animal-sniffer/animal-sniffer-annotations/apidocs/org/codehaus/mojo/animal_sniffer/IgnoreJRERequirement html\n\nContext:\nThis doesn\ t  fix  anything  but it prevents us from replicating an error I just made in the future:\n   com/mojohaus/animal-sniffer/issues/131#issuecomment-747628259\n
12,     Internal change\n\n
13,     Internal change\n\n
14,     Internal changes \n\n
15,     Prepare for release 30 1 \n\n
16,     Log a warning if running under a Java 7 VM \n\nMore precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception  If someone wants to use Retrolambda or a similar tool to rewrite our classes  that s fine with us if it works  And our support for Android is unchanged: The Android toolchain rewrites lambdas and removes type annotations \n\nThis is a step toward removing Java 7 support entirely:    com/google/guava/issues/5269\n\n
17,     Correct a typo and some odd phrasing in the first paragraph of the javadoc for SmoothRateLimiter \n\n
18,     Fix `relativePath` warning for guava-bom \n\nFixes #3945 \nCloses #5349 \n\n
19,     First step in cleaning up PSL handling  Next stage will be to change the template to store the trie string as a separate static constant  so that I can write a unit test that verifies that \n\n
20,     Fix a bug in HashBiMap which was causing crashes in Sheets on iOS \n\nThe crash was caused by the fact  that linked-list of BiEntry instances inside a bucket were using @Weak references  and only the first entry in the list was strongly referenced  The remaining ones were deallocated \n\nWith this change  Sheets iOS is not crashing anymore \n\n
21,     System getProperties() getProperty => System getProperty \n\nMy motivation was that it s slightly easier for a nullness checker to determine that System getProperty(standardProperty) is (generally speaking) non-null  But it turns out that java runtime name is not a standard property!\n\nStill  this is a slight simplification  so I guess I m submitting \n\n
22,     Automated rollback of 67517b5a5b7627eee39a47917197998b9f974751 \n\n*** Reason for rollback ***\n\nCausing Sheets iOS crash\n\n*** Original change description ***\n\nFix memory leaks and potential crashes in HashBiMap  which occur in transpiled ObjC code \nAdd iOS specific unit tests in XPlat  because Guava is missing infrastructure for iOS tests \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=345445573\n  
23,     Explain when StandardSystemProperty value() can return a null value  and deprecate JAVA_EXT_DIRS \n\nvalue() s return type has been @Nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but I had forgotten the details about why  despite past CLs to update the test for specific missing keys \n\nI assume that we ll never actually *remove* JAVA_EXT_DIRS \n\n(Just slightly relevant to    com/google/guava/issues/2571)\n\n
24,     Suppress TSAN errors for benign races \n\nCompare other usages of `@LazyInit` on collection views  such as `HashBiMap inverse` and `AbstractTable cellSet` \n\n
25,     PUBLIC: Add missing Override annotations \n\n
26,     Internal change \n\n
27,     Make toImmutableSortedMap levarage collect collectors\n\n
28,     Make toImmutableEnum[Set|Map  to AndroidAccessToCollectors\n\nI think that’s the last of them \n\nThe implementations I moved verbatim  and there was no change of code there \n\n
29,     Update Public Suffix data \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=342455735\n  
30,     Fix open source “No tests found in com google common collect TableCollectorsTest”\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=342423867\n  
31,     Add TableCollectors to AndroidAccessToCollectors\n\n
32,     Add Multimap collectors to AndroidAccessToCollectors\n\n
33,     Backport combine to Immutable[List|Set Multimap\n\nInterestingly  ImmutableMultimap already had combine implemented by lowasser since 2017  Probably a backport oversight \n\n
34,     Add to[Immutable Multiset to AndroidAccessToCollectors\n\n
35,     Backport ImmutableTable combine\n\nThat should be the last combine to backport  All remainging collectors are implemented in terms of existing collection transformations \n\n
36,     Add AndroidAccessToCollectors \n\nThis adds the base Immutable collectors already in CollectCollectors  but is still lacking the Table-collections  Multi-collections  and mutable-collections \n\n
37,     Replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to  \n\n
38,     Tidy up description since this shows up in search results  Maven Central  and many other places around the web \n\nCL automatically created by:\n    replace_string \\\n       google \\  s collections  io classes  and much  \\\n       Google \\  s collections  I/O classes  and \n\n
39,     Fix memory leaks and potential crashes in HashBiMap  which occur in transpiled ObjC code \n\n
40,     Backport `combine` to java7 for Sorted collections & (Immutable)BiMap \n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections \n\n
41,     Backport combine to java7 for `ImmutableRangeSet`/`ImmutableRangeSet` \n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections \n\nI saved this for last  but they turned out to be the easiest to do  Tests are kind of crap  but honestly  baseline tests also seemed a little bit light to me \n\n
42,     Backport `combine` to java7 for `ImmutableMap` \n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections \n\nThe Java8/Java7 implementations branched once again  where Java8 uses an array of Entries  whereas Java7 uses an array of alternating key/value pairs  Either way  the implementations were pretty trivial this time \n\n
43,     Fix Android test failure in ClassPathTest \n\nReproduced the error and verified that this change fixes it \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=341509765\n  
44,     Add `X-Request-ID` to `HttpHeaders` \n\nFixes #5306 \n\n
45,     Added submitAsync to ClosingFuture \n\n
46,     Fix `LoadingCache` minor documentation typo \n\nFixes #5503 \n\n
47,     Backport `combine` to java7 for `ImmutableList` & `ImmutableSet` \n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections \n\n
48,     Rollback\n\n*** Original change description ***\n\nDo 16-byte strides in CRC32C in c g c hash  resulting in roughly a 3 3x speedup to 1 5 GB/s \n\nThis is probably as good as it gets until Java 11  when we ll have access to the intrinsics that use CRC hardware when available \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=340968144\n  
49,     Do 16-byte strides in CRC32C in c g c hash  resulting in roughly a 3 3x speedup to 1 5 GB/s \n\nThis is probably as good as it gets until Java 11  when we ll have access to the intrinsics that use CRC hardware when available \n\n
50,     Verify maximumWeight before setting\n\nThe maximumWeight builder method is the only method that does the argument verification before the assignment \nIt looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform \n\nFixes #5298\n\n
51,     Add additional test for `Crc32cHashFunction` \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=340502702\n  
52,     Remove outdated reference in docs\n\n
53,     Add constant for Origin Isolation header\n\nSpec:    com/WICG/origin-isolation\n\n
54,     Optimize Hashing crc32c() by eliminating two xors for every byte of input \n\nBenchmarks suggest a modest speedup around 8% \n\n
55,     Fix documentation for HashCode toString() that incorrectly claimed it returned in big-endian order \n\nThe implementation of toString() goes through the bytes in the same order that asBytes() returns  so if the order of the underlying bytes is little-endian (as is the case for LongHashCode)  then the string will also be little-endian  contradicting what the documentation says \n\n
56,     Refactor ClassPath: replace Scanner with Location class \n\n
57,     Fix minor documentation typos  thanks to @Stephan202 and @jbduncan\n\n
58,     Add ClassInfo isTopLevel() \n\nSeems like a useful method? I can t remember why I didn t add it in the first place  Perhaps just an oversight \n\nPartially addresses    com/google/guava/issues/3349\n\n
59,     Update IteratorTester example with a greater  steps  value\n\nThis allows IteratorTester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasNext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user\ s chosen  known good  reference implementation \n\nFixes #5281\n\n
60,     Remove deprecated 1-arg ServiceManager addListener \n\n[ \n\n
61,     Prepare for release 30 0 \n\n
62,     Remove deprecated method Files fileTreeTraverser() that isn t being used anymore \n\n
63,     Added `@CanIgnoreReturnValue` to `cancel` \n\n
64,     Encode all primes less-than 66 into a bitmask\n\nUse a bitmask to make prime computation for all values less-than 66 O(1) and avoid any remainder calculations in these cases \n\n
65,     Add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771\n\nRemove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected \n\nIf we propagate cancellations  the test fails \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=337100661\n  
66,     Document what happens when FutureCallback throws exception \n\nFixes #5250  #2058\n\n
67,     Clarify that Interner should be preferred instead of String intern(); the existing language implies it s intended _only_ for other types \n\nSee also    com/google/guava/issues/399#issuecomment-61307754\n\n
68,     Fix example in documentation for `IteratorTester`\n\nI made a mistake and accidentally included an example that does not\ncompile  Specifically  importing `KnownOrder` as-is does not compile;\ninstead one needs to import `IteratorTester KnownOrder`  See #5254 for\nmore information \n\nI also changed the example to use `Collections#unmodifiableList`\nrather than `ArrayList` because `ArrayList#iterator` does not satisfy\nall the requirements of `IteratorFeature#MODIFIABLE` \n\nFixes #5276\n\n
69,     Don t call toString() on the results of successful futures \n\n
70,     Add a bunch of warnings to ExecutionSequencer \n\nSee discussion on CL 335046640 \n\n
71,     Clarify how to use `IteratorTester`\n\nWhen using `IteratorTester`  IntelliJ IDEA automatically imports\n`AbstractIteratorTester KnownOrder`  However `AbstractIteratorTester`\nis private  and it is not obvious that one was meant to import\n`IteratorTester KnownOrder` instead  Therefore this commit updates the\nJavadoc to give an example of how to use the API properly \n\nFixes #5272\n\n
72,     Removed all references to now useless workaround\n\nFixes #3679\nFixes #5265\n\n
73,     Clarify `HashMultimap` docs about concurrency \n\nCloses #5266 \nFixes #3682 \n\n
74,     Omit TestModuleEntryPoint from open-source repo \n\nSince I ve disabled GWT tests in the open-source repo  these no longer serve a purpose  (They re still listed in our testModule gwt xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore )\n\nWe could still include them  but they re generated during our build  so that complicates exporting them with Copybara \n\n
75,     Check the generated PublicSuffixPatterns java into Piper \n\nCopybara can t export generated files \n\nAlso  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs \n\n
76,     Run all zero of our GWT tests during presubmit/CI \n\nUnfortunately  this does *not* detect any bogus <inherits> lines in *test*  gwt xml files (neither the individual testModule gwt xml files nor the top-level GuavaTests gwt xml) \n(And bogus <inherits> lines in *prod*  gwt xml files were already detected even before this change )\n\nAs a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist  And maybe I ll end up rolling it back if we reenable the tests externally someday  Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)\n\n(Followup after    com/google/guava/issues/3680)\n\n
77,     Move gwt-user dep to test scope \n\nWe no longer need it as a prod dependency (not even `provided`) after removing GWT-RPC support \n\n(Followup after    com/google/guava/issues/3680)\n\nFixes    com/google/truth/issues/637  if GitHub will let me get away with closing a Truth issue with a Guava commit :)\n\n
78,     Remove a couple GwtSerializationDependencies classes from open-source Guava after all \n\nAs noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary  As *also* noted there  we have *additional* FooGwtSerializationDependencies classes that I m leaving in place because they are *supertypes* of the prod classes and thus harder to remove \n\nBut I m removing these 2 because it saves me a few lines in the Copybara config :)\n\n(Followup after    com/google/guava/issues/3680)\n\n
79,     Tweak TODOs \n\n
80,     Remove GWT tests from open source \n\nWe will continue to run these tests internally \n\nI m not sure how much value the remaining open-source GwtTestSuite file provides us  Hopefully it s at least a sanity check on  gwt xml files  But I haven t tested by breaking a  gwt xml file to see what happens \n\n
81,     Begin tweaking Guava sources to satisfy Copybara \n\n- Change from http to https (and from github io links to guava dev/truth dev while I m at it) \n- Remove go/ links \n- Add whitespace around MOE directives \n- Put MOE stripping directives alone in comments  moving other comment text to a separate comment \n- One particular case of that: Put MOE intracomment stripping into HTML comments    even when it happens in non-Javadoc comments (i e   /* */)  It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment?\n- Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets \n\nThis is surely not a complete set of changes  but it s enough to get me started \n\n
82,     Mark BigDecimalMathTest as fully @GwtIncompatible \n\nCurrently it has every member annotated as @GwtIncompatible  This works fine internally  but the external GWT tests (which we run only at release time) complain about the resulting empty BigDecimalMathTest_gwt:\n   com/google/guava/blob/master/guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt java\n\n
83,     Fully remove GWT-RPC support externally \n\nReally  really closes    com/google/guava/issues/3680 \n\nPossible future work:\n- Be consistent about whether we put @GwtCompatible on the remaining internal CustomFieldSerializer classes  (For those files  it probably acts only as documentation (of something that is pretty obvious :))  Our open-source build used to take action when it saw `@GwtCompatible(emulated=true)`  but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t `emulated=true` :) I believe that our internal build requires @GwtCompatible on most files in our GWT target  but I think there s an exception for GWT-target-only sources )\n- Remove some of the GwtSerializationDependencies classes  However  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery  Keeping them is harmless: It doesn t actually make the classes GWT-serializable \n- Remove the usages of serializable=true on @GwtCompatible  at least externally but maybe just entirely \n\n
84,     Fix ClassPathTest on Android JDK 11 \n\n
85,     Also print Android test failures \n\n
86,     Remove unnecessary parens\n\nFixes #4036\n\n
87,     Internal changes to ClassPath \n\n
88,     Internal changes to ClassPath \n\n
89,     Add brief test to Range for `[_  X  isConnected([X  _ )`;\n\n
90,     Change `ForwardingMap remove(Object)` parameter name from `object` to `key` to match `Map remove(Object key)` \n\nFixes    com/google/guava/issues/4028\n\n
91,     Deal with Class#isInstance checks which are guaranteed to be false \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=332298366\n  
92,     Fix UnsupportedOperationException from TreeRangeSet subRangeSet(   ) add(   ) \n\nFixes #4019  #4002\n\n
93,     Externally restore @DoNotMock to ClosingFuture Combiner  and externally add @DoNotMock to ClosingFuture itself \n\nThis implements an alternative workaround for    openjdk java net/browse/JDK-7101822  replacing the one submitted in CL 331770482 \n\n
94,     Add back web app to public suffix list\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=332107904\n  
95,     Fix random typos in Guava \n\nFixes #4021\n\n
96,     Fix AssertionError from Range gap \n\nFixes #4007  #4004\n\n
97,     Make EqualsTester test that non-Strings are not equal to their String representation \n\n
98,     Remove spurious annotation to fix Travis build \n\n
99,     Bump checker-qual from 2 11 1 to 3 5 0 \n\nFor unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018  But at least it gets us on the newest major version  That makes it easier to see that it s safe to resolve a conflict between  say  3 5 0 and 3 6 1 by just using the newer one \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=331554618\n  
100,     Fix typos and remove unnecessary words \n\nFixes #4012\n\n
101,     Make ClosingFuture available in open-source Guava (@Beta) \n\n
102,     Minor whitespace-only change\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=330053928\n  
103,     Update Public Suffix data \n\nThe copy is typically updated whenever Chrome s copy is updated  which\nis roughly every 6 weeks  Subscribe to the Chrome Milestone Calendar to see the\ndates \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=329222572\n  
104,     Deprecate Files createTempDir()  noting that better alternatives exist for Android as well as for users running Java 7 or later \n\n
105,     Throw if @Subscribe is applied to a method that takes a primitive parameter \n\nFixes    com/google/guava/issues/3992 \n\n
106,     Work around an android bug in LockSupport  this time with @CanIgnoreReturnValue\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=327861568\n  
107,     Adding SEC-CH-UA-Arch header \n\nHeader Spec Here:    github io/ua-client-hints/#http-ua-hints\n\n
108,     Don t directly call ByteBuffer  etc  methods that have covariant returns in Java 9+ \n\nDoing so produces a jar that doesn t work under Java 8 \n\nThis CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards \n\nThe normal solution to this general problem is to use --release  but doing so here is complicated \n\nFor more information  see    com/google/guava/issues/3990\n\n
109,     Switch GWT rules implementation from native to  bzl \n\n
110,     [Efficiency  Modifies testToNumericFormatV6 to parse the input String in place \n\n
111,     Bring back previously deleted SerializedForms so that old data can still be read \n\n
112,     Remove `@Beta` from `Multimaps toMultimap` \n\nFixes    com/google/guava/issues/3957\n\n
113,     Avoid boxing in Doubles constrainToRange() and Floats constrainToRange() \n\nFixes    com/google/guava/issues/3984\n\n
114,     [Efficiency  Modifies textToNumericFormatV4 to parse the input String in place \n\n
115,     [Efficiency  Creates a variant of parseHextet and parseOctet that can work on a larger string with start and end indices \n\n
116,     Fix memory-leaks in LocalCache on iOS  caused by:\n\n1  Retain-cycle between outer LocalCache instance and inner Values  KeySet and EntrySet instances  The use of @Weak and @WeakOuter is incorrect there  since inner instances can outlive outer LocalCache instance  The correct solution is to use @RetainedWith annotation to inner-classes \n\n2  Retain-cycle between ReferenceEntry objects which internally form a doubly-linked list  Fixed by adding @Weak annotation to  next  and  previous  links  This is correct  since ReferenceEntry instances are already retained by Segments \n\nThe unit test for leak detection is added inside Xplat  because the required testing infrastructure is not present inside  google_common  (the IosAsserts class)  Eventually  everything should be moved to  google_common  \n\n
117,     Ensure that the set returned by ImmutableMap<K  V> keySet() is serializable when K is serializable  and similarly for values() \n\nSet<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap keySet() due to a reference from the returned set back to the original map  When serializing this set  the original map is serialized is well  This change changes this so that only the keys are serialized \n\n
118,     De-beta toImmutable* methods in GWT variants( emulated ) of common collect \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=322779681\n  
119,     Shorten toString for AbstractFuture implementations inside util concurrent \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=322682481\n  
120,     Add awaitTerminationUninterruptibly \n\nFixes #3908\nFixes #1315\nSomewhat relevant to    com/google/guava/issues/3655\nVaguely relevant to    com/google/error-prone/issues/1490  since it creates a `@CheckReturnValue` variant of a `java util concurrent` method that returns `false` to indicate timeout \n\n
121,     Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture set* and cancel)  and move warnings to directExecutor itself \n\n
122,     Add @DoNotMock to Traverser \n\n
123,     Unconditionally call setException for RejectedExecutionException \n\nUnder JDK11  the write to thrownByExecute / thrownFromDelegate is upsetting TSAN  I *suspect* that TSAN is incorrect (and that it is likely to identify the same  problem  in other code) \n\nHowever  we years ago questioned whether the code I\ m removing served any real purpose   \n(fixes    com/google/guava/issues/2877)\n   so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current TSAN failure \n\nThe code that we\ re running in the executor is under our control  (That is  we\ re the ones who implement Runnable run() ) We\ re catching exceptions (and thus any RejectedExecutionException) in the obvious places  Occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setFuture (after which a stray setException(rejectedExecutionException) would be a no-op) \n\nThe one(?) exception to that is that InterruptibleTask run() can call currentThread interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks  At some point  though  I throw my hands up and say  whatever  \n\n(If the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directExecutor  But I note that rejectionPropagatingExecutor  at least  already defends against this for directExecutor itself (by skipping the RejectedExecutionException logic entirely)  So the danger exists only with CombinedFutureInterruptibleTask or with a non-directExecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks  I think )\n\n
124,     Make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code \n\n
125,     Add toString() for SequentialExecutor s worker runnable\n\n
126,     Speed up Traverser and cut about 30 lines of code \n\nWhen stacked against the unsubmitted Walker  before the change:\n   breadthFirst was roughly on par;\n   preOrder/postOrder were about 70% slower (1359 vs  2358);\n\nAfter adopting the Walker impl  the tree traversal preorder/postorder are improved close to Walker impl \n\nThere is still about 10% slowness (2405 vs  2268) remaining  which I suspect is due to Iterator being slower than Spliterator  because with Spliterator  we can tryAdvance() once for each element  while with Iterator  we have to call both hasNext() and next() \n\nThe graph traversal adoption is similar  with about 15% remaining slowness compared to Walker (1583 vs  1338)  which is likely result of Spliterator tryAdvance() vs  Iterator hasNext() + next() \n\nDid not adopt the Walker s breadth-first impl for the following reasons:\n\n1  Adopting the Walker s breadth-first impl contributed about 10% slowdown compared to the current impl  I think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator  In the full traversal benchmark  it s likely faster than consuming the successor iterator lazily \n\nOn the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily \n\nFor follow-up: It might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark  Plus we can reuse code and delete the two existing BreadthFirstIterator classes \n\nI m going to add the benchmark class in the the labs directory to compare between Iteration and Traverser \n\n
127,     Declare static types as Queue instead of Deque \n\nThis may slightly clarify how the object is used \n\n(I was looking through com google common for Deque instances that were used as stacks  so I noticed this one that was used only as a queue )\n\n
128,     Update Public Suffix data \n\nThe [  copy is typically updated whenever Chrome s copy is updated  which\nis roughly every 6 weeks  Subscribe to the Chrome Milestone Calendar to see the\ndates \n\nFor this update  [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=320112849\n  
129,     Fix annotation positions in Guava \n\n
130,     Hint with the type that `oldFuture` / `newFuture` / `ref` s `Future` never contains a value \n\nBeing clear may become slightly more valuable when we put nullness type annotations on this code \n\n
131,     Remove unnecessary comment \n\n
132,     Fix Converter java by moving @RetainedWith annotation to the correct side of the cycle \n\nThe annotation should be placed inside the  parent  object  and not the  child  object \n\nReference:    google com/j2objc/javadoc/annotations/reference/com/google/j2objc/annotations/RetainedWith\n\n
133,     Implement BigDecimalMath roundToDouble \n\n
134,     In ImmutableDoubleArray and ImmutableLongArray  use Arrays copyOf when expanding the internal array \n\nIn ImmutableIntArray  where we already made this change  remove an inconsistent `this ` \n\n
135,     Correct LongMath roundToDouble for values at and near Long MAX_VALUE\n\n
136,     Fix memory leak in SingletonImmutableBiMap which would appear in transpiled J2ObjC code \n\nThe @RetainedWith annotation can not be used on both sides of the retain-cycle  The RegularImmutableBiMap does not have this problem  because it uses Inverse inner class  This CL applies similar trick in SingletonImmutableBiMap  although without additional inner class \n\n
137,     Avoid reentrancy in ExecutionSequencer \n\n
138,     Add a test for the bug introduced by CL 316779471 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=316982088\n  
139,     Add LongMath roundToDouble \n\n
140,     Revert db53357fea477695deeaa32746660bf86d6d51c1\n\nBroke a test\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=316808913\n  
141,     Avoid reentrancy in ExecutionSequencer \n\n
142,     Add a Guava wiki entry about finding the min/max for various circumstances \n\n
143,     Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4\n\nCausing some internal failures\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=316509747\n  
144,     Upgraded ByteStreams#copy(InputStream  OutputStream) to use the faster FileChannel if possible \nSee also    com/@xunnan xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background \n\n
145,     Inline `ByteStreamsTest#assertEquals(byte[   byte[ )`\n\n#codehealth\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=315898541\n  
146,     Cleanup ByteStreamsTest java to fix a couple of IntelliJ warnings/suggestions \n\n#codehealh\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=315895616\n  
147,     Break retain-cycle in Converter java  when used in J2ObjC target \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=315679614\n  
148,     Suppress IdentityHashMapBoxing check\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=315558134\n  
149,     Discourage Ordering min(E  E) and max(E  E) in favor of Comparators min(E  E  Comparator) and max(E  E  Comparator) \n\n
150,     Add Comparators min/max\n\n
151,     Efficient UnmodifiableMultimap forEach\n\nforEach can pass calls directly to the delegate protected\ncollection because it is a read-only operation \n\nFixes #3911\nFixes #3912\n\n
152,     Implement BigIntegerMath roundToDouble  which rounds to the nearest representable double value \n\nPartially implements    com/google/guava/issues/3895\n\n
153,     Update Public Suffix data \n\nThis copy is typically updated whenever Chrome s copy is updated  which\nis roughly every 6 weeks  Subscribe to the Chrome Milestone Calendar to see the\ndates \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=314699619\n  
154,     Remove @DoNotCall from FluentIterable from(FluentIterable) \n\n
155,     guava: disavow VisibleForTesting\n\nJohannes and I invented this class in the early days of Blaze \nand in hindsight it was clearly a mistake; it encourages self-deception \nThis change adds a comment discouraging its further use \n\n
156,     Added support for the  font  Top-Level Media Type (   ietf org/html/rfc8081)\n\n
157,     Document that Ranges are immutable \n\nFixes    com/google/guava/issues/1813\n\n
158,     Adding the rest of the client-hints headers (besides Arch which I don t think we need) \n\nHeader Spec Here:    github io/ua-client-hints/#http-ua-hints\n\n
159,     Adding the Sec-CH-UA header  Ignore ClangTidy  It has to do with the constant naming scheme for httputils h \n\nSpec for header:    github io/ua-client-hints/\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=311420502\n  
160,     Suppress IdentityHashMapBoxing check\n\nThis would soon become an ERROR in blaze \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=311352634\n  
161,     Implemented lastIndexOf in CartesianList\n\nFixes #3878\n\n
162,     In ImmutableIntArray  use Arrays copyOf when expanding the internal array \n\n
163,     Ensure QueueWorker does not outlive SequentialExecutor on iOS \n\nWhen `SequentialExecutor` is used on iOS as J2ObjC-transpiled code  we need to\nmake sure that `SequentialExecutor QueueWorker` does not outlive its outer\nclass  Previously  because the inner class was annotated with `@WeakOuter`  it\ncould happen  and  when this happened  the inner class would then invoke\nmethods on a dangling pointer and crash the process in turn  The issue is now\nfixed by annotating the worker field in the outer class with `@RetainedWith` \n\nAlthough `@RetainedWith` was initially designed for bimaps  the annotation\naddresses exactly the lifecycle problem here \n\n
164,     Implement tryLockUninterruptibly\n\nFixes #3880\n\n
165,     Adds constants for `Cross-Origin-Embedder-Policy(-Report-Only)?` headers ([W3 (   github io/cross-origin-embedder-policy/#COEP)) \n\n
166,     Fix PowerSet equals() when comparing to another PowerSet whose items are the same  but in a different iteration order \n\n
167,     Fixed TreeRangeMap SubRangeMap putCoalescing\n\nThe short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated \n\nFixes #3886\n\n
168,     Move comment to a more appropriate location\n\nThe comment was added along with putCoalescing in CL 143507326 \n\nFixes #3883\n\n
169,     Fix GitHub #3873 by reimplementing Cartesian Set List  contains \n\n
170,     Update Public Suffix data \n\nThe Guava copy is typically updated whenever Chrome s copy is updated  which\nis roughly every 6 weeks  Subscribe to the Chrome Milestone Calendar to see the\ndates \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=308028590\n  
171,     Hide InternetDomainName region() from GWT/j2cl \n\nThe method is not used from GWT/j2cl \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=307886252\n  
172,     Update readme with some grammar corrections \n\nCloses #3857\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=307658343\n  
173,     This change suppresses DefaultPackage check for any java class which uses the default java package  in preparation for enabling a compiler error that will prevent new instances of the bug \n\nThe Google Java Style Guide §8 2 1 requires Java files to have a (non-default) package declaration   Missing package declarations can cause odd problems that are difficult to debug  such as a class not being included in a test suite or confusion around package-private visibility \n\n
174,     Exclude Vim swap files from the jar we build \n\nFixes    com/google/guava/issues/3861\n\n
175,     Remove duplicate assumption \n\n
176,     Fix typo \n\n
177,     Prepare for release 29 0 \n\n
178,     Add `@since NEXT` for recently added `graph` APIs \n\n   dev/releases/snapshot-jre/api/diffs/changes/alldiffs_index_additions html\n\n
179,     Remove `@Beta` from `Service` and `ServiceManager` \n\nThis leaves `AbstractListeningExecutorService` as `@Beta` \n\nFixes #3806  #3418\nRelevant to #2966\n\n(I have tweaked Jesse s initial PR to leave `AbstractExecutionThreadService triggerShutdown` and `AbstractService doCancelStart` as `@Beta`  since we aren t sure we like the locking behavior of the former  and we ve realized that `Listener stopping` _might_ be a reasonable substitute for both )\n\n
180,     Don t request openjdk-11-source \n\nWe don t need it yet  since we build Javadoc snapshots with OpenJDK 8 \nMaybe we ll need it someday  but currently it doesn t exist :)\n\n   org/github/google/guava/jobs/673105448\nE: Unable to locate package openjdk-11-source\n\nFollowup to CL 305716744 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=305735746\n  
181,     Use @code instead of @link to allow imports to be stripped\n\n
182,     Try yet again to inherit docs from the JDK when building Javadoc for snapshots \n\nI am optimistic: See    com/google/guava/issues/3669#issuecomment-611658339\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=305716744\n  
183,     Fix unnecessary method access level escalation \n\nFixes    com/google/guava/pull/3843\n\n
184,     Add StandardImmutableDirectedNetworkTest \n\n
185,     Merge StandardUndirectedMultiNetworkTest into StandardMutableUndirectedNetworkTest\n\n
186,     Merge StandardDirectedMultiNetworkTest into StandardMutableDirectedNetworkTest \n\n
187,     Move tests from Multinetwork-test classes to base classes in preparation for merging the Multinetwork-classes with the mutable classes \n\n
188,     Merge StandardSimpleDirectedSortedNetworkTest into StandardMutableDirectedNetworkTest \n\n
189,     Change return type of ServiceManager servicesByState() to ImmutableSetMultimap \n\nBut also generate a bridge method with the old signature for binary compatibility \n\n   com/google/guava/issues/3418 (which I keep forgetting to mention from commits   )\n\n[ \n\n
190,     Add j2cl specializers for Doubles min/max  Floats min/max  Ints min/max  and Shorts min/max \n\n
191,     Extend deadline to fix flakiness \n\nIt s possible that we don t really need to assert that the pool finishes shutting down at all  Maybe the other existing assertions are enough? But I haven t bothered to look into it \n\n
192,     Make `Duration` overloads of `awaitRunning` and `awaitTerminated` `final` in all `Abstract*Service` classes \n\nThe other overloads already are already `final`  These ones aren t only because we didn t think to do this when adding the new `default` methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=304180695\n  
193,     Making headSet(E  boolean)  tailSet(E  boolean) public in GWT emulated ImmutableSortedSet \n\n
194,     Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package \n\n
195,     Add immediateVoidFuture() to Futures java to create an immediately succeeding ListenableFuture<Void> \n\n
196,     Deprecate 1-arg overload of ServiceManager addListener \n\nIt default to directExecutor()  directExecutor() is often useful  but it should be an explicit choice  as some usages are dangerous:\n   dev/releases/snapshot-jre/api/docs/com/google/common/util/concurrent/ListenableFuture html#addListener-java lang Runnable-java util concurrent Executor-\n\n   com/google/guava/issues/3418\n\n
197,     Add missing `@since` for 1-arg `ServiceManager addListener` \n\n   dev/releases/15 0/api/diffs/changes/com google common util concurrent ServiceManager html#com google common util concurrent ServiceManager addListener_added%28com google common util concurrent ServiceManager Listener%29\n\n
198,     Make sure native js files are included in the Guava GWT release \n\nThis is needed for J2CL compatibility \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=302737505\n  
199,     Add some unit tests for base64Url() in BaseEncoding\n\nFixes #3816\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=302064745\n  
200,     Fixed double slicing ByteSource (#3501) \n\nFixes #3829\n\n
201,     Add `Duration`-based default methods to `ListeningScheduledExecutorService`\n\nThey just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds  This matches existing `Duration`-based overloads of `(long  TimeUnit)` methods in the same package \n\n
202,     Store `values` in a local first instead of repeatedly reading it from a field \n\nAt worst  this is a no-op  At best  it may perform better \n\n
203,     Implement some more toString() methods for debugging \n\nI added these locally while debugging  but they seem potentially generally useful \n\n
204,     Replace Thread currentThread() interrupted() with Thread interrupted() or Thread currentThread() interrupt()  whichever seems appropriate \n\nThread interrupted: static method on Thread which returns whether the thread has been interrupted (and resets the interrupt bit)\n\nThread currentThread() interrupt(): interrupts the current thread\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=301162686\n  
205,     Make StandardMutableDirectedNetworkTest parameterized so that it tests both with and without self loops \n\nThis is similar to an earlier refector of the AbstractGraphTest tree \n\n
206,     Move all tests from StandardMutableDirectedNetworkTest to AbstractStandardDirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree \n\nNote: This is a pure refactor: No tests were added or removed \n\n
207,     Simplify the AbstractNetworkTest tree (directed branch): Delete StandardSimpleDirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree \n\n
208,     Make StandardMutableUndirectedNetworkTest parameterized so that it tests both with and without self loops \n\nThis is similar to an earlier refector of the AbstractGraphTest tree \n\n
209,     Move all tests from StandardMutableUndirectedNetworkTest to AbstractStandardUndirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree \n\nNote: This is a pure refactor: No tests were added or removed \n\n
210,     Simplify the AbstractNetworkTest tree (undirected branch): Delete StandardSimpleUndirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree \n\nNote: This is a pure refactor: No tests were added or removed \n\n
211,     Simplify AbstractGraphTest by replacing allowsSelfLoops() and incidentEdgeOrder() by graph accessors \n\n
212,     Document that our racy access is safe \n\n
213,     Roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d\n\nMake nullWriter() append(   ) (both overloads) accept a null CharSequence \n\nThe docs of Writer are misleading:\n\n   \nAn invocation of this method of the form out append(csq) behaves in exactly the same way as the invocation\n     out write(csq toString())\n   \n   oracle com/javase/7/docs/api/java/io/Writer html#app   \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=298459337\n  
214,     Rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=298450900\n  
215,     Migrate from @MonotonicNonNull to @Nullable \n\nThe features of @MonotonicNonNull don t buy us anything in our use case  since we check the fields for null on every access  anyway \n\nAnd @MonotonicNonNull is likely not to be available in the set of nullness annotations we adopt \n\n   org/api/org/checkerframework/checker/nullness/qual/MonotonicNonNull html\n\n
216,     Store each result in a  Present<V>  instance instead of an Optional<V> \n\nWe can\ t store a plain V because we need to distinguish between Optional absent() and null (at least in the Google-internal successfulAsMap -- and eventually in whenAllComplete(   ) collectToList() (#1519)  which is likely to omit failures instead of mapping them to null as successfulAsList does) \n\nWe may have problems using Optional when we adopt new nullability annotations  since Optional<V> might not be a valid instantiation when V is instantiated with a nullable type \n\n
217,     Make nullWriter() append(   ) (both overloads) accept a null CharSequence \n\nThe docs of Writer are misleading:\n\n   \nAn invocation of this method of the form out append(csq) behaves in exactly the same way as the invocation\n     out write(csq toString())\n   \n   oracle com/javase/7/docs/api/java/io/Writer html#append%28java lang CharSequence%29\n\nBut that\ s not true  as the docs go on to say:\n\n   \ncsq - The character sequence to append  If csq is null  then the four characters  null  are appended to this writer \n   \n\nAccepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently:\n   oracle com/javase/7/docs/api/java/io/Writer html#append%28java lang CharSequence %20int %20int%29\n\nCredit to the Checker Framework for identifying this bug \n\n
218,     Delete unused method\n\n
219,     Remove remaining documentation references to configurable implementations\n\n
220,     Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent \n\nNote that this work was already done for [Value Graph \n\n
221,     Update Public Suffix data \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=297380985\n  
222,     Make GWT compilation of tests no longer flaky \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=297372033\n  
223,     Make lenientToString easier for nullness-analysis tools to understand \n\nAnd I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?\n\nAs far as tools know  String valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null  Thus  tools conclude that the flow of the program might reach `o getClass() getName()` when `o` is null  That would in turn produce NullPointerException \n\nTools might not even be wrong  since String valueOf could produce a StackOverflowError if we were *just* about to run out of space  Of course  in that case we re going to have problems in the catch() block no matter what    :)\n\nTo avoid this  we check for null in lenientToString itself \n\n
224,     Make Compact(Linked)HashSet fall back to a java util LinkedHashSet if hash flooding is detected  just as the immutable collections do \n\n
225,     Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable \n\nNote: This is a pure refactor  no coverage is changing \n\n
226,     Simplify redundant `Collection addAll()` calls \n\nFixes #3800\n\n
227,     Invalidate delegate iterators during clear() and make FPP tests more strict\n\n
228,     Fixing a typo in some Guava javadocs \n\n
229,     Annotate FluentIterable from(FluentIterable) with @DoNotCall\n\n
230,     Make TopKSelector ctor throw IllegalArgumentException when buffer size is too big to be held in memory \n\nPreviously this would lead to java lang NegativeArraySizeException \n\n
231,     Rename  ConfigurableX  to  StandardX  for [Value Graph  which better captures what these implementations represent \n\nNote that this work was already started in the past with the abstract StandardGraph tests \n\n
232,     Apply changes from    com/google/guava/pull/3778 (which edited guava dev) to README md \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=294671757\n  
233,     Add missing @Nullable \n\n
234,     Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval \n\nFixes #3788  #3784\n\n
235,     Annotate upperCase and lowerCase with @LazyInit \n\nThis eliminates a TSAN warning \n\n
236,     Link directly to guava dev for Javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=291383669\n  
237,     Write type annotations on types  not on declarations\n\nFixes #3774\n\n
238,     Update Resource getResource to allow ignoring return value for existence checks \n\nSpecifically this impacts getResource(contextClass  resourceName) as this is already present on getResource(resourceName)\n\n
239,     Rewrite the Stopwatch docs to explain elapsed vs wall time\n\n
240,     Update Public Suffix data \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=289672158\n  
241,     Upgrade checker-qual to v2 11 1 \n\nFixes    com/google/guava/pull/3671\n\n
242,     Make incidentEdgeOrder() public for [Value Graph\n\n
243,     Add incidentEdgeOrder() to the [Value Graph interface\n\n
244,     Disable GWT-RPC by default in the open-source release \n\n
245,     Fix off-by-one error in AsciiDigits asciiDigits initialization \n\nFixes #3761 \n\n
246,     Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest\n\n
247,     Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un directedGraphTest \n\n
248,     Suppress GuardedBy violation in LocalCache \n\nThis looks like it s just for testing  which I think makes it /probably OK/  but feel free to suggest otherwise \n\n
249,     Add StandardImmutableUndirectedGraphTest\n\n
250,     Graph: Support stable incidentEdgeOrder for undirected graphs\n\n
251,     ImmutableValueGraph: Support incidentEdgeOrder=stable\n\n
252,     ValueGraph: Support incidentEdgeOrder=stable\n\n
253,     Ensure that we generate a non-empty Javadoc jar for guava-gwt \n\nWithout it  we get an error during Sonatype deployment:\n  Missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28 2-jre \n\nI hacked around this on the GitHub release branch for 28 2 by reenabling Javadoc:\n   com/google/guava/commit/a1b3c06876803a0b0e5d2f16708e1328da1bac09\n\nBut as you may recall from CL 276327335  we re soon going to have no classes to generate Javadoc for (after we remove GWT-RPC support)  So even with Javadoc generation enabled  we d end up with no jar \n\nTo ensure that we get a jar  I ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used) \n\n
254,     Suppress ignored return values from Collection#contains* \n\nI think this is all of them!\n\n
255,     Note another case in which our implementation of TypeVariable throws UnsupportedOperationException \n\n
256,     Update to JUnit 4 13\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=287995705\n  
257,     Fix instances of  #foo  in Javadoc \n\n
258,     Assign the result of contains() and containsAll() to a variable \n\nThis satisfies the CheckReturnValue checker \n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=287279350\n  
259,     Prepare for release 28 2 \n\n
260,     documenting IllegalArgumentException for too-large Cartesian\nProduct in Sets cartesianProduct\n\nFixes #3756\n\n
261,     Stop classifying AbstractHashFloodingTest as a test to be run directly \n\nWhen it s classified as a test to be run directly  our custom infrastructure generates AbstractHashFloodingTest_gwt  and Maven tries to run it  failing with:\n  No tests found in com google common collect AbstractHashFloodingTest_gwt\n\nIdeally  our infrastructure would recognize that an abstract class could never be run directly  at which point we wouldn t need to manually classify tests like this  But I don t remember seeing this problem in a long time  so we probably won t bother \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=287204169\n  
262,     Fix external GWT breakage from CL 272446666 \n\n
263,     Correct @Nullable and use Ints constrainToRange()\n\n
264,     refactor: Lambda can be replaced method reference\n\nFixes #3745\n\n
265,     Add @SuppressWarnings for new violations of the GuardedBy checker \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=286896398\n  
266,     Fix Maven test failures from CL 286604248:\n- Make  abstract  class abstract  (And make its constructor package-private while we\ re at it )\n- Add a dummy test method (similar to what FilteredCollectionsTest already has) \n\nThese should fix:\n- warning(junit framework TestSuite$1): Class com google common collect AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase()\n- warning(junit framework TestSuite$1): No tests found in com google common collect ImmutableBiMapTest\n\n   org/google/guava/jobs/628734577\n\n(Also  address a review comment:    com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)\n\n
267,     Make Compact(Linked)HashMap fall back to a java util LinkedHashMap if hash flooding is detected  just as the immutable collections do \n\n
268,     Expand Android access to Compact*Hash*\n\nAlso rename newCompactHashMapWithExpectedSize(int) to newCompactHashMap(int) to\nmatch newCompactHashSet(int) \n\n
269,     Use Error Prone s @GuardedBy enforcement to make sure that mutable state is appropriately synchronized \n\n
270,     Actually map Thenable helper interface to JS IThenable  The name is different to avoid a clash with elemental2 IThenable \n\n
271,     Format the Javadoc of ByteStreams read() with @throw tags \n\nFixes    com/google/guava/pull/3735\n\n
272,     Remove @DoNotMock from HashFunction \n\nUsers need some kind of way to  e g   easily produce collisions in cases in which collisions should be rare \nMaybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks \n\n
273,     Fix small error with how CaseFormat calculates the StringBuilder size when converting one format to another \n\nFixes    com/google/guava/pull/3730\n\n
274,     Add @DoNotMock to ListenableFuture\n\nRemove @DoNotMock from AbstractFuture  as it is now covered by @DoNotMock on ListenableFuture\n\n
275,     Add @DoNotMock to several com google common types\n\nRelnotes:\n  - Add @DoNotMock to several com google common types \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=284229762\n  
276,     Support stable incident edge order for directed Immutable[Value Graphs \n\n
277,     Make equally named putEdge() method adjacent\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=283987870\n  
278,     The Graph tests now consistently call graphAsMutableGraph foo() when testing foo()  rather than proxy methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=283984080\n  
279,     Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis \n\n
280,     Use  IPv4  instead of  Ipv4  for consistency \n\nThis CL goes against the style guide  but we should be consistent within the file  We could instead rename the existing  lightly used methods to match the style guide  but I don\ t think this will be the best use of someone\ s time \n\n
281,     Annotate benign race in AbstractTable so as to avoid TSAN issues \n\n
282,     Add StandardImmutableDirectedGraphTest\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=283039950\n  
283,     Merge StandardMutableDirectedGraphTest and its variant with stable order \n\nThis is in preparation for adding an Immutable version that also needs tests for the stable order \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=283039017\n  
284,     Make the AbstractGraphTest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=283037760\n  
285,     Merge AbstractXGraphTest and ConfigurableSimpleXGraphTest  thus removing one layer from the AbstractGraphTest tree \n\nReason: Nobody in [  is using these abstract test classes (even though they are designed for general purpose graphs)  However  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of ImmutableGraph tests and stable incident edge order tests \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=283036660\n  
286,     Refactor AbstractGraphTest to allow for tests with ImmutableGraph \n\nReason: ImmutableGraph implementations are undertested compared to MutableGraph implementations  The current tests didn t catch a bug I deliberately introduced in [  Also  it would be nice to be able to share the incident edge order tests \n\nNote about design: I started out by making an AbstractGraphTest subclass for mutable graphs  However  that would lead to a duplication of all 7 subclasses and most of their tests  The issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowSelfLoops=true/false and incidentEdgeOrder=unordered/stable  The proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests \n\n
287,     AbstractNetwork: fix bug in AbstractNetwork hasEdgeConnecting() causing it to throw if either endpoint was not in the graph \n\n
288,     Make incidentEdges() return edges in insertion order\n\n
289,     Add @JsOptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional  This satisfies JsCompiler type checking \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=282755478\n  
290,     Support incidentEdgeOrder for directed Graphs\n\n
291,     Use internal fast path for getting failure without allocating a wrapper ExecutionException\n\nAlso fix GWT AbstractFuture so that it respects the trusted interface  (More motivation for    com/google/guava/issues/2934)\n\n
292,     subject verb agreement\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=281322594\n  
293,     Update to Truth 1 0\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=281279350\n  
294,     Update Public Suffix data \n\nThe [  copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated  the [  copy is updated 3 weeks before the\nEstimated Week of Stable:\n\n   chromium org/developers/calendar#TOC-Estimated-Stable-Dates\n\nFor this update  [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=281088952\n  
295,     checker-qual 2 10 0\n\nFixes #3706\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=281041572\n  
296,     Correct documentation of getCoercedIPv4Address \n\n
297,     Use Truth assertions instead of JUnit assertions in InetAddressesTest \n\nMake assertions stronger if possible (check object equality instead of reference equality) \n\n
298,     Format with Locale ROOT \n\nThis guarantees that the message matches across locales  including hi-IN  which we test with under Maven:\n   org/google/guava/jobs/611945191\n   com/google/guava/blob/cc6cff2df9d66d4d9cd18f378cb75d03f7002852/pom xml#L212\n\n
299,     Add support for scope IDs to InetAddresses isInetAddress() \n\nFixes    com/google/guava/issues/2587\n\n
300,     Move the big integer conversion code into InetAddresses\n\n
301,     Clean up some unnecessary initializations \n\n
302,     Migrate from arrays to ImmutableSets in InetAddressesTest \n\n
303,     Roll forward CL 269313299 \n\n*** Original change description ***\n\nLet ListenableFuture implement thenable via a default interface method in J2CL\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=279693687\n  
304,     Fix broken links in AtomicDouble \n\nSee    com/google/guava/pull/3689\n\n
305,     Add javadoc in attempt to help readers differentiate Futures allAsList() vs Futures successfulAsList() \n\n
306,     Simplify some range constraints \n\nFixes    com/google/guava/pull/3607 \n\n
307,     Upgrade maven source plugin from 3 1 0 to 3 2 0\nUpgrade maven jar plugin from 3 0 2 to the latest 3 2 0\nMaven source and jar plugins both introduced build reproducibility in 3 2 0\n\nSee    com/google/guava/pull/3534\nSee    com/google/guava/pull/3681\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=279077794\n  
308,     Migrate org mockito Matchers#any* to org mockito ArgumentMatchers\n\nThe former is deprecated and replaced by the latter in Mockito 2  However  there is a\nfunctional difference: ArgumentMatchers will reject `null` and check the type\nif the matcher specified a type (e g  `any(Class)` or `anyInt()`)  `any()` will\nremain to accept anything \n\nAll remaining `any(Class)` references are migrated to `nulllable(Class)` to maintain the functionality of Mockito 1 \nAll remaining `anyString()` references are migrated to `nullable(String class)` to maintain the functionality of Mockito 1 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=278736072\n  
309,     Have ImmutableGraph Builder set incidentEdgeOrder to stable() \n\n
310,     Remove usages of deprecated CharMatcher functions\n\nFixes #3565\n\n
311,     Add GraphBuilder incidentEdgeOrder() \n\n
312,     Add @SuppressWarnings( DoNotMock ) to mocked com google common types\n\n@DoNotMock will be added to these types  This change suppresses warnings for current cases where these types are mocked \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=278536113\n  
313,     Update Documentation\n\nFixes #3507\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=277725484\n  
314,     Handle StackOverflowError from both pendingToString and appendUserObject \n\nAdds a bunch of tests to validate error handling in toString code\n- Verify that a future completing during the toString call results in a done formatted string\n- Verify that an exception thrown by pendingToString doesn t cause toString to fail\n- Verify that cycles don t cause toString to fail\n- Verify that deep chains of SetFuture don t cause toString to fail\n\n
315,     Fix toString exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca \n\nThis is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic \n\n
316,     Move the SetFuture check into AbstractFuture toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail \n\nThis is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner callAsync() does \n\n
317,     Format README md \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=276739948\n  
318,     Update \ adding Guava to your build using Gradle\  snippet\n\nThe notation with brackets - () - and double quotes -   - is valid\nin both Gradle\ s Groovy and Kotlin DSL \n\nThe  compile  configuration is already discouraged since some time and\nofficially deprecated with Gradle 6 \n\nFixes #3673\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=276737926\n  
319,     Rollback\n\n*** Reason for rollback ***\n\nDidn t work:    dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger html#equals-java lang Object-\n\n*** Original change description ***\n\nAttempt to fix inheriting Javadoc from the JDK again \n\nIt s currently missing:\n   dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger html#equals-java lang Object-\n\nBut I haven t managed to reproduce the problem locally \n\nI m trying this on the theory that java home might be pointing to the JDK (the top-level directory in which src zip lives) rather than the JRE (a subdirectory) \n\nNote that JDK11 has src zip in a lib/ subdirectory  I tried adding it to a Ja   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=276546857\n  
320,     Prepare to move gwt-user to test scope after we remove GWT-RPC support \n\nWhen we do that  we\ ll no longer be able to compile ForceGuavaCompilationEntryPoint as part of the normal javac compile or build its Javadoc (because of the  missing  dependency) \n(ForceGuavaCompilationEntryPoint lives under the main (i e   non-test) sources because we want to ensure that our prod code compiles without any dependencies added by our tests )\n\nSo exclude it from the javac compile  and turn off building Javadoc altogether  (Javadoc already isn\ t useful for guava-gwt  since it covers only ForceGuavaCompilationEntryPoint and the internal serialization classes  Once the serialization classes go away and ForceGuavaCompilationEntryPoint is hidden  we would get an error from Javadoc because it wouldn\ t find *any* sources )\n\nRemoving ForceGuavaCompilationEntryPoint from the javac compile is fine: I\ ve verified that the GWT compiler still runs and identifies any GWT compilation errors  And I\ ve diffed the resulting GWT jars \n\nWhile here  I moved some GWT-specific configuration into the guava-gwt pom xml \n\nRelevant to    com/google/truth/issues/637\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=276327335\n  
321,     Make inheriting Javadoc from the JDK work under JDK11 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=276122493\n  
322,     Fix Javadoc errors (and sometimes warnings) \n\nThese are mostly (perhaps entirely) problems new with Java 11 s javadoc (or at least with Java 9+) \n\n
323,     Use int[  for entries and byte[ /short[ /int[  for hashtable\n\nThe entries array containing the hash and next index was reduced from a long[ \nto int[   This is achieved by storing only the bits of the hash not covered by\nthe hashtable mask; the bits covered by the hashtable mask are implied-by and\ncan be inferred-from the hashtable bucket index  By ensuring that next pointers\nare always less than or equal to the hashtable mask  everything needed can be\npacked into an int[   Inferring the missing hash bits from the hashtable bucket\nindex is only required for rehashing (the hashtable bucket chains must be\nwalked) and is the source of the slowdown for unsized instances \n\nThe hashtable is created as a byte[ /short[ /int[  based on size  stored as an\nObject  and cast to the correct type using instanceof checks \n\nAndroid performance impact varies but stays within +/-15% (average: 3% better) \nJVM performance impact generally stays within +/-15% but unsized instances are\nup to 42% worse (average: 5% worse) \n\nCompactHashSet Android memory usage:\nbyte[  sizes (1-255): 14-48% better (average: 43% better)\nshort[  sizes (256-65535): 24-40% better (average: 38% better)\nint[  sizes (65536+): 0-25% better (average: 22% better)\n\nCompactHashMap Android memory usage:\nbyte[  sizes (1-255): 10-40% better (average: 34% better)\nshort[  sizes (255-65535): 19-33% better (average: 31% better)\nint[  sizes (65536+): 0-20% better (average: 18% better)\n\nEffects on CompactHashSetProGuard:\n12817 bytes => 14189 bytes (+11%)\n3 classes => 3 classes (0%)\n39 methods => 44 methods (+13%)\n\nEffects on CompactHashMapProGuard:\n19133 bytes => 21883 bytes (+14%)\n11 classes => 11 classes (0%)\n75 methods => 83 methods (+11%)\n\n
324,     Add ElementOrder stable() \n\n
325,     Attempt to fix inheriting Javadoc from the JDK again \n\nIt\ s currently missing:\n   dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger html#equals-java lang Object-\n\nBut I haven\ t managed to reproduce the problem locally \n\nI\ m trying this on the theory that java home might be pointing to the JDK (the top-level directory in which src zip lives) rather than the JRE (a subdirectory) \n\nNote that JDK11 has src zip in a lib/ subdirectory  I tried adding it to a Java 11 build of Guava  but things blew up because the JDK contains module declarations  which naturally are incompatible with our -source 8  Possibly the right fix there is to avoid -source 8 in favor of the approach I used for jimfs in CL 272937179 -- except that maybe I already tried that and it wasn\ t sufficient? I\ m happy to punt on that for now  especially since I just tried removing -source 8 and got a bunch of  too many module declarations found  errors :)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=275925004\n  
326,     Fix ImmutableList#of Javadoc\n\nFixes #3561\n\n
327,     Fix ByteStreams skipUpTo to avoid making unnecessary allocations \n\n- Fixes    com/google/guava/issues/3662\n- Closes    com/google/guava/issues/3663\n\n
328,     Resolve some rawtypes warnings in Converter\n\n
329,     Add Stream support to Stats and StatsAccumulator \n\nThis adds:\n - A static method Stats toStats() that returns a Collector<Number  StatsAccumulator  Stats> \n - Stats of overloads and StatsAccumulator addAll overloads that take DoubleStream  IntStream  and LongStream \n - A StatsAccumulator addAll overload that takes StatsAccumulator \n\n(In passing  this also improves the tests in a couple of ways  It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice  And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values  This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double  It just happened that everything was close enough before )\n\n
330,     update failureaccess version to match docs with code\n\nFixes #3653\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=274569910\n  
331,     Log warnings for users who send Guava types over GWT-RPC \n\n(Roll forward CL 273803350  which was rolled back in CL 273825377  This time with updates to one-definition whitelist )\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=274191489\n  
332,     Suppress more GoodTime errors \n\n
333,     Rename package-private Duration APIs:\n  saturatedToNanos() -> toNanosSaturated()\n  saturatedToMillis() -> toMillisSaturated()\n\n#goodtime\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=273995985\n  
334,     switch to an internal annotation for ignoring JRE\nrequirements\n\nFixes #3652\n\n
335,     Revert previous CL:\n\n============\nLog warnings for users who send Guava types over GWT-RPC \n\nI ve left this change out of the Android branch  For starters  it s not necessary there  since we don t support GWT  But normally we d include it anyway to minimize diffs  However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field)  There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=273825377\n  
336,     [OpenSearch  Add MediaType for  application/opensearchdescription+xml \n\n
337,     Steam -> Stream in the names of certain locals in ByteStream \n\n
338,     Log warnings for users who send Guava types over GWT-RPC \n\nI ve left this change out of the Android branch  For starters  it s not necessary there  since we don t support GWT  But normally we d include it anyway to minimize diffs  However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field)  There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable \n\n
339,     Require tokens to be non-empty \n\nFollowup to CL 272190935 \n\nFixes    com/google/guava/issues/3626 (again :))\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=273763774\n  
340,     Address TSAN errors:\n\n1  Suppress safe racy init in AbstractMultiset and HashBiMap  All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap Inverse  which inherits AbstractBiMap\ s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily \n\n2  Mark some graph  cache  fields as volatile  These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(   ))  the graph stores the entry in a field  That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn\ t have to perform a potentially mildly expensive lookup  But this caching isn\ t implemented in a thread-safe way  It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads  But because of the racy reads of the cached entry fields  I don\ t think this is guaranteed to be safe \n\n
341,     Remove duplicate null check from EnumMultiset \n\nFixes    com/google/guava/pull/3559\n\n
342,     Change tryParse methods to explicitly document that they throw NPE if the input is null \n\nThis is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails  \n\nFixes    com/google/guava/issues/1259\n\n
343,     Document the JDK 9+ alternative to `MoreObjects#firstNonNull`\n\nFixes    com/google/guava/pull/3383\n\n
344,     Upgrade maven source plugin from 2 1 2 to 3 1 0\n\nFixes    com/google/guava/pull/3466\n\n
345,     Use if statement instead of for statement for a single item \n\nFixes #3633\n\n
346,     Bump version  which went out of date since the previous CL was created \n\n
347,     Change Quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes() \n\nFixes    com/google/guava/pull/2989\n\n
348,     Add testlib readme \n\nFixes #3453\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=272455172\n  
349,     Fix the logic that decides whether to use currentRequestThreadFactory() under App Engine \n\nWhile there  also support thread renaming under App Engine \n\nFixes    com/google/guava/issues/3598\nRelevant to    com/google/guava/issues/3606\n(also  the CL in which I experimented with    com/google/guava/issues/3569 before backing it out)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=272446666\n  
350,     Add a MIME type MPEG-DASH (mpd files)\n\nFixes #2677\n\n
351,     Document the JDK 9+ alternative to `Iterators#forEnumeration`\n\nFixes #3382\n\n
352,     Simplify some code \n\nFixes #3580\n\n
353,     Check the array indexes in Quantiles ScaleAndIndexes is non empty \n\nFixes #3210\nFixes #3211\n\n
354,     Add constant for the Cross-Origin-Opener-Policy header \n\n[ \n\n
355,     Add missing @since 20 0 \n\n
356,     Fix 2 bugs in MediaType parameter handling:\n\n1  Make empty parameter values serialize to a quoted string \n2  Require parameter values to be ASCII \n\nFixes    com/google/guava/issues/3626\n\nRelnotes:\n  Made `MediaType` serialize empty parameter values to quoted strings \n  Made `MediaType` reject non-ASCII parameter values \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=272190935\n  
357,     Update errorprone to 2 3 3\n\nFixes #3628\n\n
358,     Add Futures submit() \n\n
359,     Add Splitter splitToStream() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=271168270\n  
360,     s/a/an/\n\n
361,     Test iteration over a collection containing null \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=270909197\n  
362,     Clean up leftovers from MapMaker makeComputingMap:\n\n- Remove makeComputingMap from the GWT emulation \n- Deprecate ComputationException \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=270019222\n  
363,     Rollback of change to let ListenableFuture implement thenable via a default interface method in J2CL \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=270016981\n  
364,     Rollback of adding Splitter splitToStream() \n\n*** Reason for rollback ***\n\nMy guess is that this change somehow upsets an allowed list of\none-definition violations \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=269929261\n  
365,     Add comment explaining TABLE and MULTIPLIER in CharMatcher Whitespace\n\nFixes #1661\n\n
366,     Add Splitter splitToStream() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=269903927\n  
367,     Undo test CL 9a50815df26be7416be0fac489e29feee7a3c220 \n\nIt produces a tiny diff between the common base and common collect copies of AbstractIterator \n\n
368,     Add test for behavior described in #1900\n\n
369,     Let ListenableFuture implement thenable via a default interface method in J2CL \n\nThis is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=269313299\n  
370,     Add @LazyInit and @RetainedWith annotations to the lazily calculated  entries  field of ImmutableSetMultimap \n\nThis field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance \n\n
371,     Export new AtomicLongMapBasherTest to open-source repo \n\n   com/google/guava/pull/3605#discussion_r324303026\n\n
372,     Increase various tests  timeouts \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=268726044\n  
373,     Fix (and in one case  suppress) low-hanging rawtypes warnings \n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT)  In fact  I had to revert one similar change because it broke a GWT build  I m hoping that that means that the others are safe \n\n
374,     Roll forward previous rollback  but without making the type final \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=268660218\n  
375,     Rollback previous commit \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=267685692\n  
376,     Combine ImmediateSuccessfulFuture into ImmediateFuture \n\nImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead \n\n
377,     Explicitly document that whenAllComplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure) \n\n
378,     Modify comment about safeOctets length to be consistent with code \n\n
379,     Update Public Suffix data \n\nThe copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated  the copy is updated 3 weeks before the\nEstimated Week of Stable:\n\n   chromium org/developers/calendar#TOC-Estimated-Stable-Dates\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=266255422\n  
380,     Let ListenableFuture implement thenable via a default interface method in J2CL\n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=266217624\n  
381,     Let ListenableFuture implement thenable via a default interface method in J2CL\n\n
382,     Release the input futures as soon as we submit the combiner task  But really  redo how we release resources in general \n\nThis is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn\ t if the combiner returned a Future that was still pending)  That CL was good enough for practical purposes  but I wanted to better understand how we release resources \n\nThis CL standardizes on AggregateFuture releaseResources() as the way to null out all fields[*   merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask setValue(   )  As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object \n\n[*  OK  except seenExceptions  which gets its own handling  As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case  Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running \n\nIt turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:\n\n1  CombinedFuture releaseResources() can\ t null out `task` until the future is done or the task is done running  That\ s because it may need to interrupt the task  To handle this  I don\ t null out `task` in releaseResources() unless isDone()  To ensure that `task` still gets nulled out as soon as it\ s done running  I null it out directly in afterRanInterruptibly()  (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields    )\n\n2  Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed  To handle this  I store them in the listener and pass them through to processCompleted() (when necessary) \n\nThe changes to prod code are net negative in line count  at least ignoring the added comments  I\ ve also added a couple tests  only one of which passed before this CL  And I think the model for when fields are nulled out is overall clearer after this CL  So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code  (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(   ) )\n\n(Aside: This CL\ s releaseResources() is like our proposed afterCommit() API but different  First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case  Second  CombinedFuture may rely on the fact that it\ s called twice in some cases: It\ s called once when all inputs complete  but it doesn\ t null out `task`  and then it can be called again if the output is cancelled  at which point it *does* null out `task`  But that probably doesn\ t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it  Anyway  for more discussion of afterCommit()  see    com/google/guava/issues/2886)\n\n[ \n\n
383,     Prepare for release 28 1 \n\n
384,     Add missing @since  setting it straight to 28 1 \n\n
385,     Fix snapshots (and snapshot javadoc/jdiff) to be created again \n\nThey stopped at some point when we switched from oraclejdk8 to openjdk8 on Travis \n\n
386,     Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it \n\nWhen the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=265490471\n  
387,     Release resources of whenAllSucceed/whenAllComplete once input futures are complete \n\n
388,     Simplify while+break into do-while \n\nFixes #3577\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=265464337\n  
389,     Fix  bug  link that was actually a CL \n\n
390,     Restore Javadoc unintentionally lost in CL 264984423 \n\n   com/google/guava/pull/3575#issuecomment-524440221\n\n
391,     Adds constant for the Upgrade-Insecure-Requests header \n\n   github io/webappsec-upgrade-insecure-requests/#preference\n\n
392,     Automated g4 rollback of changelist 263577879 \n\n*** Original change description ***\n\nTemporarily update public_suffix to include web app\n\nWithout this  developers are not able to set up Google OAuth clients with URLs in Firebase Hosting web app domain \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=264649425\n  
393,     Fix #3570 by resetting expandTableThreshold and\nmaxRunBeforeFallback after resizing the hashTable \n\nFixes #3571\n\n[ \n\n
394,     Add toString() to ForwardingFluentFuture  to match ForwardingFuture\n\n
395,     Temporarily update public_suffix to include web app\n\nWithout this  developers are not able to set up Google OAuth clients with URLs in Firebase Hosting web app domain \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=263577879\n  
396,     Fix    com/google/guava/issues/3156 by implementing a proper `CollectSpliterators flatMapTo Int Long Double ` \n\nAlso  modify the existing `CollectSpliterators flatMap` to accept `null` from its `function` by treating it as an empty `Stream`  like `Stream flatMap` does  Add tests for this behavior \n\nTo test that the new methods also accept `null` through both their ` Int Long Double Consumer` APIs and their `Consumer` APIs  add `of Int Long Double ` methods to `SpliteratorTester`  They test the given `Spliterator of Int Long Double ` through both APIs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=263208125\n  
397,     Add note about  @code ByteSource wrap  s use of the given byte array \n\nFixes    com/google/guava/issues/2603\n\n
398,     Document that HashBiMap containsValue() tends to run in faster-than-linear time (overriding the default documentation from AbstractMap containsValue()) \n\nFixes #1973\n\n
399,     Add more clarification on what  access  means in expireAfterAccess() \nPrevious comment doesn\ t mention  containsKey() \n\nCopied from    com/google/guava/wiki/CachesExplained#asmap\n\n
400,     Fix an issue where the InputStream returned by BaseEncoding decodingStream(Reader) could fail to throw DecodingException while decoding an invalid string \n\nThis was caused by the default behavior of InputStream read(byte[   int  int)  which swallows any IOException thrown by any call to the single-byte read() method other than the first  To fix it  just override that method with an implementation that does not swallow any exceptions \n\nFixes    com/google/guava/issues/3542\n\n
401,     Change a use of Iterable forEach  which isn t available under Desugar \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=260986815\n  
402,     Add MediaType for  image/heif  and  image/jp2 \n\n
403,     gwt xml change from internal change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=260785140\n  
404,     Change the Splitter::limit arg to maxItems  for IDE usage \n\nThe old name of `limit` was uninformative when presented in e g  IDE autocompletions  `maxItems` will help distinguish it from the alternative meaning of max number of splits to make \n\n
405,     Remove inaccurate comment \n\n
406,     Link to guava-announce \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=259743523\n  
407,     Add RangeMap#merge  analogous to Map#merge \n\nRollback of 8000dc992d0124372972729b20df40a42b27a849\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=258637808\n  
408,     Rename a method to avoid J2ObjC collisions\n\nPrevent J2ObjC from treating `getAddSuppressed` as a getter by renaming it `generateAddSuppressed`  This silences a -Wobjc-property-implementation warning; soon  such warnings will become errors  See the referenced bug for full context \n\n
409,     Remove unneeded @SuppressWarnings from @Benchmark methods \n\n
410,     Clarify that SortedSetMultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order \n\n
411,     Automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc\n\n*** Reason for rollback ***\n\nBreaking a number of projects\n\n*** Original change description ***\n\nAdd RangeMap#merge  analogous to Map#merge \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=256288437\n  
412,     Add RangeMap#merge  analogous to Map#merge \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=256273536\n  
413,     Saturate LongAdder sum() results to Long MAX_VALUE during an overflow \n\nFixes    com/google/guava/issues/3503\n\n
414,     Fix some rawtypes in com google common cache \n\n
415,     Add a test for LongAdder overflow behavior \n\nSee    com/google/guava/issues/3503\n\n
416,     Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec \n\n
417,     Fix typo in ImmutableList java \n\n
418,     Fix the travis build\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=255595656\n  
419,     Use LongMath saturatedAdd/Subtract in CacheStats \n\nFixes    com/google/guava/issues/3503\n\n
420,     Halve memory consumption when creating a Bloom filter \n\nAtomicLongArray(long[ ) clones its input  which is a waste when we re passing\nin a new array \n\n
421,     Add more @Nullables to variadic parameter lists \n\n
422,     Tweaks to the list of Guava features \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=253664020\n  
423,     Use saturatedToNanos() in CacheBuilder to avoid overflows \n\n
424,     Document default values of builder setters \n\n
425,     Upgrade animal sniffer version to 1 18\n\nFixes #3497\n\n
426,     Split catch() blocks so that javac doesn t generate a reference to their common supertype  ReflectiveOperationException \n\nReflectiveOperationException isn t available on the old versions of Android that we support \n\nAs far as we know  there is no actual problem with these references because no methods are called on them  However  the new version of Animal Sniffer we re updating to will flag them anyway  and I think that avoiding them is the safe thing to do \n\nPrepares for #3497\n\n
427,     Fix typo in  stoppingCount  variable name\n\nFixes #3500\n\n
428,     Add missing description tags to guava-parent poms \n\nWe were previously apparently inheriting them from sonatype-oss-parent  until we removed that  Releases don\ t work without a description   Invalid POM: /com/google/guava/guava-parent/28 0-android/guava-parent-28 0-android pom: Project description missing \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=252733039\n  
429,     Prepare for release 28 0 \n\n
430,     Push back removal date for some deprecated APIs \n\n
431,     Fix typo in testFindClassesToTeset_ignoreUnderscores\n\nFixes #3499\n\n
432,     Remove `inOrder` assertion for iterable with single element \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=252398740\n  
433,     Use `Stream empty()` instead of `Stream of()` to get empty stream \n\n
434,     Fix typo for accomodate -> accommodate in LocalCache \n\nAs raised in #3492\n\n
435,     Delete deprecated callWithTimeout() \n\n
436,     Make the adjacentNodes() documentation a little bit more clear \n\n
437,     Simplify implementation of Graphs reachableNodes()\n\n
438,     Make the incidentEdges() documentation a little bit more clear \n\n
439,     Clarify behavior of `ImmutableList#copyOf` for null argument \n\nFixes #3485\n\n
440,     Upgrade maven-gpg-plugin to 1 6\n\nFixes github com/google/guava/pull/3490\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=251265047\n  
441,     Remove `@Beta` from `setFuture` \n\n
442,     Document the Java 9 alternatives for Optional APIs \n\n
443,     MapMakerInternalMap - Remove redundant if statement\n\nFixes #3489\n\n
444,     Add Duration-based overloads to MoreExecutors \n\n#goodtime\n\n
445,     Replace google github io/dagger with dagger dev\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=250908858\n  
446,     Add Duration-based default methods to the TimeLimiter interface \n\n#goodtime\n\n
447,     Migrate Correspondence subclasses to instead call Correspondence from \n\nThis makes the code shorter  and the subclassing approach is deprecated \n\nOpen-source note: Correspondence from was added to Truth 0 43  (So was Correspondence transforming  which I m using occasionally instead ) Correspondence formattingDiffsUsing was added in Truth 0 44 \n\nEND_PUBLIC\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=250766819\n  
448,     Replace maven prerequisites with the enforcer plugin\n\nAdds minimum required maven and java version into the parent poms which gets inherited by all children \n\nFixes #3483\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=250564119\n  
449,     Fix Javadoc \n\nFixes #3487\n\n
450,     Update Public Suffix data \n\nThe [  copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated  the [  copy is updated 3 weeks before the\nEstimated Week of Stable:\n\n   chromium org/developers/calendar#TOC-Estimated-Stable-Dates\n\nFor this update  [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=250513952\n  
451,     Fix littleEndian/bigEndian checks in HashTestUtils \n\nThis surfaced as two errorprone warnings while creating a copy this code: \ bigEndian\  is currently unused  Let me know if I inferred the intented semantics of the test correctly?\n\nThe methods that calls this tests  assertHashByteBufferInvariants(  )  seems currently unused in [  -- I assume that\ s why  assertEquals(ByteOrder BIG_ENDIAN  littleEndian order());  didn\ t trigger any errors  (Also  the fix shouldn\ t break anything then) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=250455177\n  
452,     RFC1123 InternetDomainName Test Cases\n\nFixes #3482\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=250345834\n  
453,     Fix Apache license name in guava pom\n\nCloses    com/google/guava/pull/3471\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=250289501\n  
454,     Update documentation to refer correct method name \n\n   oracle com/javase/8/docs/api/java/util/Map html#getOrDefault-java lang Object-V-\n\n
455,     Fix Javadoc links \n\nFixes    com/google/guava/pull/3481\n\n
456,     Add Cross-Origin-Resource-Policy header name constants \n\nDetails    spec whatwg org/#cross-origin-resource-policy-header\n\n
457,     Upgrade maven-javadoc-plugin to 3 1 0 \n\nFixes    com/google/guava/pull/3478 \n\n
458,     Add MediaType for  application/geo+json  \n\nvia    com/google/guava/pull/3243\n\n
459,     Fix Streams zip documentation typo \n\n
460,     Fix  Apache License  Version 2 0  spelling\n\nThere are many Java libraries licensed under  Apache License  Version 2 0  that do not use its official spelling \nThis causes issues like    apache org/jira/browse/MPIR-382: with every library defining its own spelling  it\ s difficult in large projects to have a clear view of all licenses in use \nThis PR changes the license spelling to the official one  as advised by Maven developers \n\nCloses    com/google/guava/pull/3471\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=249139087\n  
461,     Define project build source encoding as UTF-8\n\nCloses    com/google/guava/pull/3465\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=249112040\n  
462,     Add Duration-based overload to Monitor \n\n#goodtime\n\n
463,     Add Duration-based overloads to RateLimiter \n\n#goodtime\n\n
464,     Remove CheckedFuture utilities from util concurrent Futures \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=248947498\n  
465,     Add Duration-based overloads to ServiceManager \n\n#goodtime\n\n
466,     Add Duration-based overloads to Service \n\n#goodtime\n\n
467,     Add Duration-based overloads to AbstractScheduledService \n\n#goodtime\n\n
468,     Add Duration-based overloads to Futures \n\n#goodtime\n\n
469,     Add Duration-based overloads to FluentFuture \n\n#goodtime\n\n
470,     Add Duration-based overloads to MoreExecutors \n\n#goodtime\n\n
471,     Always complete TimeoutFuture  even if toString() throws\n\n
472,     Add Duration-based overloads to Uninterruptibles \n\n#goodtime\n\n
473,     Tighten the GoodTime suppression locations in RateLimiter \n\n#goodtime\n\n
474,     Copy Durations saturatedToNanos(Duration) to package-private c g c u c Internal so it can be used by the concurrent package (and in Guava) \n\n#goodtime\n\n
475,     Add a link back to the goodtime rate bug \n\n
476,     Remove app link from the Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=247658982\n  
477,     Add a new header field  CDN-Loop  to httputils \n\nMore details:    ietf org/html/rfc8586\n\n
478,     Add Queues drain(BlockingQueue  Collection  int  Duration) and drainUninterruptibly(BlockingQueue  Collection  int  Duration) \n\n
479,     Add FakeTicker advance(Duration) and setAutoIncrementStep(Duration) \n\n#goodtime\n\n
480,     Update versions of some Guava dependencies \n\nFixes    com/google/guava/issues/3405\n\n
481,     Upgrade compiler plugin \n\nFixes    com/google/guava/pull/3454 \n\n
482,     Add java util UUID to ArbitraryInstances\n\nFixes #3448\n\n
483,     Add app link to the Public Suffix List \n\nThis is a temporary solution to stop app link affiliated websites being grouped together in the Password Manager UI  We will reach out to the owners of app link and work with them to update the public version of the PSL \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=246976477\n  
484,     Upgrade maven dependency plugin \n\nFixes    com/google/guava/pull/3456\n\n
485,     Migrate from assertThat(foo) named( foo ) to assertWithMessage( foo ) that(foo) \n\n(The exact change is slightly different in some cases  like when using custom subjects or check()  but it\ s always a migration from named(   ) to [assert WithMessage(   ) )\n\nnamed(   ) is being removed \n\nThis CL may slightly modify the failure messages produced  but all the old information will still be present \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=246367399\n  
486,     Remove CheckedFuture from Guava \n\n
487,     A few more doc tweaks  caught by @jbduncan in f2591b5c2a\n\n
488,     Migrate from is(Not)SameAs to is(Not)SameInstanceAs \n\nThey behave identically  and the old names are being removed \n\nOpen-source note: The new methods are available in Truth as of version 0 44 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=246135538\n  
489,     Migrate from assertThat(foo) named( foo ) to assertWithMessage( foo ) that(foo) \n\n(The exact change is slightly different in some cases  like when using custom subjects or check()  but it\ s always a migration from named(   ) to [assert WithMessage(   ) )\n\nnamed(   ) is being removed \n\nThis CL may slightly modify the failure messages produced  but all the old information will still be present \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=245945957\n  
490,     Fixed some links \n\nThe comparisons to the Android Hash* classes haven t been accurate since at least CL 81367572  so I ve removed them entirely \n\nFixes #3398\n\n
491,     Migrate from isNotSameAs to isNotSameInstanceAs \n\nThe two behave identically  and isNotSameAs is being removed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=245089419\n  
492,     Update to Truth 0 44 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=244957378\n  
493,     Remove outdated references to the  next release of Guava  \n\n
494,     Update Public Suffix data \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=244682930\n  
495,     Match the casing of the WebSocket HTTP headers to the RFC directly \n\n
496,     Fix misspelled Sec-WebSocket-Version header \n\nThe correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions \n\n
497,     Enable GoodTime-API\n\n
498,     Update NetworkBuilder documentation with option of building an immutable graph \n\n
499,     Update ValueGraphBuilder documentation with option of building an immutable graph \n\n
500,     Mitigate    com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation \n\n
501,     Override a method instead of special-casing it \n\n
502,     Remove obsolete parent per    com/sonatype/oss-parents\nand Fixes    com/google/guava/issues/2756\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=243291402\n  
503,     Upgrade error_prone\n\nFixes #3439\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=242946434\n  
504,     Simplify graph PackageSanityTests by applying the new immutable graph builder \n\n
505,     Update GraphBuilder documentation with option of building an immutable graph\n\n
506,     Add websocket headers to HTTP header listings \n\nThis adds five headers  as defined in RFC 6455: Sec-WebSocket-Accept \nSec-WebSocket-Extensions  Sec-WebSocket-Key  Sec-WebSocket-Protocol  and\nSec-WebSocket-Versions \n\nThis also changes the C++ per-header unit test so that it can recognize the\nalternate capitalization of WebSocket  instead of adding five special cases  The\nGo and Java versions use the  Websocket  capitalization instead \n\n
507,     Bumped the FPP to prevent OOMs on JDK 11 \n\n
508,     Fix @param tag as per    com/google/guava/pull/3431#pullrequestreview-221507095\n\ncc @jbduncan\n\n
509,     Remove unused configuration of load factor\n\nThis allows removal of loadFactor/threshold which saves 8 bytes per object \n\nWhile here:\n- Reduce diff between Map/Set classes\n- Make base forEach() work for Linked classes\n\nShallow object size (bytes):\n- CompactHashMap: 64 -> 56\n- CompactLinkedHashMap: 80 -> 72\n- CompactHashSet: 40 -> 32\n- CompactLinkedHashSet: 56 -> 48\n\n
510,     Add NetworkBuilder immutable() \n\n
511,     Remove unnecessary Type parameter\n\n
512,     Add ValueGraphBuilder immutable() \n\n
513,     Use byte[ /short[ /int[  for hashtable depending on size\n\nThe hashtable is stored as an Object and cast to the correct type using\ninstanceof checks \n\nMemory:\nbyte[  sizes (2-89): 12-41% better (average: 32% better)\nshort[  sizes (90-22937): 20-29% better (average: 24% better)\nint[  sizes (22938+): unchanged\n\nRuntime on a Pixel 2:\ncreateAndPopulate: 9% better to 6% worse (average: 4 3% better)\nget: 1% better to 8% worse (average: 3 5% worse)\niterateWithKeySetAndGet: 9% better to 13% worse (average: 3 2% worse)\niterateWithEntrySet: unchanged (doesn t use hashtable)\n\nEffects on ImmutableMapProGuard:\n59105 bytes => 60369 bytes (+2 1%)\n21 classes => 21 classes (0%)\n200 methods => 201 methods (+0 5%)\n\nEffects on ImmutableBiMapProGuard:\n68893 bytes => 70235 bytes (+1 9%)\n25 classes => 25 classes (0%)\n232 methods => 233 methods (+0 4%)\n\n
514,     Add FluentFuture from(FluentFuture) factory method \n\nThis follows the steps of FluentIterable from(FluentIterable) and other\n“migration aid” methods that are deprecated from inception and are just here to\npoint out code that is no longer needed \n\n
515,     Implement GraphBuilder immutable() \n\n
516,     Adds constants for prefetch headers \n\nOf note  X-Purpose is NOT just a google specific header as previously defined \n\n   mozilla org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin 2C_can_I_distinguish_prefetch_requests_from_normal_requests 3F\n\n   google com/web/updates/2018/07/nostate-prefetch\n\n
517,     Add (unimplemented) API for GrapbBuilder immutable() and ImmutableGraph Builder \n\n
518,     Lazily allocate CompactHash backing arrays on first write\n\nEmpty maps/sets are extremely common  Lazily allocating the backing arrays can\nsave hundreds of KB of heap and reduce load on the garbage collector \n\nWhile here:\n- Use serialized size to pre-size the arrays\n- Respect ordering during serialization (without using an iterator)\n- Consistently mark unused links as UNSET\n\nMemory savings before first write (bytes):\n- CompactHashMap create(): 184 -> 64\n- CompactLinkedHashMap create(): 240 -> 80\n- CompactHashSet create(): 136 -> 40\n- CompactLinkedHashSet create(): 200 -> 56\n- CompactHashMap createWithExpectedSize(0): 136 -> 64\n- CompactLinkedHashMap createWithExpectedSize(0): 168 -> 80\n- CompactHashSet createWithExpectedSize(0): 96 -> 40\n- CompactLinkedHashSet createWithExpectedSize(0): 144 -> 56\n\n
519,     Use J2ObjC s @RetainedWith annotation instead of @Weak on\nImmutableMap entrySet() to prevent crashes on iOS \n\nTESTED=Created a map inside an autorelease pool and saved a reference to the\nentry set  Checked that the entry set functions correctly outside the\nautorelease pool  Checked that both the entry set and the are deallocated by the\nautorelease pool when not holding a strong reference to the entry set  Did this\ntest with the following constructions to cover all entry set implementations:\n- ImmutableMap of(<2 entries>)\n- ImmutableMap copyOf(<EnumMap with 2 entries>)\n- ImmutableSortedMap of(<2 entries>)\n- ImmutableBiMap of(<2 entries>) inverse()\n\n
520,     Prepare for release 27 1 \n\n
521,     Add missing @since NEXTs \n\n
522,     Internal GWT change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=237058448\n  
523,     Remove misleading javadoc line (we haven t published microbenchmarks in N\nyears) \n\nFixes #3396\n\n
524,     Optimize ImmutableSet s hash flooding detection  using an algorithm which allows more false positives (though we calibrate the constant factors to compensate) but runs O(log n) times faster on average \n\n
525,     Suppress error for bad implementations of Comparable\n\n
526,     Update Public Suffix data \n\nThe [  copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated  the [  copy is updated 3 weeks before the\nEstimated Week of Stable:\n\n   chromium org/developers/calendar#TOC-Estimated-Stable-Dates\n\nFor this update  [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=236146421\n  
527,     Document that the memory increases appear to be necessary for Travis only (and that they do appear to solve the problem there) \n\n
528,     Fix a URL \n\n
529,     Remove GWT emulations that are no longer needed as of GWT 2 8 2 \n\n
530,     Fix Javadoc breakage under JDK11 canary \n\n   openjdk java net/browse/JDK-8212233\n   openjdk java net/browse/JDK-8193030\n\n
531,     Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap values\nto prevent crashes on iOS \n\nTESTED=Created a map inside an autorelease pool and saved a reference to the\nvalues collection  Checked that the values collection functions correctly\noutside the autorelease pool  Checked that both the values collection and the\nmap are deallocated by the autorelease pool when not holding a strong reference\nto the values collection  Did this test with ImmutableMap of(<2 entries>) and\nImmutableMap copyOf(<EnumMap with 2 entries>) \n\n
532,     Internal GWT change\n\n
533,     Create constants for the SourceMap header\n\nNone of the tests like this header name  so each required some workarounds \n\n
534,     Modernize book reference \n\n
535,     Document the JDK 9+ alternative to `Maps#immutableEntry`\n\nFixes #3385\n\n
536,     Annotate checkNotNull s input and output as @NonNull \n\nWe don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default  However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes \n\n
537,     Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap keySet\nto prevent crashes on iOS \n\nTESTED=Created a map inside a autorelease pool and saved a reference to the\nkeyset  Checked that the keyset functions correctly outside the autorelease\npool  Checked that both the keyset and the map are deallocated by the\nautorelease pool when not holding a reference to the keyset  Did this test with\nboth ImmutableMap of(<2 entries>) and ImmutableBiMap of(<2 entries>) \n\n
538,     Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66\n\n*** Original change description ***\n\nInternal GWT change\n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=233628983\n  
539,     Internal GWT change\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=233617662\n  
540,     Delete WellBehavedMap \n\nThe bug it worked around was fixed in Java 7:\n   java com/bugdatabase/view_bug do?bug_id=6312706\n\nAnd I don t believe it was ever present under Android:\n   googlesource com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap java#146\n\nI haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either \n\nDeleting this class will simplify some work I m doing around our EnumMap usage for j2cl \n\n
541,     Make a constructor private \n\n(I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file  Nope )\n\n
542,     Remove @CanIgnoreReturnValue from Ordering sortedCopy() and immutableSortedCopy() \n\n
543,     Add some known UTF-8 hash values to Murmur3_32 tests  UTF-8 is more comparable between platforms than relying on Java s internal encoding \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=232756904\n  
544,     Remove @Beta from APIs:\n\ncollect\n- most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity))\n- Maps: asConverter  immutableEnumMap\n- MultimapBuilder\n- Streams: stream(Iterable)  concat\n\nio\n- ByteStreams: copy  toByteArray\n- CharStreams: copy  toString\n- Files: as(Char|Byte)(Source|Sink)\n\nutil concurrent\n- Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture\n- ListeningScheduledExecutorService\n- Uninterruptibles\n\nother\n- HtmlEscapers\n- Splitter splitToList\n- Ticker\n\nFixes    com/google/guava/pull/3287\nFixes    com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway)\nAddresses the main concerns of    com/google/guava/issues/3285 but doesn t cover the broader request\nFixes    com/google/guava/issues/3340\nPartially addresses    com/google/guava/issues/3239\n\n
545,     Name the method parameter  unused  for ImmutableSortedSet readObject(ObjectInputStream) (so the static analysis doesn t complain)\n\n
546,     Reformat with google-java-format\n\n
547,     Document the retention of listeners added to Guava implementations of ListenableFuture \n\n
548,     Add missing @Override annotations\n\n
549,     Reformat with google-java-format\n\n
550,     Remove unused imports and warnings \n\nFixes #3356\n\n
551,     Add Report-To header \n\n   w3 org/TR/reporting/\n\n
552,     Remove @CanIgnoreReturnValue from Futures catchingAsync()\n\n
553,     Removes java/util GWT emul dependency\n\nMost of the emulation provided by this target moved to JRE proper and most of dependencies are no longer needed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=230773476\n  
554,     Remove @CanIgnoreReturnValue from c g c collect Lists newArrayList() \n\n
555,     Automated rollback of commit 8fd7f60484218df9a208df0edf41bdee22d86900\n\n*** Reason for rollback ***\n\n*** Original change description ***\n\nRemoves java/util GWT emul dependency\n\nMost of the emulation provided by this target moved to JRE proper and most of dependencies are no longer needed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=230673390\n  
556,     Removes java/util GWT emul dependency\n\nMost of the emulation provided by this target moved to JRE proper and most of dependencies are no longer needed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=230668984\n  
557,     Remove @CanIgnoreReturnValue from c g c base Ticker\n\n
558,     Remove @CanIgnoreReturnValue from c g c collect Iterators getOnlyElement()\n\n
559,     Remove @CanIgnoreReturnValue from c g c collect ClassToInstanceMap getInstance()\n\n
560,     Swap the parameter order of the Collections disjoint call in Sets intersection\n\nCollections disjoint is implemented in such a way that it has better\nperformance if its 2nd parameter is the smaller of the two when both params are\ninstances of Set  The Sets intersection javadoc says it has better performance\nwhen set1 is the smaller set  but that is currently not the case for the\nisEmpty operation specifically \n\nOur team ran into a pathological case of this where we check for an empty\nintersection of two sets  one being ~5 orders of magnitude larger than the\nother \n\n
561,     Remove @CanIgnoreReturnValue from c g c collect Ordering min/max()\n\n
562,     Adds constants for Sec-Fetch-(Dest|Mode|Site|User) headers \n\n   com/mikewest/sec-metadata\n\n
563,     refactor literal to named constant\n\nFixes #3364\n\n
564,     Enable GoodTime-API for c g common cache\n\n
565,     Correct the spelling of the Range class \n\nIt s Range not Ranges \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=227899203\n  
566,     Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable \n\nFixes    com/google/guava/issues/3343\n\n
567,     Hide Files methods that are @Deprecated internally\n\n
568,     Use maven-javadoc-plugin 3 0 1 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=225846924\n  
569,     Suppress soon to be GoodTime errors ( time  is now considered a keyword) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=225199757\n  
570,     Add the application/jose and application/jose+json media types \n\n   iana org/assignments/media-types/application/jose\n   iana org/assignments/media-types/application/jose+json\n   ietf org/html/rfc7515#section-9 2\n\n
571,     Use the primitive  number  type instead of the object counterpart  Number  to avoid a jscompiler error \n\nAn upcoming change to J2CL that simplifies how casting logic is transpiled will make the code  (Number) (Object) 3  here transpile to just  /** @type  Number  */ (3)  and jscompiler will see the  invalid cast  since  3  is not  Number  in the closure type system \n\n
572,     Make example compile (i e  supply a Path/File) and use depth first instead of breadth first \n\nReason: Depth first is more common for file traversal \n\n
573,     Remove  Media type for  or similar phrasing for visible constants in the MediaType class \n\n
574,     Add missing documentation and @since tags to MediaType entries that were added\nafter its initial relase of 12 0\n\n
575,     Add the @Immutable a few more classes  Both annotations enforce at compile-time that the annotated class meets the annotation’s requirements \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=223369138\n  
576,     Internal change\n\n
577,     Update Public Suffix data \n\nThe copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated  the copy is updated 3 weeks before the\nEstimated Week of Stable:\n\n   chromium org/developers/calendar#TOC-Estimated-Stable-Dates\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=222877055\n  
578,     Replace usages of Truth s deprecated hasMessage() with hasMessageThat() in Guava tests \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=222834185\n  
579,     Improve docs on Splitter fixedLength() when used in conjunction with Splitter limit() \n\nFixes    com/google/guava/issues/3321\n\n
580,     Add additional test of existing behavior of Splitter limit(n)\n\n
581,     Update failureaccess dep to 1 0 1  which includes OSGi metadata \n\n
582,     Update Guava README for 27 0 1 \n\n
583,     Create a Guava BOM \n\n
584,     Add the Origin-Trial HTTP response header \n\n
585,     Address why users should prefer our immutable collections to things like Collections emptyList() \n\n
586,     common graph PackageSanityTests: specify a default object for EndpointPair inputs \nThis should resolve a few internal flaky test issues\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=220529228\n  
587,     Standardise message format for  duplicate key  IllegalArgumentException thrown from ImmutableTable Builder build() \n\nInternally  ImmutableTable Builder build() delegates to two classes   Dense Sparse ImmutableTable and these currently have inconsistent error messages when a duplicate key is detected \n\nPrior to this CL  SparseImmutableTable had a message formatted like:\n   Duplicate value for row=%rowKey%  column=%columnKey%: %newValue%  %oldValue% \nWhereas DenseImmutableTable had:\n   duplicate key: (%rowKey%  %columnKey%) \n\nAfter this CL both classes will format the message like:\n   Duplicate key: (row=%rowKey%  column=%columnKey%)  values: [%newValue%  %oldValue%   \n\n
588,     Correct documentation for Splitter#withKeyValueSeparator(Splitter)\n\n
589,     Use maven-compiler-plugin version 3 8 0 \n\nSee    com/google/guava/pull/3294 \n\n
590,     Add MediaType MICROSOFT_OUTLOOK and add missing javadocs to a few other MediaTypes \n\nSee    com/google/guava/pull/3309\n\n
591,     Change failureaccess packaging to bundle so the OSGi metadata actually gets included \n\n
592,     Document that Chars lexicographicalOrdering is different than Alphabetical\nordering  which is more appropriate for user text \n\n
593,     Fix the issue with classes that should only be included in the failureaccess artifact being included in the main Guava jar \n\nIt appears (thanks to @michaelhixson on    com/google/guava/issues/3302) that the issue is with the maven-bundle-plugin (which does OSGi stuff)  Presumably because Guava was declaring that it exports com google common * (and doesn t exclude com google common util concurrent internal)  it was pulling those class files in from the dependency  It was also pointed out by @talios in that issue that failureaccess doesn t include OSGi metadata to export that package \n\nThis change should fix both of those issues  but we re going to need to release a failureaccess 1 0 1 and then guava 27 0 1 \n\n
594,     Ensure InterruptibleTask interruptTask works even when Thread interrupt() throws or takes a long time\n\nJava nio APIs enable arbitrary code to register callbacks that get run on calls to interrupt() as a result interrupt() can throw arbitrary exceptions  or even deadlock   This adds some defense against this in InterruptibleTask \n\n* we move the call to set(DONE) to a finally block to ensure it always runs\n* we have the completing task park itself if it spins for a long time waiting for set(DONE) to be called   This adds some complexity to the interruptTask protocol\n\n
595,     Document behavioral caveat on Splitter#withKeyValueSeparator(Splitter): the options in Splitter don t change anything about the behavior of the keyValueSplitter \n\n
596,     common graph: adding new EndpointPair-accepting overloads \n\n
597,     Suppress warnings in classes that implement equals() without also implementing\nhashCode() \n\nThe contract for Object hashCode states that if two objects are equal  then\ncalling the hashCode() method on each of the two objects must produce the same\nresult  Implementing equals() but not hashCode() causes broken behaviour when\ntrying to store the object in a collection \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=218187142\n  
598,     *Builder java: add @param documentation for the node/value/edge types that clarifies their behavior \n\nThis is in response to (and should resolve)    com/google/guava/issues/3299 \n\n
599,     Enable goodtime-api for Guava (with some exceptions) \n\n
600,     Mention Guava s new dependency in documentation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=217758655\n  
601,     Remove oraclejdk10 from Travis build \n\nIt s currently failing on Travis because Oracle has seemingly removed the ability to download JDK 10  Since we re already running on JDK 11  having a JDK 10 build may no longer be needed anyway \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=217745829\n  
602,     Enable GoodTime API checker for guava-testlib \n\n
603,     Prepare for release 27 0 \n\n
604,     Push back deprecated API removals again \n\n
605,     Enable GoodTime API checker for Guava\n\n
606,     Fix ThrowablesTest for JDK 11 \n\nInstead of hardcoding  9  and  10  as the versions of Java that lazyStackTrace() doesn\ t work for  only check that it works when the version is < 9 \n\n
607,     Fix ForwardingMapTest in JDK11 \n\nWe need to be able to create a valid instance of IntFunction<T[ > to pass to Collection toArray(IntFunction<T[ >)  including having its method return an array of the correct type  Switch from using raw Class<?> to TypeToken to handle that \n\n
608,     Update Public Suffix data \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=216573087\n  
609,     Clarify a comment in Futures NonCancellationPropagatingFuture \n\n
610,     Add support for Early-Data HTTP header \n\n
611,     Add JDK11 to the Travis config \n\nCloses    com/google/guava/pull/3274\n\n
612,     Cast null to make sure to select the right Collection toArray()  In JDK 11 there s a new default method that takes a different parameter \n\n
613,     Check input collection size in PowerSet before actually copying it s content \n\nCloses    com/google/guava/pull/3275\n\n
614,     Properly handle input cancellations in Futures catching[Async \n\nCurrently  if input future is cancelled and the fallback handler does not handle CancellationException  the output future will end up as failed with CancellationException  Instead  the more logical result should be that output future ends up as cancelled as well \n\n
615,     Remove unnecessary mocking of a data structure \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=213551639\n  
616,     Update truth  animal sniffer  error prone annotations  and JUnit\n\nAll of these dependencies are out of date from those used in gRPC  and preventing me from getting a current build of Guava into gRPC \n\nFixes #3268\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=213550989\n  
617,     Make FutureCombiner recommend Futures getDone() \n\nWhile there  switch it to a lambda \n\n
618,     Remove trustedGetException()\n\ntryInternalFastPathGetFailure gives access to similar fast-path\n\n
619,     Use newGuard() to make example in Monitor class javadoc more\nconcise \n\nThis commit also cleans up the method javadoc for newGuard() itself and\nreplaces a lingering  throw Throwables propagate(throwable)  with simply\n`throw throwable` (not related to newGuard()  but good to clean up) \n\nFixes #3236\n\n
620,     Introduce listenablefuture and failureaccess artifacts  plus InternalFutureFailureAccess \n\n(taken over from CL 210155310 to add Maven setup)\n\nIt provides a direct access to the cause of any failures \nso we can avoid unnecessary allocation of an exception \n\nDesign discussion:    google com/document/d/1_RVTtztq5pqrhs0srvJWHMI7PT1tA71--iaauV2l5UA/edit\n\n
621,     Fix a bug in AbstractFuture addListener where we failed to follow the contract precisely \n\nListenableFuture addListener says that listeners should execute  immediately  when the future is done   However  because the old version of addListener only checked the listeners field  it is possible to observe that the future is done and that your listener would not execute immediately   This cl fixes that by adding an explicit check for isDone \n\n
622,     Disambiguate Collection toArray() call so that the test passes in Java 11 where a new toArray method was added \n\n   java net/java/early_access/jdk11/docs/api/java base/java/util/Collection html#toArray(java util function IntFunction)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=212037283\n  
623,     Short circuit in withTimeout if the input future is already done \n\n
624,     Include original input value and RoundingMode in the failure message for MathPreconditions checkInRange() \n\n
625,     Use TrustedFuture where possible\n\n
626,     Bail early without a CancellationException in AbstractTransformFuture \n\n
627,     Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled \n\n
628,     Update Public Suffix data \n\nThe copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=210378042\n  
629,     Automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4\n\n*** Reason for rollback ***\n\nTest depends on incorrect Future implementation\n\n*** Original change description ***\n\nAdd more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=210143037\n  
630,     Suppress violation of MissingEqualsCall for EqualsTesterTest  given it quite legitimately fails to call #testEquals \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=210138846\n  
631,     Suppress warnings on thread suspending test \n\n
632,     Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled \n\n
633,     Fix parameter name in Javadoc\n\n`name` doesn t exist in the current context \n\n#CodeHealth\n\n
634,     [guava concurrent  Inlined getDone() and getUninterruptibly() to break the source dependency from AbstractFuture to other classes in /util/concurrent \n\n
635,     Add Javadoc for MediaType KML+KMZ+MBOX\n\nCloses    com/google/guava/pull/3244\n\n
636,     Don t allocate a CancellationException if cancellation causes are not enabled \n\n
637,     Switch FluentFuture and AbstractFuture in inheritance chain\n\n
638,     Make delayed get() test more resilient to thread scheduling delays \n\n
639,     Remove unnecessary local \n\nIt is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8\n\n
640,     Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures \n\n
641,     Add missing @since tag \n\n   github io/guava/releases/21 0/api/diffs/changes/com google common util concurrent Monitor html#com google common util concurrent Monitor newGuard_added(java util function BooleanSupplier)\n\nNoticed because of    com/google/guava/issues/2853#issuecomment-412360793\n\n
642,     Use gradle formatting\n\nFixes    com/google/guava/pull/3216\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=208489219\n  
643,     Add a gap method to Range which computes the range that lies between two ranges  This operation is particularly useful as a replacement for Joda Time s Interval gap when migrating to Java Time which has no Interval class \n\nJoda Time:\nInterval interval =    ;\nInterval gap = interval gap(interval);\n\nJava Time (after this CL):\nRange<Instant> interval =    ;\nRange<Instant> gap = interval gap(otherInterval);\n\n
644,     Make ordering of Primitives#all Wrapper Primitive Types deterministic\n\n
645,     Enhance toString() for futures returned from ExecutionSequencer \n\nAlso make tests for ExecutionSequencer actually run  by porting them to junit3 :-(\n\n
646,     Add callable s toString to null failure message \n\nI find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call \n\n
647,     Fix javadoc typo in LinkedListMultimap\n\nFixes    com/google/guava/issues/3228\n\n
648,     Allow Service to transition from STARTING to TERMINATED  Add a new  doCancelStart  method that is called when a service is stopped while still starting  This gives implementations a chance to abort code which may be preventing the service from starting \n\n
649,     Adds WASM as a supported Media type to Google Java utilities \nAdds WASM support to the StaticFileAction in devserver (so that it is served\nwith the correct Content Type) \n\n
650,     Optimize ImmutableCollection toArray(T[ ) as per    net/blog/2016/arrays-wisdom-ancients/  the key goal being to avoid the necessity of zeroing a newly created array where possible \n\nAddresses    com/google/guava/issues/3209 \n\n
651,     Automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1\n\n*** Reason for rollback ***\n\nThe test that caused the inital rollback is buggy\n\n*** Original change description ***\n\nIntroduce Trusted interface \n\nSo we can create FluentFuture Trusted without introduction of a dependency on FluentFuture in AbstractFuture \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=207588457\n  
652,     Automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c\n\n*** Original change description ***\n\nIntroduce Trusted interface \n\nSo we can create FluentFuture Trusted without introduction of a dependency on FluentFuture in AbstractFuture \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=207326809\n  
653,     Introduce Trusted interface \n\nSo we can create FluentFuture Trusted without introduction of a dependency on FluentFuture in AbstractFuture \n\n
654,     Remove reference to Strings isNullOrEmpty from AbstractFuture \n\n
655,     Insulate AbstractFuture from Futures java/MoreExecutors java dependency\n\nMade DirectExecutor package-private so that we can refer to it directly in AbstractFuture \n\n
656,     Add a note about the relative ordering of afterDone and listener execution\n\n
657,     Prepare for release 26 0 \n\n
658,     Isolate AbstractFuture from dependency on Ascii \n\n
659,     Push back removals again \n\n
660,     Roll-forward addition of ExecutionSequencer \n\n
661,     Change to some TODOs caused by some internal change \n\n
662,     Automated rollback of c7aa4671cd70853515171333c823e3cdece92918 \n\n*** Original change description ***\n\nMove ExecutionSequencer into guava as @Beta \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=206620316\n  
663,     Move ExecutionSequencer into guava as @Beta \n\n
664,     Remove deprecated CharMatcher constants \n\n
665,     Reduce ProGuard retained code from usages of Multimaps synchronizedXYZMultimap \n\nEffects on MultimapSynchronizedProGuard:\nJAR bytes: 148295 bytes => 50236 bytes (-66%)\nClasses: 67 classes => 28 classes (-58%)\nMethods: 458 methods => 155 methods (-66%)\n\n
666,     Remove Futures methods that implicitly use directExecutor() \n\n
667,     Fix initialCapacity calculation for a maximum size over Integer MAX_VALUE \n\nNoticed during discussion of    com/google/guava/issues/3202\n\n
668,     Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included\n\nNow they depend only on host and port \n\nUseful for storing IPv6 addresses in Set and Map\n\n
669,     Internally  use PatternCompiler from Doubles tryParse \n\n(Redo of CL 202132002  which was partially rolled back in CL 202139691 )\n\nThis time including tests to cover the RE2J approach \nTo avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \\p XDigit  with [0-9a-fA-F  (which is equivalent; see the Pattern Javadoc) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=204301262\n  
670,     Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [  doesn t complain\n\n
671,     Update Public Suffix data \n\nThis copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=203488570\n  
672,     Adds constants for Sec-Metadata header \n\n   com/mikewest/sec-metadata\n\n
673,     Change Files map(File  MapMode) to get the size of the file from the channel just before mapping rather than before opening the file \n\nSee    com/google/guava/issues/3190 \n\n
674,     Avoid using inotify  which is causing problem under JDK10 \n\n
675,     Remove @WeakOuter from ImmutableMultiset ElementSet  @WeakOuter is useful for inner classes but not for static nested classes \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=202500806\n  
676,     Remove incorrect Javadoc in Multimaps \n\nFixes    com/google/guava/pull/3141 and    com/google/guava/issues/3140\n\n
677,     Implement Lists cartesianProduct indexOf efficiently \n\nFixes    com/google/guava/pull/2544/\n\n
678,     add  oraclejdk10  to Travis build matrix\n\nFixes #3186\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=202166033\n  
679,     Make Guava tests pass under Java 10 \n\nRelevant to    com/google/guava/pull/3186\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=202163744\n  
680,     Partial automated g4 rollback of changelist 202132002 \n\n*** Reason for rollback ***\n\nThe regex in Doubles uses ++  which isn\ t supported by RE2 \n\n*** Original change description ***\n\nInternally  use PatternCompiler from Doubles tryParse \n\nAlso  remove equals() and hashCode() from CommonPattern implementations  The implementations delegate to the underlying Pattern classes  which use identity equality  If we want  real  equality  we should check the equality of pattern() and flags()  Why bother now? Because our automated equals() tests expect equals()  if present  to behave in a sane way once they discover the CommonPattern compile() factory method (which they now do  since i   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=202139691\n  
681,     Internally  use PatternCompiler from Doubles tryParse \n\nAlso  remove equals() and hashCode() from CommonPattern implementations  The implementations delegate to the underlying Pattern classes  which use identity equality  If we want  real  equality  we should check the equality of pattern() and flags()  Why bother now? Because our automated equals() tests expect equals()  if present  to behave in a sane way once they discover the CommonPattern compile() factory method (which they now do  since it\ s now located on CommonPattern itself) \n\n
682,     Add MediaType for  application/hal+json  \n\nFixes    com/google/guava/issues/3184\n\n
683,     Omit some unnecessary parens\n\n
684,     Remove GWT emulation of UndeclaredThrowableException \n\nWe no longer need it now that Futures transform() no longer has a special case for it \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=201217932\n  
685,     Bump Checker Framework annotations version to 2 5 2 \n\nFixes    com/google/truth/issues/467 for Truth and perhaps similar problems for other projects that use Guava \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=201097814\n  
686,     Removed special-casing UndeclaredThrowableException in Futures transform()\n\n
687,     Update Guava to use Truth 0 41 \n\n
688,     Test setValue(null) (both success and failure cases) \n\nFixes #2467  #3176\n\n
689,     Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms \n\n
690,     Fix mangled Javadocs \n\n
691,     Add a direct dependency from guava-gwt to checker-qual \n\nThe GWT sources (specifically  GwtSerializationDependencies) use @Nullable directly  so we shouldn t rely on relying on it indirectly through guava-jre \n\nHowever  what actually prompted this is a strange behavior in Compile-Testing  which Truth uses  This CL should help  though it might not be a fully solution \n   com/google/compile-testing/issues/149\n\n
692,     Fix b/80241237 to correctly *not* change segment weight  nor report an eviction  when a compute() call does not change the present value \n\n
693,     Create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and ICU4J \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=198553510\n  
694,     Suppress exceptions raised from argument s toString methods during lenient formatting - take 2 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=198468540\n  
695,     In open-source Guava  completely skip trying to discover pluggable PatternCompiler implementations \n\nIt s never been possible to create such implementations externally  anyway  and users are now seeing problems running the useless discovery code under the module system \n\nFixes    com/google/guava/issues/3147\n\n
696,     fix a grammar mistake\n\nFixes #3161\n\n
697,     Automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b\n\n*** Reason for rollback ***\n\nAppears to tickle a J2CL bug \n\n*** Original change description ***\n\nFix    com/google/guava/issues/3156 by implementing a proper CollectSpliterators flatMapTo Int Long Double  \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=198112871\n  
698,     Fix    com/google/guava/issues/3156 by implementing a proper CollectSpliterators flatMapTo Int Long Double  \n\n
699,     Some changes to the Guava README \n\nMove most information about the latest release to the release badge at the top  which now links to the GitHub release page for the latest release and automatically displays the latest release version number \n\nNote: I probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from  There are ways we could deal with that  but I didn t want to deal with that yet \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=198086774\n  
700,     Add duration info to checkArugment() call in Suppliers memoizeWithExpiration()\n\n
701,     Use api instead of compile for Android\n\nFixes #3154\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=197947742\n  
702,     Prepare for release 25 1 \n\n
703,     Automated g4 rollback of changelist 197588491 \n\n*** Reason for rollback ***\n\nBreaking a JS build\n\n*** Original change description ***\n\nSuppress exceptions raised from argument s toString methods during lenient formatting \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=197631208\n  
704,     Add missing test case for emptiesLast \n\nCloses    com/google/guava/pull/3089\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=197618303\n  
705,     Put @NullableDecl last in lists of annotations\n\nFixes #3152\n\n
706,     Suppress exceptions raised from argument s toString methods during lenient formatting \n\n
707,     Remove now-unused dependency on the Checker Framework compatibility annotations\n\nFor example  @NullableDecl \n\n
708,     Migrate from @MonotonicNonNullDecl to @MonotonicNonNull\n\n
709,     Fixes deadlocks in LocalCache asMap() compute() if the Function throws\n\nCloses    com/google/guava/pull/2901\n\n
710,     Migrate ClassSanityTester to type annotations\n\n
711,     Fix a typo  Change  if the this  to  if this  \n\n
712,     Added @DoNotCall to Futures methods which do not take an executor\n\nFutures methods which run a callback and do not accept an Executor will be removed in a future release   @DoNotCall has been added to these methods to prevent their use until that time \n\nFor more information  see [ \n
713,     Remove usages of CaliperMain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include CaliperMain anymore \n\nSuch benchmarks should be run via the java_benchmarks generated binary directly \n\nGITHUB_BREAKING_CHANGES=n/a\n
714,     Continue migrating to type annotations for @Nullable\n\n
715,     Swap Preconditions and Verify over to Strings lenientFormat \n\n
716,     Branch eventbus  net  and escape for Java 7\n\n
717,     Introduce Strings lenientFormat()  copied from Preconditions format()  Rewrote documentation but the method body remains unchanged \n\n
718,     Move type annotations immediately before the type they apply\nto\n\nFixes #3145\n\n
719,     Update Public Suffix data \n\nThe copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=196136837\n  
720,     Fix a documentation error \n\nFluentFuture catchingAsync does not take a future as an argument \n\n
721,     Use the type annotation version of @Nullable in the Java 8 branch\n\n
722,     Add Token Binding HTTP header names to header libraries \n\n
723,     Continue type annotation preparations in NullPointerTester\n\n
724,     Support type annotations in NullPointerTester\n\n
725,     Replace    info with    info since that site\nserves from https now\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=195671646\n  
726,     Bump jsr305 version \n\n
727,     Fix a few formatting nits\n\n
728,     Use @SafeVarargs annotation for Sets cartesianProduct() \n\nFixes    com/google/guava/pull/3127\nFixes    com/google/guava/issues/2724\n\n
729,     Prepare for release 25 0 \n\n
730,     Push back some Guava removal dates to July 2018 \n\n
731,     Remove Files fileTreeTraverser() \n\n
732,     Add Annotations to a gwt xml file \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=194244915\n  
733,     Re-fix    com/google/guava/issues/3081 \n\n
734,     Avoid presizing arrays \n\n
735,     Strip @DoNotMock annotations\n\n
736,     Use https for API docs\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=193714229\n  
737,     Make SuppliersTest testMemoizeExceptionThrown() actually memoize the suppliers before testing them \n\nFixes    com/google/guava/issues/3122\n\n
738,     Adding a new (initially internal  pending API Review) static factory to Striped \n\nThis allows for custom Lock injection  which might be useful for cases not covered by the currently existing factories  With this  Striped<Lock> with fair sync is possible \n\n
739,     Don t enable use of Unsafe getLong() on aarch64 devices \n\nAndroid devices may report to run aarch64 while running in 32-bit mode  and then\ncrash when loading 64-bit values at unaligned addresses \n\n
740,     Automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e \n\nIt looks like the original change can cause an infinite loop in LocalCache LoadingValueReference get() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=193210868\n  
741,     Use Diamond \n\n
742,     Use Splitter for IPv6  too  This eliminates usage of java util regex from this file (which is used via String split  otherwise) \n\n
743,     Use Splitter instead of String split  in InternetDomainName \n\n
744,     Fix toString of NonSerializableMemoizingSupplier\n\nFixes #3107\n\n
745,     Update Public Suffix data \n\nThis copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=192451340\n  
746,     Remove pre-mature optimization of storing a total bit size for ConcatenatedHashFunction \n\n
747,     Fix typo in Future javadoc \n\n
748,     Fix tests that failed if we couldn t recursively delete securely by using Jimfs and just getting rid of the whole file system each time \n\nFixes    com/google/guava/issues/3100\n\n
749,     Slightly discourage the use of the <long  TimeUnit> overloads on CacheBuilder \n\n
750,     remove maven-badges herokuapp com from readme\n\nFixes #3090\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=191298096\n  
751,     Add java time Duration overloads to CacheBuilder:\n  cacheBuilder expireAfterAccess(Duration)\n  cacheBuilder expireAfterWrite(Duration)\n  cacheBuilder refreshAfterWrite(Duration)\n\nFixes    com/google/guava/issues/2999\n\n
752,     Fix    com/google/guava/issues/3081 \n\n
753,     Ignore FinalizableReferenceQueueClassLoaderUnloadingTest in JDK 9 \n\n
754,     Open source refactorings directory   This is knowingly very simple  without yet documentation or many refactorings; it s a prototype first \n\n
755,     Supersource nullToEmpty and emptyToNull in Strings java to native JS \n\nThis allows us to improve performance in docs/xplat code that uses those methods \n\n
756,     Stop using ByteArrayOutputStream in ByteStreams toByteArray methods \n\nThey were using ByteStreams copy to copy the source to the BAOS  This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS  Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array \n\nInstead  read directly from the source into a sequence of buffers  When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it \n\n(Roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking InputStream are fixed )\n\n
757,     HashBiMap: unnecessary call to rehashIfNecessary\n\nCloses    com/google/guava/pull/3076\n\n
758,     Automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128\n\n*** Reason for rollback ***\n\nCausing OutOfMemoryError in some tests \n\n*** Original change description ***\n\nStop using ByteArrayOutputStream in ByteStreams toByteArray methods \n\nThey were using ByteStreams copy to copy the source to the BAOS  This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS  Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array \n\nInstead  read directly from the source into a sequence of buffers  When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it \n\n***\n\n
759,     Set serialVersionUID in TypeToken java\n\n
760,     Stop using ByteArrayOutputStream in ByteStreams toByteArray methods \n\nThey were using ByteStreams copy to copy the source to the BAOS  This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS  Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array \n\nInstead  read directly from the source into a sequence of buffers  When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it \n\n
761,     Make ByteSource read() use sizeIfKnown()  if available  to help avoid extra byte array allocations/copies \n\nAlso don t use 32 as the initial ByteArrayOutputStream size in either version of ByteStreams toByteArray(); just seems way too small  Use the default size for buffers instead  at a minimum \n\nAlso change ConcatenatedByteSource sizeIfKnown() to return absent if its Iterable of sources is not a Collection; this is to prevent sizeIfKnown() trying to loop over an infinite Iterable  which previous caused an infinite loop  That is also fixed in this CL; ConcatenatedByteSource size() and sizeIfKnown() now stop and return Long MAX_VALUE if the result would exceed that rather than going negative and continuing  But looping over an infinite Iterable in sizeIfKnown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeIfKnown()  which should be fast \n\n
762,     In Ascii  define a constant for the character case bitmask  and use it in place of 0x20 and 0x5f throughout the class \n\n
763,     Prepare for release 24 1 \n\n
764,     Add @since NEXT to new methods on Traverser \n\n
765,     Add X-Download-Options header (IE8 header to control the  Open  button on the download dialog) \n\n
766,     Change all instances of encoded subSequence() to use a simple start index offset  which reduces the Java memory footprint for TrieParser by at at least 130 MBs  This is because the original call to subSequence() would generate a new String on the heap for each call  where as just using an offset avoids the need to generate a new String all together \n\nThis memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java lang OutOfMemoryError: GC overhead limit exceeded  mostly in the TrieParser class \n\n100-test runs at original code:\nMemory usage\n- maximum: 503MiB (527 769 600 bytes)\n- average: 388MiB (407 225 077 bytes)\n\n100-test runs with my changes:\nMemory usage\n- maximum: 316MiB (325 271 552 bytes)\n- average: 221MiB (239 355 320 bytes)\n\nAt maximum: 187 MB saved\nAt average: 167 MB saved\n\n
767,     Add isSubtypeOf()  pre -condition check before getSubtype() returns \n\nWe have to call it before return because before type variable substitution  isSubtypeOf() can\ t apply \n\nSee    com/google/guava/issues/3048\n\n
768,     Fix List<Foo<?>> isSubtypeOf(List<Foo<?>>) \n\nThis used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter  turning it into Foo<C>  and then List<Foo<C>> isn t a subtype of List<Foo<?>> \n\nWildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters)  But for resolving in covariant context  wildcard should remain as is \n\nI found this when trying to add isSubtypeOf() precondition check in getSubtype()  in response to    com/google/guava/issues/3048 \n\n
769,     Traverser java: add support for multiple start nodes \n\nUpdate documentation (in this file and in graphs_explained md) relating to behavior and definitions of equals() and hashCode() \n\n
770,     Correct a typo in ImmutableBiMapTest \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=187268361\n  
771,     Automated g4 rollback of changelist 185433235 \n\n*** Reason for rollback ***\n\nb/73552091\n\n*** Original change description ***\n\nAdd hash flooding protection to HashBiMap \n\n***\n\n
772,     Always expect a suppressing Closer \n\nSince we now require Java 7  it should always be available -- other than under Android  where we don t currently run this test \n\n
773,     Hide Downloading/Downloaded lines from output \n\n   com/a/35653426/28465\n   itemis com/en/in-a-nutshell-removing-artifact-messages-from-maven-log-output\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=186050936\n  
774,     Add @Override to some serialization methods \n\nThe problem with this is that they re not overrides under GWT  The solution is to mark them @GwtIncompatible -- probably not a bad idea  anyway  in case they ever come to depend on libraries not available under GWT \n\n
775,     Update Public Suffix data \n\nThe [  copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=185723883\n  
776,     Document that the compact collections aren t universal wins \n\n
777,     Fix @since tag from CL 185440742 \n\n
778,     Migrate uses of the double-brace initialization pattern to factory methods or builders\n\n[ \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=185463519\n  
779,     Add linear 16 audio type  We are using L16 audio in our project ([  and need this field defined to match our mime type \n\n
780,     Add hash flooding protection to HashBiMap \n\n
781,     Add hash flooding protection to ImmutableMultiset  falling back to a JDK HashMap backed implementation when probable flooding is detected \n\nWhile we re at it  rearchitect ImmutableMultiset on GWT to use that implementation rather than the handrolled hash table in RegularImmutableMultiset \n\n
782,     In Java 8 branch  fall back to an ImmutableSet backed by j u HashSet (and its binary tree magic) if apparent hash flooding is detected \n\nAs part of this restructuring  we redesign Immutable Set SortedSet  Builder to always allocate O(distinct) memory instead of O(insertions)  deduplicating as elements come in (somewhat lazily in ISS B s case) \n\n
783,     Adds the @Immutable annotation to InternetDomainName java \n\n
784,     Group overloads together \n\n
785,     In Java 8 branch  fall back to j u HashMap based implementation in ImmutableBiMap if hash flooding appears probable   (Partially motivated by external feature requests  partially by [ \n\n
786,     Hide class used from Google-internal test \n\n
787,     Remove incorrect Javadoc \n\nIt looks like we got this wrong back in CL 62226066 (from    appspot com/58760044/patch/1/10006): The tests aren t identical  One tests a null key; the other  a null value  Does that sound right?\n\n(Motivation: The @link in the Javadoc is broken  so we re getting warnings from the Guava build )\n\n
788,     Add meaningful null check messages to ImmutableTable \n\nThis is especially important in cellOf()  where we had 3 null checks on a single line  making it impossible to determine which argument caused the NPE \n\n
789,     In Java 8 branch  fall back to j u HashMap based implementation in ImmutableMap if hash flooding appears probable   (Partially motivated by external feature requests  partially by [ \n\n
790,     Work around breakage in which release builds run maven-javadoc-plugin 2 7 in child poms  even though pluginManagement tells them to use 3 0 0 \n\nThis is similar to the fix for Truth in [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=184063561\n  
791,     Replace @link reference to an old  removed API with @code \n\n
792,     Prepare for release 24 0 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=184031422\n  
793,     Mark HashFunction @Immutable \n\n
794,      Fix  Types toString doc for arrays \n\nRelevant to    com/google/guava/pull/2990\n\n
795,     Restrict length of varargs array in immutable collection factory methods\n\nThis PR documents the restriction that immutable collection factory methods with varargs pose on the length of the last argument  and adds a check for this precondition to prevent NegativeArraySizeException from being thrown \n\nFixes #3027\nFixes #3026\n\n
796,     Stop using `forward new InverseEntrySet()` because javac9 generates Objects requireNonNull() calls for it \n\nThat method isn t available under old versions of Android \nThankfully  the calls are caught by Animal Sniffer \nInternally  [  eliminates these when targeting Java 6 (b/32446315)  Another reason to build with Bazel someday?\n\nNo effect on Proguard numbers \n\n
797,     Delete deprecated Predicates assignableFrom(Class)  Please use Predicates subtypeOf(Class) instead \n\n
798,     Remove Graphs equivalent() methods  Please use graphA equals(graphB)  or Objects equals(graphA  graphB) instead \n\n
799,     Remove a couple of APIs scheduled for removal in January 2018 \n\nFor other APIs scheduled for removal  give them a stay of execution until April so their existing usages can be cleaned up  Also update a few methods that were scheduled for removal in February to April  since we won t be doing @Beta removals in February \n\nALSO update the java7 version of TreeTraveserTest to match changes that were made at some point in the past to the mainline version but not merged \n\n
800,     Clarify purpose of CacheBuilder newBuilder s function signature \n\n
801,     Improve allocation behavior of Multiset copying and addAll implementations in both Guava versions \n\n
802,     Add efficient TreeMultiset forEachEntry \n\n
803,     Add even more toString details to Futures \n\n
804,     Add implementation for EnumMultiset forEachEntry \n\n
805,     Adding [HTTP2-Settings  HTTP header \n\n   org/specs/rfc7540 html#Http2SettingsHeader\n\n
806,     *Graph java: add @since NEXT to incidentEdges()  and retire the use of @inheritDoc in favor of just copying the documentation over wholesale   (This preserves the @throws tags in the subinterfaces )\n\n
807,     Remove AbstractMultiset s default O(n) (or worse) implementations of size()  count()  and clear() \n\nAs part of the cleanup:\n- make TreeMultiset clear() (in the normal case) O(n) rather than something worse (due to rebalancing)\n- make AbstractMapBasedMultiset stop allocating its entrySet() and an entrySet() iterator() during construction\n- make TreeMultiset clear() (in the normal case)  StandardConcurrentMultimap clear() and several Multiset view implementations  clear() methods avoid allocating Entry objects\n\nMaybe it makes sense to have such default implementations in AbstractMap  a public type accessible to end users who might really want a quick and dirty Map  But AbstractMultiset is package-private  and we d probably rather be explicit about when we re choosing an O(n) implementation \n\nAlso  rename Multisets sizeImpl to linearTimeSizeImpl \n\nEffects on ArrayListMultimapProGuard:\n58546 bytes => 58285 bytes\n54 classes => 54 classes\n409 methods => 406 methods\n\nEffects on HashMultimapProGuard:\n60833 bytes => 60572 bytes\n54 classes => 54 classes\n415 methods => 412 methods\n\nEffects on HashMultisetProGuard:\n21990 bytes => 21685 bytes\n17 classes => 17 classes\n150 methods => 147 methods\n\nEffects on LinkedHashMultimapProGuard:\n70828 bytes => 70567 bytes\n61 classes => 61 classes\n490 methods => 487 methods\n\nEffects on LinkedHashMultisetProGuard:\n26100 bytes => 25794 bytes\n21 classes => 21 classes\n172 methods => 169 methods\n\n
808,     Include method name and parameters in the message of the ArithmeticException during overflows \n\nHaving this information available would make debugging overflows much easier \n\n
809,     Improve allocation behavior of ImmutableMultiset Builder addAll(Multiset) \n\nEffects on ImmutableMultisetProGuard:\n33905 bytes => 34170 bytes\n29 classes => 29 classes\n236 methods => 241 methods\n\n
810,     Add allocation measurements for basic immutable collection operations \n\n
811,     Fix tests that assume Class getClassLoader() returns a URLClassLoader so that they can call getURLs() to instead parse the  java class path  system property \n\nThis doesn\ t fully fix FinalizableReferenceQueueClassLoaderUnloadingTest: I still see a failure for testUnloadableInStaticFieldIfClosed  But at least the other 2 tests in the file pass  and the failure is now a  real  failure ( Predicate did not become true within 10 second timeout ) rather than a ClassCastException \n\n(I\ ve confirmed that the failing test computes exactly the same classpath under Java 9 as under Java 8  so I\ m not sure exactly what\ s up  I may ask emcmanus )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=182227182\n  
812,     Update maven-javadoc-plugin to 3 0 0 \n\nAs part of that  migrate from additionalparam  which was deprecated and removed this year  to additionalOptions \n\nAlso  remove duplicate -Xdoclint:-html line \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=182209120\n  
813,     Remove org apache maven plugins  which is the default:\n\n   apache org/guides/introduction/introduction-to-plugin-prefix-mapping html#Configuring_Maven_to_Search_for_Plugins\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=182205463\n  
814,     Suppress warnings from existing nested futures \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=182120920\n  
815,     Code cleanup \n\nFixes #3032\n\n
816,     Avoid loading some javax annotation classes\n\nTo work around split package issues under JDK 9 \n\n
817,     Fix REE handling in SerializingExecutor \n\nThe old implementation had two bugs:\n1  Tasks that threw RejectedExecutionException on submission would still execute later\n2  Two threads submitting to an idle SequentialExecutor might see one submission succeed  even if the delegate threw REE  The submitted task wouldn t run until someone else successfully submitted another task \n\nThis costs a possible extra lock acquisition  (to solve #2) and an allocation (to solve #1) when submitting to a SequentialExecutor that doesn t already have worker scheduled or running \n\n
818,     Add MediaType withParameters(String attribute  Iterable<String> values)\n\n
819,     common graph: add incidentEdges() method to Graph/ValueGraph \n\nAlso added an override of remove() to the Set returned by the edges() method  to ensure that it wouldn t allow removal of elements from the set \n\nJava [ \n\n
820,     Improve handling of Function argument so that it shows up in toString() while the future is running\n\n
821,     Make checkedMultiply available under GWT \n\n
822,     Update Public Suffix data \n\nThe [  copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=181484427\n  
823,     Annotate all public AbstractTester subclasses with @Ignore \n\nThis prevents our internal Android test-suite builder from trying to run them directly \n(The tests continue to run on the JVM (JUnit 3) test runner  which doesn\ t look for the JUnit 4 @Ignore annotation  Yes  it\ s a little strange that the Android test-suite builder respects the JUnit 4 annotation even for these JUnit 3 tests )\n(I\ m not 100% sure what happens to our generated TestSuiteBuilder suites under Android  as they\ re currently broken for other reasons (b/30575968)  If this CL causes any problem for them  we\ ll have to deal with it later  I\ m fairly sure that we\ re safe  though  as we generate code that constructs the test and calls its methods directly )\n\nThis in turn lets us back out our binary-under-test hack \n\nAnd that means we no longer trigger b/69965697  so we start running more tests under Android:\n\n29 => 88 for collect testing\n1526 => 1698 for labs collect\n2519 => 5772(!) for collect\n(no change for primitives)\n\n(Note: I believe we\ re still ignoring suite() methods  That\ s kind of a good thing  since those would further increase the number of tests to run  I\ m not sure if we even can run suite() methods with the default runner  as I believe it looks only for  test*  methods  I\ ve been hoping to eventually split all the suite() methods into separate classes and put them through the generated-TestSuiteBuilder-test magic  but as noted above  that doesn\ t work for Android at the moment  anyway )\n\n
824,     Fix some simple cases of stack overflow in AbstractFuture toString()\n\nThis is a partial fix for people doing weird things and can easily be circumvented by people adding some indirection  but this is also what AbstractCollection toString does so it seems like there is a decent precedent for a partial solution to this problem \n\nIt doesn t appear to be possible to implement a full fix without resorting to things like threadlocals or examining the callstack  and this problem doesn t seem important enough to justify a solution like that \n\n
825,     Overhaul Android  Hash LinkedHash Multiset to operate much more directly on ObjectCountHashMap  eliminating many unnecessary classes  allocations  and even calls to hashCode on the elements \n\nEffects on HashMultisetProGuard:\n25422 bytes => 20198 bytes\n20 classes => 16 classes\n163 methods => 123 methods\n\nEffects on LinkedHashMultisetProGuard:\n31438 bytes => 21635 bytes\n27 classes => 17 classes\n197 methods => 141 methods\n\nEffects on ArrayListMultimapProGuard:\n58474 bytes => 57991 bytes\n54 classes => 53 classes\n408 methods => 409 methods\n\nEffects on HashMultimapProGuard:\n60759 bytes => 60277 bytes\n54 classes => 53 classes\n414 methods => 415 methods\n\nEffects on LinkedHashMultimapProGuard:\n70757 bytes => 70274 bytes\n61 classes => 60 classes\n489 methods => 490 methods\n\n
826,     Let our internal Android test runner run AbstractPackageSanityTestsTest s nested test class directly \n\nThis is the path of least resistance  as detailed in the internal CL description \n\n
827,     Add nullness annotations on the field in LinkedListMultimap java\n\n
828,     Add nullness annotations on the fields in TreeBasedTable java\n\n
829,     Add nullness annotations on the fields in AggregateFuture java\n\n
830,     Add nullness annotations on the fields in AbstractScheduledService java\n\n
831,     Add nullness annotations on the fields in MinMaxPriorityQueue java\n\n
832,     Add nullness annotations on the fields in ImmutableMultiset java\n\n
833,     Add nullness annotations on the fields in DescendingMultiset java\n\n
834,     Add nullness annotations on the fields in StandardTable java\n\n
835,     Add nullness annotations on the fields in Maps java\n\n
836,     Add nullness annotations on the field in ConcurrentHashMultiset java\n\n
837,     Add nullness annotations on the fields in TreeMultiset java\n\n
838,     Add nullness annotations on the fields in LinkedHashMultimap java\n\n
839,     Add nullness annotations on the fields in AbstractTable java\n\n
840,     Add nullness annotations on the field in AbstractMapBasedMultimap java\n\n
841,     Add nullness annotations on the field in AbstractMapBasedMultiset java\n\n
842,     Add nullness annotations on the field in AbstractMultiset java\n\n
843,     Fix bug where Multiset elementSet remove did not propagate changes to Multiset size \n\nThis fix is not the most efficient  and incurs unnecessary allocation in Multiset elementSet iteration  but is a tolerable workaround until we do something more sophisticated \n\n
844,     Add nullness on the fields in AbstractBiMap java\n\n
845,     Make  emptiesFirst(naturalOrder())  infer the type more reliably \n\nFixes #3022 \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=180665310\n  
846,     Add nullness annotations on the fields in ArrayTable java\n\n
847,     Add nullness annotations on the fields in CompactHashMap java\n\n
848,     Add nullness annotations on the field in AbstractMapBasedMultiset java\n\n
849,     Add nullness annotations on the fields in HashBiMap java\n\n
850,     Add nullness annotations on the fields in CompactHashSet java\n\n
851,     Add nullness annotations on the fields in AbstractMultimap java\n\n
852,     Add nullness annotations on the field in AbstractSequentialIterator java\n\n
853,     Add nullness annotations on the fields in CompactLinkedHashSet java\n\n
854,     Add nullness annotations on the field in CompactLinkedHashMap java\n\n
855,     Add nullness annotations on the fields in Cut java\n\n
856,     Add nullness anntations on the field in AbstractMapBasedMultimap java\n\n
857,     Add nullness annotations on the field in AbsatractIterator java\n\n
858,     Add nullness annotations on the fields in AbstractSortedMultiset java\n\n
859,     Add nullness annotations on the fields in ImmutableSetMultimap java\n\n
860,     Add nullness annotations on the fields in ImmutableMultimap java\n\n
861,     Push down implementation of Multiset iterator() from AbstractMultiset \n\nEffects on ArrayListMultimapProGuard:\n59653 bytes => 58487 bytes\n55 classes => 54 classes\n414 methods => 408 methods\n\nEffects on HashMultimapProGuard:\n61927 bytes => 60761 bytes\n55 classes => 54 classes\n420 methods => 414 methods\n\nEffects on LinkedHashMultimapProGuard:\n71932 bytes => 70766 bytes\n62 classes => 61 methods\n495 methods => 489 methods\n\nEffects on HashMultisetProGuard:\n26583 bytes => 25426 bytes\n21 classes => 20 classes\n169 methods => 163 methods\n\nEffects on LinkedHashMultisetProGuard:\n32586 bytes => 31429 bytes\n28 classes => 27 classes\n203 methods => 197 methods\n\n
862,     Add nullness annotations on the fields in Iterators java\n\n
863,     Add nullness annotations on the fields in LinkedHashMultimap java\n\n
864,     Add nullness annotations on the fields in ImmutableEntry java\n\n
865,     Add nullness annotations on the fields in ImmutableMap java\n\n
866,     Add nullness annotations on the fields in ImmutableRangeSet java\n\n
867,     Add annotations on the fields in GeneralRange java\n\n
868,     Add nullness annotations on the fields in AbstractBiMap java\n\n
869,     Eliminate the apparently unnecessary Multimaps Keys KeysEntrySet \n\nEffects on ArrayListMultimapProGuard:\n62399 bytes => 59653 bytes\n57 classes => 55 classes\n426 methods => 414 methods\n\nEffects on HashMultimapProGuard:\n64797 bytes => 61927 bytes\n57 classes => 55 classes\n432 methods => 420 methods\n\nEffects on LinkedHashMultimapProGuard:\n74790 bytes => 71932 bytes\n64 classes => 62 classes\n507 methods => 495 methods\n\n
870,     Add nullness annotations on the fields in ImmutableTable java\n\n
871,     Add nullness annotations on the fields in LinkedListMultimap java\n\n
872,     Add nullness annotations on the fields in MapMakerInternalMap java\n\n
873,     Add nullness annotations on the fields in Lists java\n\n
874,     Add nullness annotations on the fields in MapMakerInternalMap java \n\n
875,     Add nullness annotations on the fields in MapMaker java\n\n
876,     Add nullness annotations on the fields in Maps java\n\n
877,     Add nullness annotations on the field in MinMaxPriorityQueue \n\n
878,     Add nullness annotations on the field in Multimaps java\n\n
879,     Add nullness annotations on the fields in Multisets java\n\n
880,     Add nullness annotations on the fields in StandardTable java\n\n
881,     Add @Nullable on the field in Tables java\n\n
882,     Add nullness annotations on the fields in RegularImmutableMultiset java\n\n
883,     Add nullness annotations on the fields in Synchronized java\n\n
884,     Add @NullableDecl on the field in TreeBasedTable \n\n
885,     Add @NullableDecl on the field in TopKSelector java\n\n
886,     Add nullness annotations on the fields in NaturalOrdering \n\n
887,     Attempt to fix bugs where objects that are incompatible with eachother are tested for equality (generally: Lists and Sets  or Classes of incompatible types) \n\nIn order to facilitate enhancements to an existing compile-time error check ([  it s necessary to fix existing issues before updating the static analysis \n\nIf I ve gotten the fix incorrect  please let me know here  or  if you d prefer  I can add a suppression on the existing buggy code for you or your team to pick up later \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=180217836\n  
888,     Add @NullableDecl to the fields of TreeMultiset\n\n
889,     Add nullness annotations on the field in Sets java\n\n
890,     Push down AbstractMapBasedMultimap wrapCollection logic into subtypes \n\nEffects on ArrayListMultimapProGuard:\n80560 bytes => 62399 bytes\n73 classes => 57 classes\n575 methods => 426 methods\n\nEffects on HashMultimapProGuard:\n91236 bytes => 64797 bytes\n80 classes => 57 classes\n646 methods => 432 methods\n\nEffects on LinkedHashMultimapProGuard:\n101181 bytes => 74790 bytes\n87 classes => 64 classes\n720 methods => 507 methods\n\n
891,     Add nullness annotation to the filed  holder  in Streams \n\n
892,     Push down logic of AbstractMapBasedMultimap createKeySet into subtypes \n\nEffects on ArrayListMultimapProGuard:\n83062 bytes => 80560 bytes\n75 classes => 73 classes\n599 methods => 575 methods\n\nEffects on HashMultimapProGuard:\n93757 bytes => 91236 bytes\n82 classes => 80 classes\n670 methods => 646 methods\n\nEffects on LinkedHashMultimapProGuard:\n103682 bytes => 101181 bytes\n89 classes => 87 classes\n744 methods => 720 methods\n\n
893,     Push down logic of AbstractMapBasedMultimap createAsMap into subtypes \n\nEffects on ArrayListMultimapProGuard:\n86365 bytes => 83062 bytes\n77 classes => 75 classes\n642 methods => 599 methods\n\nEffects on HashMultimapProGuard:\n97037 bytes => 93757 bytes\n84 classes => 82 classes\n713 methods => 670 methods\n\nEffects on LinkedHashMultimapProGuard:\n106972 bytes => 103682 bytes\n91 classes => 89 classes\n787 methods => 744 methods\n\n
894,     Add missing nullable annotations on the fields in the cache package \n\n
895,     Add missing nullness annotation on the field in WellBehavedMap\n\n
896,     Add @MonotonicNonNullDecl to TreeRangeSet \n\n
897,     Add mising nullness annotations to the fields in the io package in guava \n\n
898,     Add missing nullness annotations on the fields in the base package in guava \n\n
899,     Add missing nullness annotations on the fields in the hash package in guava \n\n
900,     Add @MonotonicNonNullDecl to UnmodifiableSortedMultiset \n\n
901,     Add missing nullness annotations to the fields in the concurrent package in\nguava \n\n
902,     Make Stopwatch toString() work under j2cl  which checks casts more strictly than GWT \n\nWithout this change  I see:\njava lang ClassCastException: java lang Double cannot be cast to Number\n\nThe original code was taken from [ \nI noticed this when attempting to use a similar idiom in Truth (now with j2cl tests  yay! but not yet for Guava):    \n\n
903,      #id  doesn t work from the Github Wiki  I think  only from github io sites (e g      github io/truth/faq#imports) \n\nFollowup to CL 179856462 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=179861167\n  
904,     Link directly to instructions for repackaging Guava \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=179856462\n  
905,     Add a recommendation to the Guava README that libraries using Guava use the Beta Checker \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=179830005\n  
906,     Prepare for release 23 6 \n\n
907,     Add dummy test methods to Compact(Linked)HashSetTest so that the Maven test runner doesn t complain \n\n
908,     Don t use Iterables transform in Maps  key value Iterator \n\nEffects on ArrayListMultimapProGuard:\n88459 bytes => 86365 bytes\n80 classes => 77 classes\n647 methods => 642 methods\n\nEffects on HashMultimapProGuard:\n99137 bytes => 97037 bytes\n87 classes => 84 classes\n718 methods => 713 methods\n\nEffects on LinkedHashMultimapProGuard:\n109126 bytes => 106972 bytes\n94 classes => 91 classes\n792 methods => 787 methods\n\n
909,     Link to the things I wrote about our Javadoc link problems \n\n
910,     Add missing @Nullable annotations on the fields in the reflect package \n\n
911,     Add missing @NullableDecl on the fields  instance  in Suppliers \n\n
912,     Add @since NEXT to FutureCombiner run \n\n
913,     Use compact data structures in ImmutableMultimap builders \n\nYes  this hurts code size  we want to know how much   It does improve allocations incurred in creating ImmutableMultimaps \n\nEffects on ImmutableListMultimapProGuard:\n61163 bytes => 71554 bytes\n52 classes => 61 classes\n409 methods => 465 methods\n\nEffects on ImmutableSetMultimapProGuard:\n82739 bytes => 97853 bytes\n69 classes => 80 classes\n560 methods => 641 methods\n\n
914,     Don t mention ImmutableSortedSet in Sets unmodifiableNavigableSet   That was causing many immutable collections to get retained by mutable multimap usages \n\nEffects on ArrayListMultimapProGuard:\n108287 bytes => 88459 bytes\n97 classes => 80 classes\n791 methods => 647 methods\n\nEffects on HashMultimapProGuard:\n113059 bytes => 99137 bytes\n99 classes => 87 classes\n819 methods => 718 methods\n\nEffects on LinkedHashMultimapProGuard:\n122946 bytes => 109126 bytes\n106 classes => 94 classes\n892 methods => 792 methods\n\n
915,     Start some simple improvements to multimaps in code size and allocation count \n\nAll of these measurements are taken after the switch to CompactHash* structures:\nInitial ArrayListMultimapProGuard:\n108287 bytes\n97 classes\n791 methods\n\nInitial HashMultimapProGuard:\n113059 bytes\n99 classes\n819 methods\n\nInitial LinkedHashMultimapProGuard:\n122946 bytes\n106 classes\n892 methods\n\n
916,     Add missing @NullableDecl on fields in google common base \n\n
917,     Push view creation down to subtypes of AbstractMultimap  so ImmutableMap can strip them out \n\nEffects on ImmutableListMultimapProGuard:\n80938 bytes => 61163 bytes\n74 classes => 52 classes\n546 methods => 409 methods\n\nEffects on ImmutableSetMultimapProGuard:\n102365 bytes => 82739 bytes\n91 classes => 69 classes\n693 methods => 560 methods\n\n
918,     Use maps directly in ImmutableMultimap Builder  instead of delegating to a mutable multimap \n\nEffects on ImmutableListMultimapProGuard:\n135061 bytes => 80938 bytes\n122 classes => 74 classes\n963 methods => 546 methods\n\nEffects on ImmutableSetMultimapProGuard:\n147668 bytes => 102365 bytes\n131 classes => 91 classes\n1024 methods => 693 methods\n\n
919,     Don t bother sharing a superclass of ImmutableMultimap values() iterator and ImmutableMultimap entries() iterator \n\nEffects on ImmutableListMultimapProGuard:\n135474 bytes => 135061 bytes\n123 classes => 122 classes\n966 methods => 963 methods\n\nEffects on ImmutableSetMultimapProGuard:\n148081 bytes => 147668 bytes\n132 classes => 131 classes\n1027 methods => 1024 methods\n\n
920,     Push down the implementation of ImmutableMultiset SerializedForm  so ImmutableMultimap keys() doesn t retain implementations of ImmutableMultiset it doesn t use \n\nEffects on ImmutableListMultimapProGuard:\n142493 bytes => 135474 bytes\n128 classes => 123 classes\n1002 methods => 966 methods\n\nEffects on ImmutableSetMultimapProGuard:\n155088 bytes => 148081 bytes\n138 classes => 132 classes\n1063 methods => 1027 methods\n\nEffects on ImmutableMultisetProGuard:\n34823 bytes => 34989 bytes\n29 classes => 29 classes\n236 methods => 237 methods\n\n
921,     Make CompactHash data structures package-private in external Guava   (Before we didn t expose them at all externally   This is so they can be used in multimap guts in Android )\n\n
922,     Avoid having ImmutableMultimap/ImmutableListMultimap depend on ImmutableSetMultimap due to serialization shenanigans \n\nEffects on ImmutableListMultimapProGuard:\n153838 bytes => 142493 bytes\n136 classes => 128 classes\n1060 methods => 1002 methods\n\nEffects on ImmutableSetMultimapProGuard:\n154486 bytes => 155088 bytes\n136 classes => 137 classes\n1062 methods => 1063 methods\n\n
923,     Add missing @NullableDecl to OrderedPermutationIterator nextPermutation\n\n
924,     Explicitly document that RateLimiter is thread-safe now that we ve removed @ThreadSafe \n\n
925,     Remove an unneeded dependency \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=179039547\n  
926,     Switch from @Nullable to @NullableDecl \n\n
927,     Add Uninterruptibles methods for Condition \n\nFixes #3010  #2870\n\n
928,     Add missing @NullableDecl to BaseEncoding java\n\n
929,     Add missing @Nullable to Shorts ShortArrayAsList \n\n
930,     Link to JDK Supplier  just as we link to JDK Function and Predicate \n\nChange Function and Predicate to display the fully qualified name of the class they re linking to \n\nAlso link to the JDK versions of all those classes in the backport  which we re building with a Java 8 version of Javadoc and from which we re linking to Java 9 Javadoc \n\n
931,     Partial g4 rollback of changelist 170507937 \n\n*** Reason for rollback ***\n\nThe Files APIs are @Beta  so they can still be removed \n\n*** Original change description ***\n\nRemove removal dates for non-@Beta deprecations \n\n***\n\n
932,     Document that it s safe to exclude Guava s annotation dependencies \n\n   google com/d/topic/guava-discuss/esIthL_9AIc/discussion\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=178379402\n  
933,     Reduce iterations of testBuilder_bruteForce under GWT \n\nMaven timings:\nImmutableDoubleArrayTest: 00:11 -> 00:01\nImmutableIntArrayTest: 00:35 -> 00:04\nImmutableLongArrayTest: 00:49 -> 00:06\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=178279918\n  
934,     Run fewer iterations of testByteArrayRoundTrips \n\nMaven timing: 01:30 -> 00:09\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=178279876\n  
935,     Document why AbstractIteratorTest looks slow under GWT but really isn t \n\n(It s because it runs first in our internal test setup  so it pays for browser startup )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=178279804\n  
936,     Migrate from jsr305 @Nullable to Checker Framework @NullableDecl \n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=178274875\n  
937,     Make Javadoc output quieter \n\nThe important stuff is still there: See below  (I inserted the ERROR from an earlier version of [ it s not present at HEAD or that in CL )\n\n[INFO  --- maven-javadoc-plugin:2 10 4:javadoc (default-cli) @ guava ---\n[ERROR  Error fetching link:    org/api//package-list  Ignored it \n[INFO \n1 warning\n[WARNING  Javadoc Warnings\n[WARNING  /tmp/tmp DGUFqGBmMY/guava/src/com/google/common/collect/ImmutableTable java:226: warning - Tag @link: can t find Builder() in com google common collect ImmutableTable Builder\n\nI think you had silenced some other plugins not too long ago  Maybe it just wasn t clear how to silence this one  since it uses a Javadoc-specific flag? But if there s a reason to avoid quiet here  let me know \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=178259859\n  
938,     Fix JSR305 links yet again \n\nI broke them when I added links to the Checker Framework  which began to claim javax annotations  just as the JDK had previously done \n\nI had hoped that the fix was as simple as moving the Checker Framework to the -linkoffline section so that it could come after JSR305  but that didn t work: Maven tries to prevalidate the package-list file  and somehow it fails to connect to checkerframework org \n\nWe saw problems with pre-validation before with JSR305 in [ But I diagnosed it wrong there: I thought that Maven was trying to fetch the Javadoc root URL -- e g      org/api/  But I was wrong: I was confusing the `link` and `linkUri` variables in the maven-javadoc-plugin source  In fact  Maven tries to fetch the package-list file  as you d expect  But for some reason  this fails for javadoc io and for checkerframework org  even though it succeeds for docs oracle com  But it doesn t appear to be a User-Agent problem: I m able to wget from checkerframework org with the default Java User-Agent (which fails in the javadoc io case)  an absent User-Agent  and the User-Agent that I think maven-javadoc-plugin is using (judging from its source code)  Plus  as far as I can tell  the connection attempt doesn t even get far enough to send a User-Agent \n\nHere are the logs provided by `mvn javadoc:javadoc -Dorg slf4j simpleLogger log org apache http=debug`  (Note: Even *that* logging may go away with the upgrade to maven-javadoc-plugin 3 ) Both javadoc io and checkerframework org follow the same pattern:\n\n[DEBUG  Connection request: [route:  s ->   org [total kept alive: 0; route allocated: 0 of 2; total allocated: 0 of 20 \n[DEBUG  Connection leased: [id: 1 [route:  s ->   org [total kept alive: 0; route allocated: 1 of 2; total allocated: 1 of 20 \n[DEBUG  Connecting to checkerframework org:443\n[DEBUG  Connection org apache http impl conn DefaultClientConnection@45545e7a closed\n[DEBUG  Connection org apache http impl conn DefaultClientConnection@45545e7a shut down\n[DEBUG  Connection org apache http impl conn DefaultClientConnection@45545e7a closed\n[DEBUG  Connection released: [id: 1 [route:  s ->   org [total kept alive: 0; route allocated: 0 of 2; total allocated: 0 of 20 \n[DEBUG  Connection manager is shutting down\n[DEBUG  Connection manager shut down\n[ERROR  Error fetching link:    org/api//package-list  Ignored it \n\nCompare to the successful logs for docs oracle com:\n\n[DEBUG  Connection request: [route:  s ->   oracle com [total kept alive: 0; route allocated: 0 of 2; total allocated: 0 of 20 \n[DEBUG  Connection leased: [id: 0 [route:  s ->   oracle com [total kept alive: 0; route allocated: 1 of 2; total allocated: 1 of 20 \n[DEBUG  Connecting to docs oracle com:443\n[DEBUG  CookieSpec selected: best-match\n[DEBUG  Auth cache not set in the context\n[DEBUG  Target auth state: UNCHALLENGED\n[DEBUG  Proxy auth state: UNCHALLENGED\n[DEBUG  Attempt 1 to execute request\n[DEBUG  Sending request: GET /javase/9/docs/api//package-list HTTP/1 1\n   \n\nSo what is wrong? Probably SSL  Based on that suspicion  I learned that I could set -Djavax net debug=ssl  which produced more information before the close message:\n\nmain  WRITE: TLSv1 2 Handshake  length = 239\nmain  READ: TLSv1 Alert  length = 2\nmain  RECV TLSv1 2 ALERT:  fatal  handshake_failure\nmain  called closeSocket()\nmain  handling exception: javax net ssl SSLHandshakeException: Received fatal alert: handshake_failure\nmain  IOException in getSession():  javax net ssl SSLHandshakeException: Received fatal alert: handshake_failure\nmain  called close()\nmain  called closeInternal(true)\n[DEBUG  Connection org apache http impl conn DefaultClientConnection@3667faa8 closed\n\nAnd now that I ve written that  I can t reproduce it :\\ With -Djavax net debug=*all*  I can see what else is going on:\n\n%% Cached client session: [Session-1  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 \nmain  called close()\nmain  called closeInternal(true)\nmain  SEND TLSv1 2 ALERT:  warning  description = close_notify\nmain  WRITE: TLSv1 2 Alert  length = 26\nmain  called closeSocket(true)\n[DEBUG  Connection org apache http impl conn DefaultClientConnection@58af5076 closed\n\nMaybe the server has an aggressive timeout? I think I saw someone suggest that as a possibility \n\nI don t know more detail than that  I see people who suggest that the problem could involve:\n- connection managers (which maven-javadoc-plugin uses):    com/a/24084141/28465\n- a need for a specific key store:    com/a/5206837/28465\n- a need for extra crypto implementations/settings:    com/a/38264878/28465\n- or other settings (I at least tried passing -Dhttps protocols= and adding the suggested (possibly wrong in this case) -Dhttps cipherSuites to that):    com/a/32226688/28465\n- a new JDK:    com/a/39405982/28465\n- a new HTTPClient (though whatever comes with the newest maven-javadoc-plugin (assuming that that s built in to the plugin and not to Maven??) apparently wasn t good enough):    com/a/43220038/28465\n- aggressive timeout  I think  as noted above\n- maybe weird things happen when maven-javadoc-plugin closes the stream without reading from it?\n- I think other things that I ve forgotten  and surely other things I haven t understood \n\nAnyway  I made a local copy of the package-list  just as I d done for the javadoc io projects  even though this time there s only one problem instead of two :)\n\nI m pretty sure that the Checker Framework links will work now  too  but I haven t tested because we don t have any yet in Guava itself \n\nPossibly I should just switch us to back using -link instead of -linkoffline  adding the User-Agent override that I figured out last time    \n\nAlso  I moved some configuration to the parent pom so that it also affects guava-testlib  But I didn t move the most interesting parts  which require a little more work (though hopefully not much   ) \n\nRe-fixes    com/google/guava/issues/2965\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=178252119\n  
939,     [guava concurrent  Added  Submitted tasks have a happens-before order as defined in the Java Language Specification  to the documentation of newSequentialExecutor()  This popped up as a useful way to think about this Executor on a related design \n\n
940,     Deprecate ConcurrentHashMultiset#createEntrySet()\n\nFixes #3004\n\n
941,     Recognize @NullableDecl in NullPointerTester and friends \n\nAlso  migrate common testing to itself be annotated with @NullableDecl  rather than @Nullable \nI could claim that I did this as a small-scale test  but honestly I just didn\ t feel like pulling the  real  changes of this CL out from the @NullableDecl migrations already present in my client :)\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=177902265\n  
942,     Depend on checker-compat-qual instead of checker-qual \n\n
943,     Miscellanous followup to CL 177814345:\n\n- Make inverse() thread-safe in the mainline  as it is in the backport \n- Remove an inaccurate comment:    \n- Eliminate a couple spurious diffs between branches  (That said  if you don t want @RetainedWith in the java7 branch  I don t mind keeping it out  I just happened to notice it )\n\n
944,     google-java-format MOST OF THE THINGS \n\nThe only things I did were:\n- fixed  lists  in StringUtil and NullPointerTesterTest\n- fixed a few files that needed string wrapping: WhitespaceMatcherBenchmark  SourceSinkTester  FuturesTest\n- added some missing braces for for() loops in ListsTest\n- removed `static` from interfaces in TypeTokenSubtypeTest and TypeTokenTest\n- added blank lines between methods in ListsImplTest  CharStreamsTest  UnsignedInts  UnsignedLongs  Lists (b/26486965)\n- added blank lines between copyright and package in ImmutableEnumMap  ImmutableRangeSet  TestSortedSetGenerator  SubscriberExceptionContext  SubscriberExceptionHandler  ServiceManager  WrappingScheduledExecutorService  MapsCollectionTest  ServiceManagerTest (b/28398622)\n- removed blank lines inside a method call in IntMathTest and LongMathTest (b/70148121)\n\n
945,     I tripped and rewrote HashBiMap in the fully compact form  with no redundant code or storage  like I had assumed was too much work \n\nMemory consumption effects:\nUnsized: 52 bytes/entry vs  64 for server-side implementation vs  74 for CompactHash* implementation\nSized: 40 bytes/entry vs  64 for server-side implementation vs  56 for CompactHash* implementation\n\n(NB: I did not include storage of hash codes  as included in the other implementations   If we wanted that it d add another 8 bytes/entry sized  and probably 12 bytes/entry unsized )\n\nEffects on HashBiMapProGuard:\n17833 bytes vs  30172 bytes for server-side implementation vs  31159 bytes for CompactHash* implementation\n13 classes vs  29 classes for server-side implementation vs  27 classes for CompactHash* implementation\n99 methods vs  132 methods for server-side implementation vs  173 methods for CompactHash* implementation\n\n
946,     Remove public constructors from SimpleTimeLimiter \n\nThis change was already made for public Guava and is now done for [  users as well \n\n
947,     [FUTURES  Added Futures whenAllComplete(  ) run(  ) to Futures java\n\nSince runnable cannot throw checked exception  you cannot use getDone when defining your runnable which is a shame :(\n\n
948,     Remove maven-gpg-plugin configuration from Guava s pom \n\nUsing the sonatype-oss-release profile will do this for us  Also remove the default of gpg skip=true since the gpg plugin will no longer be used for normal builds \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=177637510\n  
949,     Make getUnchecked available under GWT \n\nIn service of the tests of forthcoming CL 177218820 \n\n
950,     Automated g4 rollback of changelist 177586281 \n\n*** Reason for rollback ***\n\nMissed Guice reflective calls \n\n*** Original change description ***\n\nRemove public constructors from SimpleTimeLimiter \n\nThis change was already made for public Guava and is now done for [  users as well \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=177603142\n  
951,     Update oss-parent to version 9 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=177595991\n  
952,     Add @Nullable to MoreObjects \n\n
953,     Change  late 2017  removal date to January 2018 \n\n
954,     Schedule assignableFrom for deletion \n\nIt was deprecated over a year ago: [ I think our deprecation-date test (which has since been removed) missed it because it just looks for a number  and the regex ran into the @since tag \n\n
955,     Remove public constructors from SimpleTimeLimiter \n\nThis change was already made for public Guava and is now done for [  users as well \n\n
956,     Add missing @Nullable to the fields in ImmutableSet java\n\n
957,     Migrate from jsr305 s @GuardedBy and @OverridingMethodsMustInvokeSuper to Error Prone s \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=177511255\n  
958,     Migrate from jsr305 s @CheckReturnValue to Error Prone s \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=177507004\n  
959,     Depend on error_prone_annotations 2 1 3 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=177502898\n  
960,     Promote ReferenceEntry to a top-level class for weird reasons \n\nSpecifically: With the switch to the Checker Framework annotations  PackageSanityTests testNulls fails:\n\n  No exception thrown for parameter at index 3 from static com google common cache LocalCache$ReferenceEntry com google common cache LocalCache newEntry(com google common cache LocalCache java lang Object int com google common cache LocalCache$ReferenceEntry)[      1  null  for class com google common cache LocalCache\n\nNullPointerTester  even when updated to look for the Checker Framework @Nullable  can\ t detect it -- not as a parameter annotation  not as a type annotation  The annotation is on the method in the  class file according to javap (though I don\ t know for sure that it\ s in the  right  place)  but Java doesn\ t see it at runtime  This class is the only place I\ m having this problem \n\nI suspect that this is a bug specific to nested classes: NullPointerTester can detect the Checker Framework @Nullable annotation if the parameter type is a top-level ReferenceEntry class but not a nested one  I tried  LocalCache @Nullable ReferenceEntry<K  V>  and variants of that with no luck  so I\ m going with top-level \n\n(We\ re looking into reporting the bug upstream )\n\nUpdate: There is a decent chance that I won\ t use the Checker Frameworks\  *type* annotations at all (instead using declaration annotations)  in which case this CL won\ t be strictly necessary  But given that we may well migrate to those annotations someday  it seems worth working around this now while it\ s fresh on my mind \n\n
961,     Add missing @Nullable to Finalizer \n\n
962,     Add missing @Nullable to Preconditions \n\n
963,     Add missing @Nullable annotation to ForwardingSortedSet unsafeCompare(Object  Object) \n\n
964,     Adding [Server-Timing  HTTP header \n\n   w3 org/TR/server-timing/\n\n
965,     Don t use recursion in MultiInputStream read() \n\nFixes    com/google/guava/issues/2996\n\n
966,     Prepare for release 23 5 \n\n
967,     Add ImmutableMap getOrDefault() in the Android branch \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=176589307\n  
968,     Add Checker Framework to dependencies \n\nThis CL doesn t *use* any annotations yet  and I m not even certain that we re going to yet  But I think we re likely to  and there s enough that can go wrong with just this step that I d like to get it in \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=176584793\n  
969,     Deprecate Files fileTreeTraverser() and MoreFiles directoryTreeTraverser() \n\n
970,     Update Public Suffix data \n\nThe copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=176514824\n  
971,     Carry @CanIgnoreReturnValue over to new methods \n\n(Same as [  except for SimpleTimeLimiter)\n\n
972,     Migrate usage of Files fileTreeTraverser() to Files fileTraverser() \n\n
973,     Fix inheriting docs from the JDK \n\nThis broke somewhere between 18 0 and 19 0  I\ d wildly speculate because of changes to Maven?\n   github io/guava/releases/18 0/api/docs/com/google/common/hash/BloomFilter html#hashCode%28%29\n   github io/guava/releases/19 0/api/docs/com/google/common/hash/BloomFilter html#hashCode%28%29\n\nSo it took 2-3 years to notice :\\\n\nI chose this new phase based on:\n Invokes the execution of the lifecycle phase generate-sources prior to executing itself  \n   apache org/plugins/maven-javadoc-plugin/javadoc-mojo html\n\nAnd generate-sources seems to make more sense than anything that comes before that:\n   apache org/ref/3 5 2/maven-core/lifecycles html\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=176502970\n  
974,     Mutable Graph  Network  ValueGraph  java: tighten the contract for the edge-adding methods   The contract now states that if the specified nodes are not already present in the graph  they are silently added   (Removes the option of throwing in this case )\n\n
975,     Carry @CanIgnoreReturnValue over to new methods \n\n
976,     Fully qualify some references to javax annotation Nullable in files that will likely soon refer to both that Nullable and the Checker Framework s \n\n
977,     Remove @ThreadSafe and @NotThreadSafe annotations \n\nThey re part of jsr305  which we re looking to migrate off \nAnd they aren t checked by Error Prone or providing much other value \n\n
978,     Migrate from jsr305 s @Immutable to Error Prone s \n\n
979,     Import Map Entry almost everywhere \n\nQualified types make @Nullable annotations more complicated: If we\ re using a type annotation  the  @Nullable  has to come between  Map   and  Entry  rather than before the whole thing  That means diffs between the mainline  presuming that it supports type annotations  and the backport  presuming that it doesn\ t  It\ s not entirely clear that that\ s how things will work out  but I can\ t experiment until I fix the problem  and I figure I might as well submit the fix  given that I think we generally like doing this  at least with Multiset Entry isn\ t in play? But it\ s not very hard to handle the problem as it comes up  either  if this CL is too much \n\n(Naturally  the same problem will exist for other types  But this CL fixes the most common problem )\n\n
980,     Try out @OverridingMethodsMustInvokeSuper  and remove some unnecessary work in AbstractMapTester \n\nThe first couple locations I found to use @OverridingMethodsMustInvokeSuper were cases where we\ re already doing the right thing  so that\ s  disappointing  \n\nOn the plus side  while I was looking into this  I noticed that AbstractMapTester is redoing all the work of its superclass (at least assuming that no one tries to override resetMap() rather that resetContainer() -- if anyone should be overriding that at all   )  So I fixed that  Maybe  if we\ re lucky  it will make our GWT and Android tests faster -- at least internally  where we actually run our suite-builder suites on those platforms  But the GWT test times are variable enough that it\ s hard to be sure without a bunch of runs  and the Android tests aren\ t running at the moment (b/30863522)  so    I don\ t know if this really helps or not \n\n
981,     Annotate Cache with @CompatibleWith\n\n
982,     Graduate Verify and VerifyException from Beta as requested here:\n   com/google/guava/issues/2409\n\nThese have been essentially stable for 3 5 years \n\n
983,     Refactor file tree children logic to separate method just like in MoreFiles \n\n
984,     Update docs that refer to the removed `suspensions` field \n\n
985,     Claim that ImmutableCollection classes should still be preferred over Java 9 factories like `Set of` \n   com/google/guava/issues/2969\n\n
986,     Roll forward \n\n*** Original change description ***\n\nAdd MoreFiles fileTraverser() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=175582408\n  
987,     Roll forward \n\n*** Original change description ***\n\nAdd Files fileTraverser() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=175564642\n  
988,     Make package-list files available to the android backport  too \n\nThis fixes the errors created by CL 173688451 \n\nIt s presumably possible to do this without duplicating the files  but    eh \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=175331982\n  
989,     Correct gender off-by-one error  :)\n\n
990,     Don t release guava-tests to Maven Central\n\nNo one should be depending on our tests (except from our own GWT tests) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=175197426\n  
991,     Don t construct thousands of strings \n\nTest timings aren t 100% consistent  even when I run the Maven tests locally (rather than the internal tests in some random cluster)  so don t take this as definite truth  but I m seeing some apparent improvements from this CL  even after my earlier CL to decrease the iteration count  Here are the numbers for all tests to take >=10 seconds:\n\nBefore:\n00:11 testCorrectOrdering_smallHeapsPollFirst\n00:11 testCorrectOrdering_smallHeapsPollLast\n00:16 testHeapIntact\n00:17 testRandomAddsAndRemoves_duplicateElements\n00:19 testRemoveAt\n00:25 testRandomAddsAndRemoves\n00:48 testCorrectOrdering_mediumHeapsPollFirst\n00:52 testCorrectOrdering_mediumHeapsPollLast\n02:02 testCorrectOrdering_randomAccess\n\nAfter:\n00:08 testCorrectOrdering_smallHeapsPollFirst\n00:08 testCorrectOrdering_smallHeapsPollLast\n00:15 testHeapIntact\n00:17 testRandomAddsAndRemoves_duplicateElements\n00:18 testRemoveAt\n00:27 testRandomAddsAndRemoves\n00:46 testCorrectOrdering_mediumHeapsPollLast\n00:50 testCorrectOrdering_mediumHeapsPollFirst\n01:14 testCorrectOrdering_randomAccess\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=175152127\n  
992,     Reduce iterations for MinMaxPriorityQueueTest under GWT \n\nI had a bunch of theories as to why these tests were slow (string construction  java util Random  collection construction)  They are probably part of the story -- especially string construction  which I might still submit a CL to reduce -- but fundamentally  I think the slow thing is our many calls to isIntact()  Let s not make so many  Likely the non-GWT tests would catch any problems here  anyway  and we ll still run the tests under GWT  albeit with fewer iterations  in case we have an obvious bug there \n\nThis is a clear win internally: All MinMaxPriorityQueueTest methods are now under 10 seconds  and I d previously seen ~6 over that mark  including 1 around a minute and 2 around 30 seconds  I ll get some external numbers next \n\nat head  top 14 MinMaxPriorityQueueTest tests:\n00:04 com google common collect MinMaxPriorityQueueTest_gwt|testExhaustive_pollAndPush\n00:06 com google common collect MinMaxPriorityQueueTest_gwt|testIteratorTester\n00:06 com google common collect MinMaxPriorityQueueTest_gwt|testIteratorTesterLarger\n00:10 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_smallHeapsPollLast\n00:11 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_smallHeapsPollFirst\n00:15 com google common collect MinMaxPriorityQueueTest_gwt|testHeapIntact\n00:16 com google common collect MinMaxPriorityQueueTest_gwt|testRandomRemoves\n02:51 com google common collect MinMaxPriorityQueueTest_gwt|testRandomAddsAndRemoves_duplicateElements\n03:00 com google common collect MinMaxPriorityQueueTest_gwt|testRemoveAt\n04:13 com google common collect MinMaxPriorityQueueTest_gwt|testRandomAddsAndRemoves\n07:28 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_mediumHeapsPollFirst\n07:31 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_mediumHeapsPollLast\n16:31 com google common collect MinMaxPriorityQueueTest_gwt|testRemoveAt_exhaustive\n19:19 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_randomAccess\n\nwith this CL  top 14 MinMaxPriorityQueueTest tests:\n00:01 com google common collect MinMaxPriorityQueueTest_gwt|testCreation_maximumSize_withContents\n00:01 com google common collect MinMaxPriorityQueueTest_gwt|testRemoveAt_exhaustive\n00:02 com google common collect MinMaxPriorityQueueTest_gwt|testRandomRemoves\n00:03 com google common collect MinMaxPriorityQueueTest_gwt|testExhaustive_pollAndPush\n00:06 com google common collect MinMaxPriorityQueueTest_gwt|testIteratorTester\n00:06 com google common collect MinMaxPriorityQueueTest_gwt|testIteratorTesterLarger\n00:11 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_smallHeapsPollFirst\n00:11 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_smallHeapsPollLast\n00:16 com google common collect MinMaxPriorityQueueTest_gwt|testHeapIntact\n00:17 com google common collect MinMaxPriorityQueueTest_gwt|testRandomAddsAndRemoves_duplicateElements\n00:19 com google common collect MinMaxPriorityQueueTest_gwt|testRemoveAt\n00:25 com google common collect MinMaxPriorityQueueTest_gwt|testRandomAddsAndRemoves\n00:48 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_mediumHeapsPollFirst\n00:52 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_mediumHeapsPollLast\n02:02 com google common collect MinMaxPriorityQueueTest_gwt|testCorrectOrdering_randomAccess\n\n
993,     Prepare for release 23 4 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=175016465\n  
994,     Automated g4 rollback of changelist 174856751 \n\n*** Reason for rollback ***\n\nBreakage \n\n[ \n\n*** Original change description ***\n\nAdd Files fileTraverser() \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174874052\n  
995,     Automated g4 rollback of changelist 174865821 \n\n*** Reason for rollback ***\n\nBreakage \n\n[ \n\n*** Original change description ***\n\nAdd MoreFiles fileTraverser() \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174868235\n  
996,     Add MoreFiles fileTraverser() \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174865821\n  
997,     Add Files fileTraverser() \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174856751\n  
998,     Remove no-op check \n\nThe only way for the current port to be equal to defaultPort is if it s a valid port  That s already covered by the hasPort() check \n\n
999,     Support for empty ArrayTable \n\nI re-wrote the documentation as best as I could \n\nI may add support for 0×N in a follow up \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174703945\n  
1000,     Fix range typo in comments of subRangeMap \n\n
1001,     Make all  Tester  classes *end* with  Tester   and simplify our exclusions accordingly \n\n(We might be able to fully switch to glob-based  java includes/excludes now  rather than regex-based  class includes/excludes  but  class makes more sense  since Maven is really looking for classes  not source files  and I don\ t really feel like running the tests yet more times to make sure that I didn\ t accidentally exclude something new )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174501688\n  
1002,     Run nested classes for real this time \n\nI had thought that CL 157867713 accomplished this  but it didn\ t  My CL description there says that I tried both an <exclude> approach and a %regex approach  and only %regex worked  But I just reran tests before and after that CL (with both Maven 3 5 0 and Maven 3 1 1)  and the CL makes no difference in the number of tests run  and in particular it doesn\ t run nested tests \n\nMy theory is:\n- I inserted a fail() call into a *specific* test and looked for the failure  rather than looking at the total number of tests  That still isn\ t a complete explanation  of course  because that failure should have happened in both cases or in neither  So probably also   \n- I had both <exclude> and a *different* %regex value present at one point  and *that* was enough to run this particular nested test \n- Then I removed <exclude>  I assume because I got confused about what I was testing \n- I also removed the fail() call \n- Finally  I changed the %regex value to avoid running AbstractPackageSanityTests and other classes that don\ t end in  Test   If I had still been running nested classes at this point  still had the fail() call present  and still been looking for the failure  I would have found that it was no longer running \n\n(Update: Alternative simpler theory: The test I inserted the fail() call in was a FooTest class nested inside a BarTests class whose suite() method adds FooTest  This test would not have run originally (because  BarTests  doesn\ t match  **/*Test java  and the FooTest class is nested and thus excluded)  But it would have run during my initial testing of the new CL because I originally included *Tests as well as *Test  But then I removed the *Tests part because I didn\ t see any top-level classes of that name other than the problematic PackageSanityTests classes  At that point  I didn\ t retest the original failure  Unfortunately  my  bash_history cuts off right around the time of the original CL (but that\ s another story    :)) )\n\nAs best I can tell:\n\n- The old  **/*Test java  *does* run some nested test classes *if* I add <excludes>  Even though Maven purports to accept the name of a  java file  it appears to be internally turning it into a class name  so it can match nested classes that don\ t have a top-level source file of their own \n- But it doesn\ t run *all* nested tests  since some of their names don\ t fit the  FooTest  pattern  Specifically  it runs the same set of tests as the existing %regex filter \n\nSo it seems that we don\ t need %regex at all  But there\ s a catch: Maven now tries to run various nested classes that aren\ t supposed to be run as tests  And the easiest way to get the correct set of classes is to use regex after all \n\nI haven\ t spent a ton of time trying to find the absolute most correct set of tests  but the filters in this CL should be pretty close  The filters include everything  whether a top-level class or nested class  with a new documented exclusions \n\nguava-tests:\nbefore: Tests run: 833248  Failures: 0  Errors: 0  Skipped: 0\nafter: Tests run: 837060  Failures: 0  Errors: 0  Skipped: 0\n\nguava-testlib:\nbefore: Tests run: 118427  Failures: 0  Errors: 0  Skipped: 0\nafter: Tests run: 850859  Failures: 0  Errors: 0  Skipped: 0 [mostly from running OpenJdk6*Tests (OK  those names are misnomers now  but whatever :)) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174501246\n  
1003,     Remove redirectTestOutputToFile from guava-testlib configuration \n\nWe already removed it from guava-tests when moving it to the parent pom (CL 158738701)  but I missed that we d added it here (CL 92277616) after we d added it to guava-tests (CL 84561967) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174497867\n  
1004,     Don\ t issue a warning for the lack of srcs in the  main  guava-tests jar \n\nIt appears that I need up update maven-jar-plugin to access this new option \n\nBefore:\n[WARNING  JAR will be empty - no content was marked for inclusion!\n\nAfter:\n[INFO  Skipping packaging of the jar\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174471751\n  
1005,     Wait longer for the interrupt to happen \n\nEvidently our current wait wasn t long enough for at least one Travis run:\n   org/google/guava/jobs/296430665\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174385968\n  
1006,     Optimize ImmutableCollection Builder addAll(ImmutableCollection) to use System arraycopy when possible \n\n
1007,     Actually export print_surefire_reports sh \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174366533\n  
1008,     Run tests in a deterministic order \n\nWe just had a failure that depends on test execution order  It wasn t too hard to figure out (and would have been even easier with the output that I m adding in CL 174361258)  but determinism is a good thing that may help us in the future \n\n(It *might* also bring us closer to the Bazel test-runner behavior  but I haven t actually checked  And anyway  we shard some of our Bazel tests  so even if both systems now use the samer order  they might be executing different subsets of tests  so they still might not show the same errors )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174365332\n  
1009,     Print the actual output of failed tests \n\nLuckily  last time I was able to guess at the cause specifically because it was an  error  and not a  failure  \nAnd typically we\ d be able to reproduce the failure by running locally  though I\ m not sure if that\ s the case here because it depends on test ordering    which is currently dependent on the filesytem\ s order of files  but I\ ll deal with that in a separate CL \n\nThis appears to be the best solution:    com/a/19685036/28465\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174362932\n  
1010,     Clear the interrupt bit at the end of the test \n\nThis fixes the failure in    org/google/guava/jobs/296270564  in which get() was throwing InterruptedException \n\n
1011,     Make a small change to README md to make it simpler to auto-update \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=174357681\n  
1012,     [guava concurrent  Upstreamed a modified form of the modified interruption behaviour from a fork of SerializingExecutor  Documented and tested the behaviour thoroughly \n\n
1013,     Remove @GwtCompatible annotations from classes in the hash\npackage  which have no corresponding  gwt xml file \n\nFixes #2983\n\n
1014,     Add private constructor to Traverser \n\n
1015,     In Java 7 branch  don t bother using Iterators forArray in RegularImmutable List Set    The default ImmutableList listIterator implementation amounts to the same thing  an AbstractIndexedListIterator delegating to the array \n\nEffects on ImmutableSetProGuard:\n22598 bytes => 20871 bytes\n17 classes => 15 classes\n147 methods => 144 methods\n\n
1016,     Fix links to JSR305  and start linking to JDK 9 \n\nThe main problem with the JSR305 links is that the JDK -link argument was  claiming  the javax annotations package  This was happening for 2 reasons:\n- <detectJavaApiLink> defaults to true  so Maven adds its own -link (or -linkoffline  not sure) for the JDK  So I unset it \n- We manually specified a -link argument  and Maven\ s command-line order puts -link before -linkoffline (which  oh  we\ re now using -- see below)  So I made the JDK a -linkoffline argument  too  which is still possible when we\ re pulling the package-list from online \n\nThere\ s an additional problem  which is that Javadoc (or Maven? I forget) tries to download    javadoc io/com google code findbugs/jsr305/3 0 1/  which gives an access denied error  even though it needs only the package-list file in that directory  which downloads fine  As a fix  make our own local copy of that package-info file  I\ ve also done that for j2objc-annotations  though currently none of its annotations are @Documented  so it\ s not doing us much good yet \n\nThen  in the process of switching to a manual -link for the JDK  I lost JDK links  It turns out that Javadoc doesn\ t like the http links to the Oracle site  even though it\ s fine with http links from other sites  I switched to https (and did the same for the other projects while I was there)  and I posted this on    com/q/29867384/28465#comment80906399_29867384 to hopefully help anyone else in this situation  (I\ ll also try to ask our Java platform team about fixing the javadoc man page )\n\nConveniently  the switch to a manual -link also lets us choose which version of the JDK to link to  It seems like Java 9 makes the most sense   ? It\ s true that we promise compatibility with Java 8  but I think the normal thing would be to link to the newest version  I see in particular that we linked to Java 7 from the backport  That\ s defensible  but it\ s a bit weird: The primary target for the backport is Android  and we target a  Java-6-like  version of the Android SDK  The only  Java-7-like  thing we do is use language features like the diamond operator  The Java 7 link does make sense for actual Java 7 users  but I still think we\ re likely better off linking to JDK 9 Javadoc and letting users look at @since when they want  This should also help in cases in which we want to link to a newer type along the lines of  If you can use java util function Function  do so  \n\n(Oh  and while I was there  I added a comment to explain why we *also* need JDK sources  as I\ d forgotten )\n\nFixes    com/google/guava/issues/2965\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=173688451\n  
1017,     Add @since tags to some nested types \n\nI don t know if I got them all  but this is probably at least a majority \n\nTODO(cpovirk): Consider whether to redundantly put @Beta on nested types  The Beta checker consults enclosing types automatically  but it might be nice to have the info directly in rendered Javadoc \n\n
1018,     Update readme to show new current version 23 3 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=173589977\n  
1019,     Upgrade GWT version to 2 8 2  plus:\n\nAutomated g4 rollback of changelist 173434289 \n\n*** Reason for rollback ***\n\nThe bug isn t in HtmlUnit; it s in the old version of GWT (2 8 0) we were running against externally \n\n*** Original change description ***\n\nDetect HtmlUnit s broken sorting  and skip our tests that depend on proper sorting  at least when running our GWT tests in the open-source build \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=173560372\n  
1020,     Add Referrer-Policy to HTTP Headers \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=173526011\n  
1021,     Set all @since NEXT to @since 23 3 \n\n
1022,     Detect HtmlUnit s broken sorting  and skip our tests that depend on proper sorting  at least when running our GWT tests in the open-source build \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=173434289\n  
1023,     Avoid using WeakSafeReadWriteLock when not using weak references\n\nThis avoids needing to create a wrapper object every time we attain the lock \n\n
1024,     Deprecate [Binary TreeTraverser \n\n
1025,     Use whichever version of nextDown is available \n\n(followup to CL 158434703 to make the Android tests runnable under Java 9)\n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=172804202\n  
1026,     Fix minor spelling errors in tests \n\nFixes #2973\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=172766537\n  
1027,     
1028,     Add the notion of RegistrySuffix to InternetDomainName \n\n
1029,     Using Object instead of a specific type irritates some thread safety tests   Fix that \n\n
1030,     Add test for a graph with a single root \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=172477925\n  
1031,     Traverser: Throw IAE if startNode is not part of the graph and add tests for empty graph case and disjoint trees (forest) case \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=172443426\n  
1032,     Strip the public from ListenerCallQueue Event in open source   It s not actually visible  anyway \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=172361815\n  
1033,     Fix Striped lazyWeakReadWriteLock so that holding on to just the read or just the write lock will not allow the ReadWriteLock to be garbage collected  which many users find surprising \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=172355708\n  
1034,     Update hasPublicSuffix javadoc\n\n google  is a public suffix  and  google foo  is under public suffix  foo   Therefore hasPublicSuffix() should have returned true for both of them  In fact both TLDs ( google and  foo) are owned by Google Registry  i  e  us!\n\nI tested calling InternetDomainName from( google ) hasPublicSuffix()  which returns true as expected  Same goes for  google foo  \n\nI suspect this javadoc has not been updated after the last round of gTLD expansion  This method really should only return false for domains that are under nonexistent TLDs  like  google invalid   or fake TLDs themselves  like  invalid  (see    wikipedia org/wiki/ invalid) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171993370\n  
1035,     Update AtomicDouble in Java 7 to use AtomicLong directly instead of AtomicLongFieldUpdater   This is a relatively simple way of protecting against bugs like the Samsung bug  and clm@ and I agreed that the simplification over what e g  AbstractFuture has had to do was worth the extra allocation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171989893\n  
1036,     Update latest release to 23 2 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171972306\n  
1037,     Update hardcoded digit() and invisible() from Unicode 6 3 to Unicode 9 \n\n
1038,     Remove unnecessary volatile; this boolean value is only relevant if the executor runs the provided runnable inline  which means that the write will always be visible to the read in the catch() statement \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171882510\n  
1039,     Make the copying done for guava-gwt not verbose \n\nThis is the only thing I haven t been able to suppress by using -q or a flag to suppress output for specific plugins  It might be there s some flag for the antrun plugin that could be used in some way to make this not verbose  but I m not sure what (and to me it doesn t seem like there s much need to see this output anyway) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171879805\n  
1040,     Update deprecation messages for the CharMatcher constants to match the new deprecation messages on the factory methods while still suggesting that the factory methods be used rather than the constants if needed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171869554\n  
1041,     Don t log until static state is fully set up  This prevents a (hypothetical  to my knowledge) bug where a device exhibiting the samsung reflection bug would fail to fall back if an installed logger called a Futures method inline \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171857899\n  
1042,     Document that negate() @Overrides under Java 8 but not under Java 7 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171832549\n  
1043,     Deprecate matchers which cannot work as expected because the API does not support supplementary code points  Clarify some API docs  Point to ICU4J for an actual Unicode library \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171821078\n  
1044,     Fix links \n\nThe targets are manual <a name> anchors  not methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171819037\n  
1045,     ValueGraphTest java: add a few checks to make sure that we re properly exercising both null and non-null default values \n\nThis addresses the most recent suggestion in GitHub issue #2924 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171818169\n  
1046,     Automated g4 rollback of changelist 163355688 \n\n*** Reason for rollback ***\n\nMaven sees the JRE version as the newest now:\n   herokuapp com/maven-central/com google guava/guava/badge svg\n\n*** Original change description ***\n\nRemove Maven version badge from README \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171717363\n  
1047,     Expand BiMapTestSuiteBuilder s tests for setValue calls on entries (which get run on both forward and backward BiMaps) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171716221\n  
1048,     Expand BiMap test suite for forcePut operation  and fix a newly revealed bug in the HashBiMap status quo \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171699933\n  
1049,     Fix bug where ImmutableSortedMap could accept a null key/value pair \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171692711\n  
1050,     Update Public Suffix data \n\nThe copy is updated whenever Chrome s copy is updated  which is\ntypically every 6 weeks  Star the following to watch Chrome s updates:\n\n   chromium org/p/chromium/issues/detail?id=610495\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171689826\n  
1051,     Implement Traverser forTree() depthFirst*() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171687201\n  
1052,     Implement Traverser forTree() breadthFirst() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171648476\n  
1053,     Rollback [  for AtomicDouble(Array) that added jdk5 support \n\nFixes    com/google/guava/issues/1996\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171547765\n  
1054,     Add JPMS module name\n\nCloses    com/google/guava/pull/2961\nFixes    com/google/guava/issues/2920\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171539196\n  
1055,     Make sure that local task reference is retained in objc\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171467091\n  
1056,     Handle InheritableThreadLocals correctly on Java 9 \n\nThe internal Finalizer class is used by FinalizableReferenceQueue  In order to avoid holding a reference to the ClassLoader that loaded the class  it is necessary to avoid inheriting any ThreadLocals in the thread running the Finalizer code  Previously  we did this with a nasty hack accessing a private field in Thread  Although that field still exists in Java 9  private accesses like these are not allowed by default  This particularly access is also not needed on Java 9  since there is now a Thread constructor with a boolean parameter that says whether to inherit ThreadLocals  So we use that constructor if it is present  in preference to the field access \n\nFixes    com/google/guava/issues/2723 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171212577\n  
1057,     All javadoc examples now use the same example graph (also matches the one in the unit test) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171154720\n  
1058,     Documentation improvement: Clarify disambiguities around post-order/pre-order \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171152967\n  
1059,     ValueGraph: fix implementation of edgeValueOrDefault() \nAlso fixed tests to guard against similar future regressions \n\n(This fixes a regression that was introduced when we temporarily replaced this method with edgeValueOrNull() ([  and then failed to restore the original semantics when we restored the original method ([   Oops )\n\nRef: GitHub issue #2924\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=171145586\n  
1060,     Update README to refer to HEAD-jre/android-SNAPSHOT for the snapshot versions \n\nAlso update the URLs for snapshot Javadoc and JDiff \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170914305\n  
1061,     Update the farmHashFingerprint64() javadoc to specify how FarmHash\ s numeric fingerprint is encoded by HashCode#asBytes() \n\nThe HashFunction interface demands that an implementation output bytes [1   But FarmHash\ s Fingerprint64() is defined (by its C++ reference implementation) as returning a 64 bit unsigned number and farmHashFingerprint64() doesn\ t specify how this number is encoded by HashCode#asBytes()  This change will assure users that HashCode#asLong() from Guava\ s implementation of FarmHash will yield the same value as would be returned by farmhash::Fingerprint64() on the same input  The current  byte-wise identical to C++  language isn\ t helpful because again  C++ FarmHash returns a uint64_t not bytes and the C++ language doesn\ t specify how this value is encoded in memory \n\nNo code changes are needed because the unit tests already compare the output of #asLong() with golden values \n\n[1  The HashCode abstraction is nice but #asLong() and #asInt() are both are defined in terms of #asBytes()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170879437\n  
1062,     Implement Traverser forGraph() depthFirst*() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170856993\n  
1063,     Update  current release  to 23 1  Remove API diffs that are available from the release page \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170739806\n  
1064,     Remove removal dates for non-@Beta deprecations \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170507937\n  
1065,     Document that we re no longer removing stable APIs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170502671\n  
1066,     For clarity  re-apply @Beta to the CharMatcher constants \n\nWe deprecated the CharMatcher constants back when they were @Beta  Then we removed @Beta from the class  Because these methods were never present as non-@Deprecated  non-@Beta APIs  and because they are expensive to initialize on Android  we\ ll still remove them \n\nSince we\ re removing them  it makes sense to put our  We might remove this  annotation them  Doing so should make things clearer to humans  and it should allow tools to identify usages of these APIs to warn about possible breakages \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170502670\n  
1067,     Remove CountDownLatch emulation\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170466397\n  
1068,     Fix Escaper java comment typo \n\nFixes    com/google/guava/pull/2955\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170426933\n  
1069,     [guava concurrent  Removed the now-unused suspend() and resume() methods from SequentialExecutor  Removed the special-case visibility  Marked SequentialExecutor final  Removed the now-unused SerializingExecutor migration interface  Updated Javadoc to remove references to the now-gone methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170383728\n  
1070,     Minor noop updates to Future and TimeUnit in preparation of moving \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170376409\n  
1071,     We test on Ice Cream Sandwich now  not Gingerbread \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170348376\n  
1072,     Update Verify java @since NEXT tags to 23 1 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170346041\n  
1073,     [guava concurrent  Updated a comment in ListenerCallQueue to point at SequentialExecutor instead of the deprecated SerializingExecutor wrapper interface \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170335851\n  
1074,     [guava concurrent  Removed the executeFirst() method from SequentialExecutor  and its test case  Switched the internal representation of the task queue back to Queue from Deque \n\nThe method was never public  and is no longer used in the depot \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170244464\n  
1075,     Update set_version sh to handle new versioning scheme and ignore snapshot versions since those are no longer chaning \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170242268\n  
1076,     Fix some random Error Prone warnings \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170241825\n  
1077,     Update @since tags to @since 23 1 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170234714\n  
1078,     Update Preconditions overloads that were added in 20 0 to have @since 20 0 and new Verify overloads to have @since NEXT \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170230384\n  
1079,     Change Futures dereference removal from Guava 25 0 to January 2018 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170218859\n  
1080,     Change  @since 24 0  to  @since NEXT  \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170113877\n  
1081,     Change version number in pom files from 24 0 to HEAD(-jre/android-SNAPSHOT) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170103675\n  
1082,     Fixed a typo in the Predicates class documentation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170083413\n  
1083,     Slightly bump the fpp to prevent OOM under JDK9 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170065907\n  
1084,     Fix Guava version number re  BloomFilter thread safety \n\nFixes    com/google/guava/issues/2949\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=170060213\n  
1085,     Make common collect spliterators backed by an int-indexed function correctly splittable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169941103\n  
1086,     Throwables#lazyStackTrace unsupported on IBM JDK 6\n\nFix addresses a problem occurred on IBM JDK 6  To ensure\nthat we can call underlying method  Throwables#getSizeMethod \nto get  stack size  first a smoke test  with dummy exception \nOnce method executed with success  it is safe to return it for\nfurther usage \n\nFixes #2947\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169910803\n  
1087,     common graph: fix formatting error in Graph/ValueGraph/Network Javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169869396\n  
1088,     Implement Traverser forGraph() breadhFirst() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169699092\n  
1089,     Traverser java: tweak the forGraph() and forTree() documentation to make memory use a bit more clear \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169556295\n  
1090,     Revert parts of CL 33393713 that changed Splitter on(   ) tests to redundant Splitter on(\  \ ) tests \nUse COMMA_SPLITTER in more remaining Splitter on(\  \ ) tests \n\nFixes    com/google/guava/pull/2946\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169545037\n  
1091,     Fix space complexity in forTree() documentation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169403578\n  
1092,     Add the same overloads that Preconditions has in Verify \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169291293\n  
1093,     Make propagateCancellation helpers @GoogleInternal \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169280037\n  
1094,     Add sortDescending methods in common primitives \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169267470\n  
1095,     Add @GoogleInternal propagateCancellation to Futures \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169256636\n  
1096,     Fix documentation for checkArgument and checkState\n\nBoth claim\n\n@throws NullPointerException if the check fails and either  @code\nerrorMessageTemplate  or  @code errorMessageArgs  is null (don\ t let this\nhappen)\n\nbut this doesn\ t actually happen - the message is created using\nPrecondition format that handles null values without throwing \n\nThis is more of a concern for the  don\ t let Args be null  because having\npotential null args is in fact a legitimate usecase \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169252415\n  
1097,     Merge pull request #2942 from google/sync-master-2017/09/18\n\nMoe sync  
1098,     Propagate close for to the inputs of Streams zip and Streams mapWithIndex\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=169073180\n  
1099,     Add sorting methods for the unsigned primitives in common primitives \n\n
1100,     Add reverse methods to all primitive arrays in common primitives \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168873513\n  
1101,     Clarify some docs on Ordering+Comparators\n\nFixes    com/google/guava/issues/2744\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168709191\n  
1102,     Add Traverser API without implementation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168700059\n  
1103,     Fix tests that assume Class getClassLoader() returns a URLClassLoader so that they can call getURLs() to instead parse the  java class path  system property \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168584444\n  
1104,     Make ClassPath search the contents of the  java class path  system property for the system class loader in Java 9 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168478543\n  
1105,     Add note about nodes being valid Map keys to PredecessorsFunction and SuccessorsFunction \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168384390\n  
1106,     The documentation of PredecessorsFunction and SuccessorsFunction now makes it clear that null nodes are forbidden \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168363735\n  
1107,     Fix edge case in EnumMultiset remove\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168298209\n  
1108,     Add @CanIgnoreReturnValue to EnumMultiset#add\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168270965\n  
1109,     Rewrite EnumMultiset to be directly backed by an E[  and an int[   avoiding allocation of boxing objects \n\nIt turns out that copying the enum constants array allocates less  requires less code  and avoids boxing overhead \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168250122\n  
1110,     Fix parameter comments that don t match the formal parameter name\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168222299\n  
1111,     Migrate Executor-less Futures callback methods to the ones with an Executor  while applying MoreExecutors directExecutor() for identical behavior \n\nFor more information  see [ \n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=168196211\n  
1112,     MOE strip the  public  from SortedLists\  member enums \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=167911908\n  
1113,     Remove @CanIgnoreReturnValue from Listening*ExecutorService \nUsers should do something with the returned Futures  if only log failures \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=167801778\n  
1114,     Set version numbers to 24 0-jre-SNAPSHOT \n\nThis makes Maven consider 24 0-jre to be  newer  than 24 0-android \nThat\ s preferable  as discussed in    com/google/guava/issues/2914     com/google/guava/issues/2839  and    google com/document/d/1NYGbfz56C0Oh4IGymXjeQUVK4FcRiqDbpc4vGLnDMrY/edit#\n\n
1115,     Remove redundant calls to NullPointerTester#setDefault\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=167536897\n  
1116,     [guava concurrent  Renamed SerializingExecutor to SequentialExecutor  Turned SerializingExecutor into a proxy to SequentialExecutor so two Components classes that directly use it have a chance to catch up \n\nComponents CL to change Components usages should be independent \n\n
1117,     Streams concat: Propagate close to sources streams\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=167296331\n  
1118,     fix typo\n\nFixes #2927\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=167272653\n  
1119,     Add java util Optional and its derivatives (OptionalInt  OptionalLong  OptionalDouble) to ArbitraryInstances and FreshValueGenerator \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=167165795\n  
1120,     Update Guava s dependency on Truth to 0 35 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=166834737\n  
1121,     Javadoc update when delegate throws exception \n\nFixes #2916\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=166719697\n  
1122,     Update Public Suffix list \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=166092121\n  
1123,     ImmediateFuture toString() implementation to provide the returned value or exception \nProvides for all ImmediateFutures implementation the same syntax that AbstractFuture uses \n\nIt\ s especially convenient during debugging of mocked asynchronous gRPC services \n\nFixes bug in AbstractFuture#toString in GWT that caused wrong representation:\n Class$S413@205[status=SUCCESS  result=[FAILURE  cause=[Class$S6    due to ongoing\nbuilder being already called when getDone() throws exception \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165925433\n  
1124,     Specifically instruct people who are calling dereference(transform(   )) to call transformAsync(   ) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165749798\n  
1125,     [guava concurrent  Added MoreExecutors sequentialExecutor()  and its documentation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165747869\n  
1126,     Use diamond for collect tests \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165711604\n  
1127,     Use diamond operator for all test targets except  collect \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165710863\n  
1128,     Remove a dangling closing bracket from Javadoc\n\nThere s a dangling closing curly bracket in the Javadoc example of\nMoreObjects toStringHelper()  Remove that in the main and the android\n\nFixes #2917\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165704738\n  
1129,     catch (SomeException e)  \n  // Expected\n \n\n=>\n\ncatch (SomeException expected)  \n \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165703702\n  
1130,     Store the CancellationException class (as we do in other tests)  not the cause of the CancellationException \n\nThe cause is null nowadays  so we were presumably never taking the if() branch at line 467 \nThat meant that we weren t actually checking isCancelled() \nA comment also suggests that we could theoretically have seen test failures because it was possible for setFuture to also succeed  but I don t think we ve seen that in practice  I have spent 0 seconds thinking about whether there s anything deeper to ponder here \n\n(I noticed this while migrating to multicatch  This CL also adopts multicatch in one place where it does make sense )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165647160\n  
1131,     Multicatch!\n\nThis should be fine for Android  even old versions  as I understand it  since dex is smart enough to turn it into something that works with any version \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165645769\n  
1132,     Use given throwable as the cause for the IAE that s thrown during loop\ndetection \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165643812\n  
1133,     On second thought  back out a few diamond operators in the mainline when they don t also work with Java 7 type inference \nThis minimizes diffs between the branches \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165608703\n  
1134,     Use diamond operator for rest \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165581940\n  
1135,     Use diamond operator in base+cache+concurrent \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165453531\n  
1136,     Use diamond operator in collect\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165450412\n  
1137,     Update Guava s JUnit dependencies to 4 11 (the version in [ )\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165313267\n  
1138,     Fix @since tags for collectors that didn t make 23 0 \n\n(pointed out in    com/google/guava/issues/2750#issuecomment-321129730)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165311302\n  
1139,     Add ImmutableSet builderForExpectedSize   Currently  the implementation is that if and only if a size is specified up front  the builder starts generating the hash table online and deduping elements \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165233245\n  
1140,     Fixes #2905\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=165000871\n  
1141,     Polishing\n\nFixes #2903\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164986539\n  
1142,     Fix javadoc link by including package name \n\nFixes #2904\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164983301\n  
1143,     Add Immutable Map BiMap  builderWithExpectedSize API \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164881633\n  
1144,     Test that a failed/cancelled input doesn t cause us to cancel other inputs \n(It s debatable whether that s the long-term behavior we want  but we should at least document that current behavior properly )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164874228\n  
1145,     Add ImmutableList builderWithExpectedSize API \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164872795\n  
1146,     common graph: remove j2cl annotations  as no one s using it from j2cl  it has no immediate prospective users  and it doesn t support Network-related capabilities anyway \n\nBonus cleanup: remove TODOs for adding documentation  as the indicated bug has been closed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164867192\n  
1147,     In ImmutableCollection ArrayBasedBuilder  keep a forceCopy flag to allow builder types to force a copy even if the entire array has not been used \n\nThis syncs the java7 implementation to the current implementation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164788429\n  
1148,     Fix typo in AbstractService log message \n\nFixes #2894\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164616826\n  
1149,     Ignore the lazyStackTraceIsLazy test on Java 9  for now \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164604079\n  
1150,     Fix broken Javadoc link in UnsignedLongs toString(long)\n\nFixes #2895\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164593709\n  
1151,     Suppress tests broken by CL 164180554 s emulator upgrade to API level 15 \n\nIt seems like that particular version of Android might not GC as aggressively (perhaps specifically for variables in the current method that have been nulled out  perhaps specifically when GC isn t strictly required -- I don t know) \nThe tests pass under the newest emulator  though  so I don t think there s a bug for us to report  Hopefully it s just a quirk of GC and not some strange way that some versions of Android are actually retaining a reference (not that we could necessarily do anything about it  anyway) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164593083\n  
1152,     Update Guava README for 23 0 and update snapshot versions \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164477814\n  
1153,     Catch NoClassDefFoundError and generic Error  the types thrown by JVM8 and by modern versions of Android \n\nFixes    com/google/guava/issues/2888\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164271678\n  
1154,     Avoid dependency on CharMatcher in BaseEncoding \n\nEffects on BaseEncodingProGuard:\n82416 bytes => 69250 bytes\n33 classes => 16 classes\n198 methods => 136 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164041197\n  
1155,     Update removal data for dereference() \n\nIts deprecation CL came just after the 23 0-rc1 cutoff \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=164024314\n  
1156,     Minor fix in comment \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163918392\n  
1157,     Change CacheBuilder constructor modifier to private  and\nrewrite corresponding tests\n\nFixes #2883\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163868156\n  
1158,     Shuffling from internal-only change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163850602\n  
1159,     Make ListenableScheduledFuture GwtCompatible \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163737479\n  
1160,     Avoid importing ImmutableList from Ordering \n\nEffects on OrderingProGuard ([ 79684 bytes => 64945 bytes\n28 classes => 15 classes\n215 methods => 124 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163721091\n  
1161,     Add collectors for ImmutableRangeSet and ImmutableRangeMap \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163522365\n  
1162,     Add notes about Java8 to UnsignedBytes  UnsignedInts  and UnsignedLongs \n\nFixes    com/google/guava/issues/2817\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163467425\n  
1163,     Remove Maven version badge from README \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163355688\n  
1164,     Mention 23 0-rc1 in Guava README \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163219156\n  
1165,     Use diamond operator \n\nFixes #2875\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=163205176\n  
1166,     Take advantage of suppressed exceptions in ServiceManager now that Guava is on Java 8 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162991053\n  
1167,     Remove some methods that are scheduled for removal in 23 0  along with one that was apparently scheduled for removal in 21 0 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162962688\n  
1168,     Fix an interruption bug from CL 162649353  but do so in a way that doesn t reintroduce yet another bug that that CL fixed \n\nSpecifically  go back to setting the runner thread before checking isDone() (so that we can t end up with a task that was cancel(true)ed but runs without being interrupted) \n\nBut also  if aborting because isDone()  spin until we ve received the interrupt  just as we do during normal completion (so that we don t end up interrupting the thread after the task is done) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162941603\n  
1169,     Warn a little more about weakKeys resulting in == key comparisons  even in the asMap view \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162780454\n  
1170,     Fix a bug in AbstractFuture setFuture\n\nIf the future being assigned was cancelled then there could be slightly different behavior based on whether or not the wasInterrupted bit is set and whether or not it was a TrustedFuture   The fix is to never propagate the wasInterrupted bit from setFuture \n\nThis also fixes the potentially confusing behavior where wasInterrupted could be true but interruptTask() would never be called \n\nFor all these reasons  it remains the case that setFuture can never cause interruptTask to be invoked \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162767529\n  
1171,     Super-minor cleanup to AggregateFuture\n\naccess the wasInterrupted local instead of calling the method again\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162687910\n  
1172,     Plug ImmutableIntArray in Ints  etc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162665962\n  
1173,     Forgot to specify equals() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162665061\n  
1174,     Add @ForOverride to AbstractFuture afterDone now that    com/google/error-prone/issues/342 is fixed \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162662199\n  
1175,     Fix interruption leak in submitAsync and whenAllComplete() callAsync() \n\nThere are two bugs in the handling of TrustedListenableFutureTask:\n\n1  Returning an future that was cancelled with interruption calls setFuture()  which then calls interruptTask() on the output future - this then calls InterruptibleTask interruptTask()  which happily interrupts the thread that directExecutor execute() was called on \n\n2  The thread that InterruptibleTask runs on is referenced forever  and CombinedFuture nulls out its reference to InterruptibleTask in afterDone() - which is called after interruptTask  This means that if the setFuture() path is taken  then cancel(true) is called  the thread that called the callable will be interrupted  even after InterruptTask run() has returned \n\nIf we ve ever seen spurious InterruptedExceptions in production  this could be a cause - whenAllComplete() callAsync(callable  executor) cancel(true) can interrupt whatever thread callable was called on  even long after call() returns  If that thread is part of a pool (which it probably always would be)  then this would interrupt whatever unlucky task happened to be running on that pool thread later \n\nThis CL adds earlier nulling out of the InterruptibleTask in TrustedListenableFutureTask  as well as makes InterruptibleTask robust to having interruptTask called after runInterruptibly has returned  To avoid tasks interrupting themselves when they call setFuture of an interrupted and cancelled future  a new method allows subclasses to end the interruption window early - this should also somewhat reduce the race of directExecutor() listeners being interrupted \n\nAdditionally  by splitting CombinedFuture setValue() into 2 methods  this CL fixes the equivalent of    com/google/guava/issues/2254 for Futures whenAllSucceed/whenAllComplete \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162649353\n  
1176,     Use specialized spliterators for Primitives asList utilities   Addresses    com/google/guava/issues/2874  \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162417940\n  
1177,     Rollforward [  which was rolled back in [  because it\ncaused some tests using appengine to fail with IOExceptions when calling\nFileInputStream available()   The workaround in the rollforward is to not call\nthe method   The one case where we were calling it we had actually already\ncalled a similar method  so trying again doesn t seem valuable anyway \n\n*** Original change description ***\n\nImplement ByteSource asCharSource(charset) read() using the decoding string\nconstructor instead of streaming the contents into a StringBuilder \n\nthis allows us to avoid a number of copies that are currently happening for\neach character (1  into a temporary CharBuffer  2  into a StringBuilder  3 into\nthe String char[ ) and replace it with simply whatever is required by\nByteSource read() and the String(byte[   charset) constructor   For certain\nByteSource implementations (like FileByteSource) ByteSource read() can often\npresize the byte[  correctly and the string constructor can also do some things\nto guess at the correct array sizes and avoid copies in the common case \n\nBenchmarks have shown that this should improve the speed of Files toString\nsignificantly \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162275181\n  
1178,     Automated g4 rollback of changelist 162220754 \n\n*** Reason for rollback ***\n\napp-engine has a buggy implementation of FileInputStream available() which is throwing IOException\n\n*** Original change description ***\n\nImplement ByteSource asCharSource(charset) read() using the decoding string constructor instead of streaming the contents into a StringBuilder \n\nthis allows us to avoid a number of copies that are currently happening for each character (1  into a temporary CharBuffer  2  into a StringBuilder  3 into the String char[ ) and replace it with simply whatever is required by ByteSource read() and the String(byte[   charset) constructor   For certain ByteSource implementations (like FileByteSource) Byte   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162245286\n  
1179,     Add deprecation notice to Futures dereference\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162231445\n  
1180,     Implement ByteSource asCharSource(charset) read() using the decoding string constructor instead of streaming the contents into a StringBuilder \n\nthis allows us to avoid a number of copies that are currently happening for each character (1  into a temporary CharBuffer  2  into a StringBuilder  3 into the String char[ ) and replace it with simply whatever is required by ByteSource read() and the String(byte[   charset) constructor   For certain ByteSource implementations (like FileByteSource) ByteSource read() can often presize the byte[  correctly and the string constructor can also do some things to guess at the correct array sizes and avoid copies in the common case \n\nBenchmarks have shown that this should improve the speed of Files toString significantly \n\nfurther work should also be done for the normal CharSource read implementation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162220754\n  
1181,     Add submitAsync and scheduleAsync methods  to ease the deprecation of Futures dereference\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=162004818\n  
1182,     Short-circuit null check in Throwables#lazyStackTraceIsLazy\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161998907\n  
1183,     Update Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161899116\n  
1184,     Add @SafeVarargs to Predicates and(Predicate<? super T>   ) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161877904\n  
1185,     Shutdown the original executor in getExitingScheduledExecutorService \n\nThe shutdown hook thread names itself after the executor  presumably to aid in debugging   If the original executor does NOT shutdown quickly  looking at the thread dump shows an executor never created by application code \n\nInstead  give up a little of the wrapping safety of unconfigurableScheduledExecutorService  to make debugging easier \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161869256\n  
1186,     Optimize CharStreams copy to take advantage of known Readable/Appendable types \n\nThe most common Readable is a Reader which has good support for reading char arrays  the most common Appendable is either a StringBuilder or a Writer  both of which have good support for writing char arrays   Furthermore the default implementation of Reader read(CharBuffer)  is less than ideal (copies the characters an extra time) and the default implementation of StringBuilder append(CharBuffer) calls charAt() on every character (instead of trying to access the underlying array()) which incurs lots of bounds checks   Similarly Writer append(CharBufffer) calls toString() on the CharBuffer which incurs an extra copy   So depending on the combination of types involved we may copy the bytes 4 times instead of 2 \n\nBy adding specialized implementations we can avoid this overhead most of the time and deal with simple char arrays for our temporary buffers \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161868537\n  
1187,     common graph: create (package-protected) ForwardingValueGraph and ForwardingNetwork classes  and use those (and ForwardingGraph) to simplify the implementation of the Transposed* inner classes in Graphs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161856111\n  
1188,     Optimize CharSource wrap(CharSequence) for when the CharSequence is a String\n\nStringReader should be faster than CharSequenceReader in this case since it can\nuse the String getChars() method \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161843629\n  
1189,     ValueGraph java: remove bogus @since 23 0 on edgeValueOrDefault \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161824124\n  
1190,     ValueGraph java: restore edgeValueOrNull() to edgeValueOrDefault() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161738013\n  
1191,     Switch to using AtomicReference  since only one field needs CAS \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161675875\n  
1192,     Make RateLimiter create parameter order consistent \n\nFixes #2869\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161668959\n  
1193,     Fix >100 violation in ImmutableMap doc update \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161564762\n  
1194,     Add @since 23 0 to new (or with new return type) edgeValue methods in ValueGraph \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161545836\n  
1195,     Don t include the toString() of the future if it completes while the timeout expires \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161523026\n  
1196,     Add @SafeVarargs to Predicates or(Predicate<? super T>   ) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161477333\n  
1197,     Make documentation on iteration order more explicit \n\nImmutableCollection specified that each construction pathway would specify how it does ordering  but we didn t really follow through on that   Now  we\n\n- add more explicit documentation to the main construction pathways for the main immutable collections\n- specify in ImmutableCollection that it s usually insertion order\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161237788\n  
1198,     ValueGraph edgeValue*: change from\n* V edgeValue()  V edgeValueOrDefault()\nto\n* Optional<V> edgeValue()  V edgeValueOrNull()\n\nFixed Graphs inducedSubgraph() implementations so that it appropriately specifies the # of nodes in the induced subgraph as being the size of the supplied node Iterable \n\nFixed MoreGraphs inducedSubgraph() implementations so that the filtered nodes are being returned as Lists rather than Iterators  so that calculating their size doesn t exhaust the Iterator \n\nFixed the graph *Builder from() methods so that they are all uniformly enforcing types (this was causing MOE problems in conjunction with the expectedNodes() call \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161235517\n  
1199,     Throw IllegalArgumentException if a loop in the causal chain is detected in Throwables getCausalChain() and Throwables getRootCause() \n\nFixes    com/google/guava/issues/2866\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161233381\n  
1200,     Prepare common graph for GWT/j2cl usage \n\n1  Had to replace String format() uses  because it s not supported for j2cl \n2  Had to mark Network-related code as @GwtIncompatible because of uses of\n   java lang ref SoftReference  which j2cl cannot support \n\nNeeded as a step toward using common graph in JSCompiler \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161208004\n  
1201,     Fix some more broken  @link  comments \n\n(I didn t check that every referenced method exists  but this should be better than the status quo )\n\nMethodology:\nreplace_string  (\\100link(?:plain)? )([a-z [^\\n (  *[(  )   $1#$2 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161135720\n  
1202,     Fix broken  @link  comment in AbstractFuture \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161128242\n  
1203,     Remove static map allocation and map lookup in base Defaults \n\nFixes    com/google/guava/issues/2709\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161114331\n  
1204,     Update code google com link to github in Murmur3Hash32Test\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161087101\n  
1205,     Add an Automatic-Module-Name manifest entry \n\nFixes #2846\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161084009\n  
1206,     Add @since for pendingToString() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161082171\n  
1207,     Add cross-references to sibling Preconditions and Verify methods  to aid discoverability \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161036542\n  
1208,     Open up pendingToString()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=161027032\n  
1209,     Add simple `closed` and `closedOpen` ContiguousSet factories for int and long \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160847399\n  
1210,     Remove unnecessary from() calls for things that are already FluentIterables\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160622367\n  
1211,     Fix AbstractFuture toString()\ s message on futures that failed  Expanded unit tests to match the expected strings more completely \n\nBefore this change  SUCCESS  result=[  would be erroneously included in the output \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160576932\n  
1212,     hasEdge(): rename to hasEdgeConnecting()  remove @GoogleInternal annotation  and add to Network as well \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160455853\n  
1213,     Remove extra punctuation in single-sentence @return\n\nAs per [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160398233\n  
1214,     Propagate CL 160170507 s doc changes to the java7 branch \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160186624\n  
1215,     Add BloomFilter collector  now that common hash is forked   Finishes off    com/google/guava/issues/2810 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160170507\n  
1216,     Fix Javadoc missing  code  typos \n\nSpecifically  fix up occurrences of / @[A-Za-bd-hjkm-uw-z /\n\nThanks to    com/google/guava/commit/a3e5514784cfe739f9e3b28bb24bdb0e24711a9c#commitcomment-22758348\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160161267\n  
1217,     AbstractNetwork: add a functionally correct (if not super-efficient) implementation of edgesConnecting()  because it s easy to do wrong \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160155863\n  
1218,     Prepare for Java-8-specific changes to common hash \n\nThis happens to touch the executable bit of our files externally \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=160139425\n  
1219,     Only get values from Map in Maps immutableEnumMap once   Fixes    com/google/guava/issues/2854  \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159973292\n  
1220,     Update Guava to depend on Truth 0 34 \n\nThere s no immediate need  but I figure I might as well so that future users don t get confused when they try to use MultimapSubject containsExactly() or something \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159965728\n  
1221,     Fix doc which was incorrect in the null case  and add a few words about a behavior some users have been depending on (that it intercepts NPE and CCE) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159867183\n  
1222,     common graph tests: unify some duplicate constructs (enums  methods  constants) and put them in TestUtil java \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159856272\n  
1223,     Network java: fork edgeConnecting() for java7/Android:\n* current/   /Network java now provides\n  java util Optional<E> edgeConnecting(N  N)\n  E edgeConnectingOrNull(N  N)\n* java7/   /Network java now provides\n  E edgeConnectingOrNull(N  N)\n\nNeither current/ nor java7/ use common base Optional in external APIs any more \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159748595\n  
1224,     Fix typo in FluentIterable#stream javadoc\n\nFixes #2849\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159695686\n  
1225,     Stop claiming that Guava has only one dependency \n\nFixes    com/google/guava/issues/2855\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159573711\n  
1226,     Prepare common graph for Java-8-specific changes \n\nIt so happens that this makes a bunch of files no longer executable  They shouldn t have been in the first place  so that s good  It s not clear that we ll fix up our tools to stop making the rest of the files executable anytime soon  though \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159462625\n  
1227,     Marginally improve what Maven prints for javac errors (by upgrading maven-compiler-plugin) \n\nBefore:\n[ERROR  /home/cpovirk/clients/guava-black/guava/guava/src/com/google/common/reflect/Types java:[607 7  error: cannot find symbol\n\nAfter:\n[ERROR  /home/cpovirk/clients/guava-black/guava/guava/src/com/google/common/reflect/Types java:[607 8  cannot find symbol\n  symbol: class Overridez\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159271532\n  
1228,     Output  java util Map Entry  under Java 9  as the JDK does \nUnder previous JDKs  we continue to output  java util Map java util Map Entry   just as those JDKs do \n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159237707\n  
1229,     Don t fail tests just because we can t securely delete recursively \n\nI guess that the principled thing here would be for us to delete the individual files and directories manually  but that sounds like more effort than is really worthwhile \n\nFixes    com/google/guava/issues/2845\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=159220065\n  
1230,     Optimize murmur3_32 hashString(CharSequence  UTF_8) to unroll the Utf8 directly into the hasher rather than converting it to a byte array \n\nBenchmark results: Pure ASCII took 83% as much time   rare exotic  text took 43% as much time (!)  and everything in between took an in-between amount of time   Unnecessary garbage was reduced to zero \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158984049\n  
1231,     MutableGraph java: fix Javadoc link \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158972072\n  
1232,     Expand common hash ByteBuffer support  adding a default AbstractHasher hashBytes implementation and expanding HashTestUtils to test more about the hashing of ByteBuffers \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158901523\n  
1233,     Change implementation of Byte/CharSource isEmpty to avoid opening a stream when the size of the source is known to be >0 \n\nFixes    com/google/guava/issues/2843 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158854512\n  
1234,     Test Android code on Travis with two different environments to hopefully avoid timeouts\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158852632\n  
1235,     Have ImmutableMap go back to using a specialized singleton implementation for size = 1 maps \n\nBazel has made a pretty convincing argument that so many real usages of immutable collections have size = 1 that the tradeoff is worth it \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158849972\n  
1236,     Add toString() to some Future subclasses \n\nI opted for CANCELLED rather than CANCELED to match isCancelled() \n\nExample toString:\ncom google common util concurrent AbstractFutureTest$11@1ae369b7[status=PENDING  info=[setFuture=[com google common util concurrent AbstractFutureTest$10@6fffcba5[status=PENDING  info=[cause=[Someday         \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158789362\n  
1237,     Abstract common graph classes: add Javadoc warnings that methods implemented in these classes should not be overridden without cause \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158777768\n  
1238,     Recognize Java-9-style version strings \n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158747678\n  
1239,     Use a newer version of Mockito  as necessary for Java 9 \n\nApparently 2 8 40 is out  but currently we re internally upgrading to 2 7 19  so that seems like the safest thing to target  (But I m sure we ll get to 2 8 40 or later eventually  so maybe I m wasting time bothering with 2 7 19    )\n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158745717\n  
1240,     Move all surefire configuration to the parent pom \n\n(I got confused when I added an argLine in the parent pom (as part of Java 9 testing) and found it had no effect  apparently because it s overwritten in the child )\n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158738701\n  
1241,     Mark Immutable(Int|Long|Double)Array with the errorprone @Immutable annotation\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158732518\n  
1242,     Don t expect java ext dirs under Java 9 \n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158545119\n  
1243,     Skip static methods  like the forthcoming Set of \n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158475485\n  
1244,     Adding ByteBuffer support to Hashing APIs  Rollforward now that broken user is fixed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158447108\n  
1245,     Under Java 8  use Math nextDown instead of FpUtils nextDown \n\nFpUtils is going away in Java 9 \nWe d use Math under Java 7  too  but it s not present until Java 8 \n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158434703\n  
1246,     Update Javadoc plugin to a version that understands the Java 9 version scheme:\n   apache org/jira/browse/MJAVADOC-442\n\n(part of    com/google/guava/issues/2571)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158429834\n  
1247,     Add @ReflectionSupport to AggregateFutureState  AtomicDouble and InterruptibleTask \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158270892\n  
1248,     Automated g4 rollback of changelist 158168944 \n\n*** Reason for rollback ***\n\nNeed to fix some code that relied on the undefined behavior of calling put*() after hash() \n\n*** Original change description ***\n\nAdding ByteBuffer support to Hashing APIs \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158210614\n  
1249,     Adding ByteBuffer support to Hashing APIs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158168944\n  
1250,     Resurrect SingletonImmutableList on server side only \n\nBazel has apparently measured that in their applications  ~50% of ImmutableLists have size 1   This is significant enough that it s probably worth resurrecting the optimization to have a specialized implementation that just wraps the one element \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158164804\n  
1251,     Propagate cancellation for Futures inCompletionOrder\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158154825\n  
1252,     Disable some tests externally until GWT releases a version with the problematic bug fixed \n\nThe tests work fine in non-GWT mode  but we don\ t have a trivial way to say  run this everywhere except externally under GWT   so I\ m just stripping them entirely \n(In particular  I don\ t think  // MOE:insert @GwtIncompatible  works because we would stil generate a StreamsTest_gwt that refers to the removed methods  so it would fail to compile )\nThis ensures that we still run them internally in both modes  which seems more important than running them internally+externally but never under GWT (as @GwtIncompatible would do) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=158046739\n  
1253,     Reduce sizes of exhaustive/random MinMaxPriorityQueue tests; they re taking way too long \n\ntestHeapIntact and testExhaustive_pollAndPush each seem to take on the order of a minute and a half on Android  before this CL   After  they take ~1 sec \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157872566\n  
1254,     Fixes incorrectly-ordered arguments to calls to assertEquals\n([ \nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods  See\n[ \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157871496\n  
1255,     Run nested classes in the open-source build \n\nEvidently Maven looks only at top-level classes by default -- perhaps by scanning for  java files and then looking for the corresponding top-level classes?\n   apache org/surefire/maven-surefire-plugin/test-mojo html#includes\n\nI\ d found a suggestion here that I might just need to override the default excludes:\n   atlassian com/clover/using-clover-with-maven-+-surefire-test-+-inner-test-classes-285840787 html\nBut I couldn\ t find a way to get that to work -- which makes sense in light of the  java point above  I\ m guessing that the linked page is not actually trying to explain exactly how Maven skips nested classes  only that it does so at all \n\nThe syntax is documented here:\n   apache org/surefire/maven-surefire-plugin/examples/inclusion-exclusion html#Regular_Expression_Support\n\nThe regex here should match everything that the old default did  and it now pulls in nested classes  too  since it operates on  class files  as documented in the previous link  For the old default  see:\n   apache org/surefire/maven-surefire-plugin/test-mojo html#includes\n(The old default also includes Test* and *TestCase  but those don\ t appear to match any new test classes for us  so I didn\ t bother complicating the regex for them )\n\nCorrection: *Our* old value was  **/*Test java   since we set that manually \nThat dates back to CL 41635188 \nI\ m not sure why I thought that was the default at the time  but evidently the Maven docs of the day were just plain wrong  claiming that the defaults include only  IT  classes:\n   archive org/web/20130102062549/   apache org/surefire/maven-surefire-plugin/test-mojo html#includes\nAnyway  we were already omitting *Tests java \nI initially planned to include *Tests java  but then I discovered that this includes PackageSanityTests classes \nI *thought* I had seen all tests run successfully anyway  but now I\ m seeing failures[*   so I\ ve gone back to omitting PackageSanityTests classes \n(And  *Tests java  doesn\ t match any tests other than PackageSanityTests classes )\n\nContinuing to omit PackageSanityTests is reasonable enough  at least in the short term:\n\n- (minor) We sometimes want to run it in a different VM  That said  that problem is solvable in other ways  and we already elected to be lazy and skip it entirely:    com/google/guava/commit/cc2b970f45d28a9258dbd9c01fda97a4ba293c20 (Of course it turns out that we were skipping it entirely already  And in fact  that commit didn\ t intentionally remove PackageSanityTests; it just changed our build macros to reflect in the open-source build something that was already happening internally -- that PackageSanityTests wasn\ t part of our main test target (though it is run in a separate test target)  The commit\ s actual purpose was to avoid publishing some unrelated files )\n\n- We probably don\ t really want to run against benchmark classes  At best  doing so seems wasteful  And worse  it\ s causing failures  Likely AbstractPackageSanityTests should be configured to skip benchmarks  just as it today skips tests  But I\ d rather save that for yet another CL \n\nThe bottom line here might be that this is another reason to move from Maven to Bazel (at least assuming that Bazel\ s test runner is equivalent to our internal one)  cc=ronshapiro :)\n\n[* \njava lang NoClassDefFoundError: com/google/common/util/concurrent/FutureFallback\n\tat java lang Class getDeclaredConstructors0(Native Method)\n\tat java lang Class privateGetDeclaredConstructors(Class java:2673)\n\tat java lang Class getDeclaredConstructors(Class java:2022)\n\tat com google inject spi InjectionPoint forConstructorOf(InjectionPoint java:243)\n\tat com google inject internal ConstructorBindingImpl create(ConstructorBindingImpl java:96)\n\tat com google inject internal InjectorImpl createUninitializedBinding(InjectorImpl java:629)\n\tat com google inject internal InjectorImpl createJustInTimeBinding(InjectorImpl java:845)\n\tat com google inject internal InjectorImpl createJustInTimeBindingRecursive(InjectorImpl java:772)\n\tat com google inject internal InjectorImpl createJustInTimeBindingRecursive(InjectorImpl java:761)\n\tat com google inject internal InjectorImpl getJustInTimeBinding(InjectorImpl java:256)\n\tat com google inject internal InjectorImpl getBindingOrThrow(InjectorImpl java:205)\n\tat com google inject internal InjectorImpl getInternalFactory(InjectorImpl java:853)\n\tat com google inject internal FactoryProxy notify(FactoryProxy java:46)\n\tat com google inject internal ProcessedBindingData runCreationListeners(ProcessedBindingData java:50)\n\tat com google inject internal InternalInjectorCreator initializeStatically(InternalInjectorCreator java:133)\n\tat com google inject internal InternalInjectorCreator build(InternalInjectorCreator java:106)\n\tat com google inject internal InjectorImpl createChildInjector(InjectorImpl java:217)\n\tat com google inject internal InjectorImpl createChildInjector(InjectorImpl java:224)\n\tat com google caliper runner CaliperMain exitlessMain(CaliperMain java:120)\n\tat com google caliper runner CaliperMain main(CaliperMain java:81)\n\tat com google caliper runner CaliperMain main(CaliperMain java:69)\n\tat com google common base WhitespaceMatcherBenchmark main(WhitespaceMatcherBenchmark java:56)\n\tat sun reflect NativeMethodAccessorImpl invoke0(Native Method)\n\tat sun reflect NativeMethodAccessorImpl invoke(NativeMethodAccessorImpl java:62)\n\tat sun reflect DelegatingMethodAccessorImpl invoke(DelegatingMethodAccessorImpl java:43)\n\tat java lang reflect Method invoke(Method java:498)\n\tat com google common reflect Invokable$MethodInvokable invokeInternal(Invokable java:197)\n\tat com google common reflect Invokable invoke(Invokable java:100)\n\tat com google common testing NullPointerTester testParameter(NullPointerTester java:349)\n\tat com google common testing NullPointerTester testMethodParameter(NullPointerTester java:220)\n\tat com google common testing NullPointerTester testMethod(NullPointerTester java:188)\n\tat com google common testing NullPointerTester testStaticMethods(NullPointerTester java:134)\n\tat com google common testing ClassSanityTester doTestNulls(ClassSanityTester java:197)\n\tat com google common testing AbstractPackageSanityTests testNulls(AbstractPackageSanityTests java:231)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157867713\n  
1256,     In 4 files  manually include a TestCase in its own suite() \nThis lets the open-source build run those tests \n\nDetails: Our internal test runner  given a TestCase with a suite() method  always runs the TestCase in addition to the suite()  even if the suite() doesn\ t include it \nThe external Maven test runner  by contrast  skips the TestCase itself unless the suite() includes it \nThat\ s led us to add the suite manually:    com/google/guava/blob/fac8339c87815fb7deca0cf01d61a5146355723f/guava-tests/test/com/google/common/collect/SetsTest java#L116\nBut we missed it in a few recent cases \n\nI noticed one of these cases when I ran the open-source GWT tests and they failed (because we\ re using an old Truth version externally  which I\ m also fixing) \nThis raised the question of why the non-GWT tests weren\ t failing in the same way  and the answer is that this suite() business was skipping them \nI identified other affected tests with:\n\n$ grep -rl \ ^  public static Test suite[( [) \  */test/ > /tmp/files\n$ grep \ ^  public void test\  -l $(for F in `cat /tmp/files`; do BASE=$(basename $F  java); grep  addTestSuite($BASE class)  -L $F; done)\n\nNote that  with this solution  we run the tests *twice* internally \nThis is unfortunate but probably livable \nAn alternative that we\ ve employed is to move the tests into a nested class  which we then don\ t need to add to the suite:\n   com/google/guava/blob/fac8339c87815fb7deca0cf01d61a5146355723f/guava-tests/test/com/google/common/collect/ImmutableListTest java#L127\nThat way  we run the test only once internally \nThe downside is that we don\ t run it externally at all :(\nI should fix the external problem for the existing tests  but that\ s a problem for another CL (CL 157852006  pending) \n\nAnother alternative is to move all our suites out of the main test files \nThis is possibly a good idea  anyway  as it\ s a prerequisite for running the suites under GWT and Android  which would have caught problems like [ But again  one thing at a time   \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157861023\n  
1257,     Upgrade Truth to 0 33 \n\nThis fixes some GWT failures (and  once I submit CL 157827695  non-GWT failures) that result from calling assertThat(doubleArray) isEqualTo(   )  which was forbidden under 0 31 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157860829\n  
1258,     Increase timeout \n\nI just tried running the GWT tests because I expected them to fail from [ They unexpectedly passed because  [WARNING  Forked JVM has been killed on time-out after 21600 seconds  is non-fatal :(\n\nWith this change  the expected tests fail (as do some others  for reasons that I\ ll address in other CLs) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157829988\n  
1259,     Update Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157798760\n  
1260,     PredecessorsFunction  SuccessorsFunction: remove @GoogleInternal annotation  now that we\ ve resolved the  what type should the method return?  question \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157642605\n  
1261,     Reorganize abstract HashFunction and Hasher implementations to simplify common hash and potentially prepare for exposing these skeletal implementations \n\nEffects on HashingProGuard:\n81130 bytes => 80229 bytes\n42 classes => 40 classes\n193 methods => 193 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157618945\n  
1262,     Fix @since tag \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157618843\n  
1263,     Fixes incorrectly-ordered arguments to method calls ([ \n\nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods  See\n[ \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157502059\n  
1264,     FluentFuture \n\nThis includes making AbstractFuture and immediate*Future be a FluentFuture (though we don t change the return type of immediate*Future to expose this) \n\nAPI Review docs: [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157499710\n  
1265,     Delete com google math Sample \n\nThis CL also migrates the last usage of it to Stats — it so happens that the last usage is in a subpackage of math  so I think it s okay to do it at the same time (especially as it s a safe local change that only affects unit tests) \n\nIt also removes a couple of references in the javadoc for the Quantiles benchmark algorithms class (which probably shouldn t have been in the open source version anyway  oops)  They don t really add value now \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157461412\n  
1266,     Avoid garbage allocation in simple hashBytes calls with Murmur3 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157146977\n  
1267,     Added some Unit Tests\n\nFixes #2825\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157145435\n  
1268,     Eliminate most holder classes from c g c hash Hashing  but still keep those constants lazily generated -- e g  moving the static constant to its own implementation class \n\nEffects on HashingProGuard:\n85448 bytes => 81130 bytes\n51 classes => 42 classes\n197 methods => 193 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157142790\n  
1269,     Start adding testing for ProGuard and allocation testing for common hash \n\nInitial HashingProGuard measurements:\n85448 bytes\n51 classes\n197 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157137394\n  
1270,     Change toMultiset() to accept    Function<? super T     > \n\nSee    com/google/guava/issues/2696#issuecomment-303642729\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157118306\n  
1271,     Update SNAPSHOT versions in README \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157114045\n  
1272,     Fixes incorrectly-ordered arguments to calls to assertEquals\n([ \nThis change has been automatically generated by an Error Prone check that\ndetects incorrect argument ordering on calls to assertEquals-style methods  See\n[ \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157061178\n  
1273,     common graph classes: clean up documentation  change Object references to generic type indicators where possible in the internal implementation classes (this was already done for the public APIs) \n\nRename internal  oppositeNode  to  adjacentNode  for consistency with the external API \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157050755\n  
1274,     Move UnsignedLongs static constants to a static class  to allow other UnsignedLongs methods to get inlined \n\nEffects on IntMathProGuard:\n55843 bytes => 55068 bytes\n8 classes => 7 classes\n51 methods => 50 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157039263\n  
1275,     Make initialization of Longs asciiDigits lazy so ProGuard can eliminate Longs entirely from its users \n\nEffects on IntMathProGuard:\n56435 bytes => 55843 bytes\n9 classes => 8 classes\n53 methods => 51 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157027975\n  
1276,     Start measuring DoubleMath s ProGuard retention  and optimize it by inlining some things: LongMath isPowerOfTwo  and DoubleUtils ONE_BITS \n\nEffects on DoubleMathProGuard:\n50619 bytes => 48800 bytes\n5 classes => 3 classes\n24 methods => 19 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157025614\n  
1277,     Update guava-gwt version to 23 0-SNAPSHOT; missed this last time since it isn t under current \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=157008161\n  
1278,     Apply \ @ForOverride\  to Converter doForward & Converter doBackward\n\nPending todo: clean up usage from method reference ( ::doForward  &  ::doBackward )\n\nTODO(jijiang): address TODO after CL submitted\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156992728\n  
1279,     Just admit that newConcurrentMap returns and will always return a ConcurrentHashMap \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156925490\n  
1280,     Reduce allocation in Iterators concat \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156923366\n  
1281,     Avoid reallocating a new unmodifiableSortedSet wrapper on every operation on Sets unmodifiableNavigableSet \n\n(While we re there: in the Java 8 version  forward the default methods correctly  since ForwardingSortedSet deliberately doesn t forward them )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156918009\n  
1282,     Update Guava versions to 23 0-SNAPSHOT \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156901136\n  
1283,     Update main readme to describe the main and Android flavors of Guava  and how to depend on them \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156863289\n  
1284,     Inline some filtering logic  etc  into Sets views to reduce code retention and allocation of Predicate objects \n\nEffects on SetsProGuard:\n173261 bytes => 170929 bytes\n107 classes => 106 classes\n915 methods => 899 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156803771\n  
1285,     Reduce the number of different ranges TreeRangeMap attempts to test with; these were taking exorbitant amounts of time in Android tests \n\n(See e g  [  where testPutAll took over two minutes  and that wasn t the only TreeRangeMap method that took multiple minutes \n\nAfter this change  putAll takes 8 seconds   [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156761836\n  
1286,     Run StreamsTest and ComparatorsTest under GWT \n\nThis would have caught b/38304985 and also catches new b/38490623 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156761057\n  
1287,     common graph classes: mark types and methods as @GoogleInternal that are not yet ready for release in Guava 22 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156749408\n  
1288,     Add tests for Lists lastIndexOfImpl (Also removed one warning from ListsTest) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156569812\n  
1289,     Roll forward of [  going back to exactly the original semantics while we re at it \n\n*** Reason for rollback ***\n\nFixed the targets that were really broken deep down  but we also reverted the slight semantics change that exposed the issues   I think the changed semantics were fine  but I don t think it s important enough to make a fuss \n\nNew effects on IterablesProGuard:\n95045 bytes => 94834 bytes\n53 classes => 52 classes\n265 methods => 263 methods\n\nAdditionally  added IterablesAllocationTest  which measures the actual effects of this optimization \n\nWalking concat(collection1  collection2) changed from requiring 13 allocations to requiring 8 \nWalking concat(concat(c1  c2)  concat(c3  c4)) changed from requiring 41 allocations to requiring 22 \n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 156329581 \n\n*** Reason for rollback ***\n\nBroke some tests   (I think they re doing something that should ve failed and this just revealed the error  but I m still attempting to discern what really happened )\n\n*** Original change description ***\n\nSimplify Iterators concat and optimize it for minimizing allocations  while preserving the smart behavior for nested Iterators concats \n\nEffects on IterablesProGuard:\n97559 bytes => 95471 bytes\n57 classes => 54 class   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156493253\n  
1290,     Omit PackageSanityTests from open-source Guava \n\nIt shouldn t be run in the same JVM as other tests because some of its method call set the interrupt bit \n(Alternatively  we could run those tests in a separate thread  but it hasn t seemed worth bothering )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156485709\n  
1291,     Automated g4 rollback of changelist 156329581 \n\n*** Reason for rollback ***\n\nBroke some tests   (I think they re doing something that should ve failed and this just revealed the error  but I m still attempting to discern what really happened )\n\n*** Original change description ***\n\nSimplify Iterators concat and optimize it for minimizing allocations  while preserving the smart behavior for nested Iterators concats \n\nEffects on IterablesProGuard:\n97559 bytes => 95471 bytes\n57 classes => 54 classes\n277 methods => 266 methods\n\nEffects on IteratorsProGuard:\n76937 bytes => 75212 bytes\n35 classes => 32 classes\n175 methods => 170 methods\n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156342594\n  
1292,     Reduce allocations in filtered views of  Sorted Navigable Set \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156338232\n  
1293,     Simplify Iterators concat and optimize it for minimizing allocations  while preserving the smart behavior for nested Iterators concats \n\nEffects on IterablesProGuard:\n97559 bytes => 95471 bytes\n57 classes => 54 classes\n277 methods => 266 methods\n\nEffects on IteratorsProGuard:\n76937 bytes => 75212 bytes\n35 classes => 32 classes\n175 methods => 170 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156329581\n  
1294,     Avoid having a static Joiner constant in Predicates   This typically eliminates both Joiner and the Predicates class itself  which was prevented from being optimized away by the presence of the static constant \n\nEffects on Collections2ProGuard:\n85910 bytes => 84265 bytes\n36 classes => 34 classes\n199 methods => 194 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156325587\n  
1295,     Stick to IntMath in Collections2 orderedPermutations size \n\nEffects on Collections2ProGuard:\n89279 bytes => 85910 bytes\n38 classes => 36 classes\n202 methods => 199 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156321417\n  
1296,     Correct a slightly inaccurate claim in the javadoc of the equals() methods on Stats and PairedStats  If strictfp is not in force  we can t actually guarantee getting equal statistics even for the same values in the same order \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156289223\n  
1297,     Avoid allocation and references to Predicates where possible in Collections2 \n\nEffects on Collections2ProGuard:\n91872 bytes => 89279 bytes\n40 classes => 38 classes\n216 methods => 202 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156243603\n  
1298,     Use ImmutableList sortedCopyOf instead of Ordering immutableSortedCopy \n\nEffects on Collections2ProGuard:\n92924 bytes => 91872 bytes\n41 classes => 40 classes\n221 methods => 216 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156237339\n  
1299,     Don t build a full Multiset in the Java 7 branch of Collections2 isPermutation  just using the underlying hash table structure \n\nEffects on Collections2ProGuard:\n108614 bytes => 92924 bytes\n54 classes => 41 classes\n350 methods => 221 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=156230331\n  
1300,     Explain/advertise CacheLoader from() better \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155904679\n  
1301,     Remove some misleading interruption docs:\n- Our interruption behavior doesn\ t fully match the JDK  My point in CL 23833126 was that both AbstractFuture and the JDK implementations throw if the thread was interrupted *before* the get() call as well as during  But:\n  - We differ from the JDK in a different area: We throw InterruptedException even if the get() call wouldn\ t have had to wait  (We see this as a feature: Since the task is apparently cancelled anyway  we might as well take this opportunity to abort )\n  - My phrasing may be equally misleading in the other direction: It may suggest that get() throws if the thread was *ever* interrupted in the past  More generally  by changing the phrasing at all  I may be suggesting a change in behavior where none exists \n- InterruptedException support is probably in some sense  optional   but there\ s no reason to call it out as specifically optional for AbstractFuture \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155865732\n  
1302,     Merge some classes in Iterables that don t really need to be split \n\nEffects on IterablesProGuard:\n94711 bytes => 92873 bytes\n57 classes => 54 classes\n277 methods => 268 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155648417\n  
1303,     Fix link to whitespace comparison doc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155643809\n  
1304,     Pull LOWER_BOUND_FN and UPPER_BOUND_FN into their own classes  instead of having them be static constants in Range itself   They aren t actually used in Range itself  just in other APIs using Range \n\nEffects on RangeProGuard:\n59099 bytes => 58681 bytes\n13 classes => 12 classes\n112 methods => 110 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155566243\n  
1305,     Avoid generating separate classes for the two BoundType enum instances \n\nEffects on RangeProGuard:\n59989 bytes => 59099 bytes\n15 classes => 13 classes\n114 methods => 112 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155549621\n  
1306,     Avoid referencing ContiguousSet directly in Range  instead just using SortedSet   This actually constitutes a general optimization  since we make it O(1) for all SortedSets and not just ContiguousSets  but it also makes a big difference to ProGuard:\n\n91546 bytes => 59989 bytes\n42 classes => 15 classes\n328 methods => 114 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155545589\n  
1307,     Manual fix-ups before we google-java-format \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155501761\n  
1308,     Fix buggy advice \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155427010\n  
1309,     Added tests for Lists IndexOfImpl\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155423645\n  
1310,     Reduce use of Predicates in Maps filter variants \n\nEffects on MapsProGuard:\n218054 bytes => 217126 bytes\n170 classes => 164 classes\n1300 methods => 1276 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155421460\n  
1311,     EnumCountHashMap is an implementation detail  not a public type \n\n(Hopefully cherrypickable into 22 0  since I saw this in the API diffs )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155396203\n  
1312,     Correcting a JavaDoc in Immutable Primitive arrays \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155256441\n  
1313,     Implementation of Sets combinations(Set  int)  approved by [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155231438\n  
1314,     new MapMaker() makeMap() just returns a ConcurrentHashMap   Inline that logic into Maps newConcurrentMap() \n\nEffects on MapsProGuard:\n262307 bytes => 218054 bytes\n211 classes => 170 classes\n1532 methods => 1300 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155228371\n  
1315,     Migrate Executor-less Futures callback methods to the ones with an Executor  while applying MoreExecutors directExecutor() for identical behavior \n\nFor more information  see [ \n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155174706\n  
1316,     asList() views are serializable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155126187\n  
1317,     Some simple changes to Iterators to reduce ProGuard retention and allocation \n\nEffects on ProGuard retention:\n79026 bytes => 75115 bytes\n41 classes => 35 classes\n196 methods => 175 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155124112\n  
1318,     Fix    com/google/guava/issues/2804 issues with nested Iterators concats on partially advanced iterators \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155111980\n  
1319,     Make toImmutableList() and toImmutableSet() collectors singletons \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=155071697\n  
1320,     Added test for addAllImpl \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154976838\n  
1321,     Rewrite ImmutableSortedMultiset Builder on Android to avoid using TreeMultiset  which allocates a ton of objects and also uses a ton of code \n\nThe strategy we use is a little modified from how we changed ImmutableSortedMap: on every expansion  we sort and deduplicate the elements that have been added to the builder \n\n(modest reduction in bytes allocated  significant reduction in objects allocated  significant constant factor increase)\n\nEffects on ImmutableSortedMultisetProGuard:\n142818 bytes => 110301 bytes\n86 classes => 58 classes\n702 methods => 498 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154893300\n  
1322,     Make BloomFilter concurrent \n\nOriginal pull request by Val Markovic at    com/google/guava/pull/2761\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154881019\n  
1323,     ImmutableDoubleArray\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154872857\n  
1324,     Partial rollback of changelist 151480429 \n\n*** Reason for rollback ***\n\nI ve fixed our GWT test generator (CL 154831023)  so it no longer chokes on these tests \n\n*** Original change description ***\n\nPartial rollback of changelist 150805495 \n\nSpecifically  I m rolling back only the server/java8 changes \n\n*** Reason for rollback ***\n\nNeed to investigate Bazel heap regression \n\n*** Original change description ***\n\nDo not copy in Immutable List Set SortedSet  construction \n\nWe re still avoiding the potential for a memory leak with the forceCopy part  but we want to avoid the garbage created by slicing the array down to exactly the right size \n\nWe don t ever copy in ImmutableList  since we can o   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154857178\n  
1325,     Make it clearer that Cut doesn t implement equals without hashCode\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154785879\n  
1326,     Remove HostAndPort getHostText() (scheduled for removal in 22 0) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154734786\n  
1327,     Fix ImmutableLongArray hashCode()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154726612\n  
1328,     Add a script for setting the version for guava and guava-android \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154560774\n  
1329,     Fix deploy_snapshot for android snapshots\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154542742\n  
1330,     Run mvn on the android branch without running `cd`  so that we don t mess up base the directory\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154453557\n  
1331,     Provide specializations of MapMakerInternalMap s internal data structures  notably InternalEntry  for the case where the value type is a singleton  This is Interners s exact use case \n\nThis CL is a pure refactor that results in a strict memory win  No public apis are changed \n\nI am very happy that my design made this refactor very easy :)\n\nThere are the following Interners use cases:\n- Interners#newStrongInterner\n- Interners#newWeakInterner\nand the following relevant jvm flags:\n- -XX:+UseCompressedOops\n- -XX:-UseCompressedOops\n\nOf the four combinations of interner type and pointer size  the most important use case is probably Interners#newWeakInterner  since users tend to put lots of stuff in weak interners  On a 64-bit jvm with +UseCompressedOops  there s actually no win because of the way the current object alignment for WeakKeyStrongValueEntry works out  However  the current object alignment works out unfavorably on a jvm with -UseCompressedOops  and so this CL gives a sizeable win there \n\nThe CL also gives very large savings for Interners#newStrongInterner  but I reckon that use case isn t too important \n\nSummary of results:\n-------------------\nStrongInternerImpl w/ +UseCompressedOops --> 19 8% savings\nWeakInternerImpl w/ +UseCompressedOops --> 0 00016% savings\nStrongInternerImpl w/ -UseCompressedOops --> 12 3% savings\nWeakInternerImpl w/ -UseCompressedOops --> 9 0%% savings\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154450505\n  
1332,     Test the android branch (in TAP for [   and Travis for Github)\n\nIn the process  fix and simplify the javadoc configuration  I mistakenly removed some of it in the Android branch when I worked the poms  thinking that what was for jdk8 was really jdk7+\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154444654\n  
1333,     Assorted javadoc fixes in com google common\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154343275\n  
1334,     Link java7 branch javadocs to javase/7  not 8\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154329415\n  
1335,     Move poms to the proper directory \nMOE got confused because it ran against Ron s CL but with a config file from before Ron s CL \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154302373\n  
1336,     Add pom xml files for Guava-Android\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154302373\n  
1337,     Move ClassInSubpackage    actually into a subpackage  This looks to have not been moved correctly when forking common reflect\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154299216\n  
1338,     Make Immutable*ArrayTests have javac7-compatible generics \n\nThis was done to ImmutableIntArrayTest in [  but that was interleaved with the creation of ImmutableLongArray \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154296466\n  
1339,     Fork common reflect and remove a few tests from the java7 branch that don t work on Android\n\nSee discussion in [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154222595\n  
1340,     Make some changes to generics so the Android branch can compile externally with -source 7 -target 7\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154211832\n  
1341,     ImmutableLongArray  Regenerated the int-based classes using it as the model \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154059885\n  
1342,     Don t release SourceSinkFactories that are java7-specific (i e  use java nio)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154055354\n  
1343,     Make some generics explicit that the maven-compiler-plugin can t figure our when compiling for Java 7\n\nEach change was reflected in the mainline  or has already deviated from the mainline  so this shouldn t incur any additional forking costs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154053375\n  
1344,     Remove stale comment about Java 8 APIs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=154051124\n  
1345,     Add missing common primitives to Guava for Android \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153841285\n  
1346,     Add  X-DNS-Prefetch-Control  header \n\nDocumentation:\n   mozilla org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control\n   chromium org/developers/design-documents/dns-prefetching#TOC-DNS-Prefetch-Control\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153835731\n  
1347,     Begin exporting sources of Guava for Android \n\npom xml files to come \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153757913\n  
1348,     Fix typo in Javadoc link \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153581577\n  
1349,     Document that we don t forward calls to default methods  Multimap edition \n(followup to CL 124370400 now that Multimap has a default method)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153481169\n  
1350,     Update misleading comment in RegularImmutableList; it is used even for lists\nwith 1 item now that SingletonImmutableList has been removed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153458644\n  
1351,     Test coverage for equals()  With this  coverage for the file looks good enough to me \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153379567\n  
1352,     Remove docs that specify which equals() element we return \n\nFixes    com/google/guava/pull/2052\n(only 2 years later!)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153209013\n  
1353,     Internal @AndroidIncompatible docs:\n- It s not for prod APIs \n- It works through a special MOE config \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153202986\n  
1354,     For APIs that require Java 7  strip them from Guava-Android entirely  not just from our internal copy of Guava-Android \nThis prevents a third-party library from using them  only to fail when used with our internal Guava-Android \n\nTo accomplish that  we use @GoogleInternal instead of @AndroidIncompatible  but we use it only on the Java 7 branch \n\nFor context  see my belated comment on CL 138100073 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153200690\n  
1355,     Skip GWT tests by default \n\nThe fact that they  hang  (i e   take ~8 hours) confused the reporter of    com/q/43040327/28465  and I suspect he\ s not the first \nPlus  I mean  who wants to wait 8 hours? :)\nI\ ve updated our release docs to explicitly turn on GWT tests during the main test command \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153193781\n  
1356,     Remove  nullness  suppressions added in CL 152864813 \nThey are only necessary when running the Checker Framework  and we don\ t \n(And they won\ t be necessary for the Checker Framework  either  after its\  upgraded )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=153184952\n  
1357,     ImmutableIntArray asList() stream() is now  efficiently splittable  \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152991064\n  
1358,     Add Java8-specific methods: copyOf(Stream)  Builder addAll(Stream)  stream()  forEach(IntConsumer)  (w/lowasser)\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152986681\n  
1359,     ImmutableIntArray is serializable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152969076\n  
1360,     Advertise Comparators least/greatest collectors from TopKSelector \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152967871\n  
1361,     First round of adding tests for the Lists *Impl package-private methods \n\nThis is checking that the overall structure is reasonable; if so  tests for the other methods will be added \n\nI also included some minor cleanups in Lists \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152960063\n  
1362,     Implement ancient TODO to use EqualsTester  Use reserialize() with it to prove that absent() still equals itself after a round-trip \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152890149\n  
1363,     Assign otherwise ignored Future return values to local variables  This change is part of [  which will eventually make it an error to ignore the return value of methods that return Future \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152864813\n  
1364,     Reformatting \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152863915\n  
1365,     minor enhancements to serializingexecutor\n\n* only acquire/release the lock once per call to execute (inline the top half\n  of startQueueWorker into callers)  the bytecode of startQueueWorker is long\n  enough that it probably doesn t get inlined and thus things like hotspot lock\n  coarsening probably aren t trigerring \n* only allocate the queue worker once  and repurpose it for the lock\n\nThis leads to a small bit of redundancy in execute/executeFirst/suspend  however  due to the needed control flow in the caller  i am not sure if it is very avoidable   Also  it does allow us to avoid some redundant checks (e g  no need to check queue size if we just added an item)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152848537\n  
1366,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152750256\n  
1367,     Make smear() produce accurate results under GWT  hopefully \nThis appears to solve the problem reported in HashMultiset under GWT \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152710159\n  
1368,     Remove Spliterator characteristic SIZED after a trySplit operation in CollectSpliterators flatMap \n\nFixes    com/google/guava/issues/2781\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152710038\n  
1369,     Update Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152694884\n  
1370,     Harmonize NPE @throws clauses on FluentIterable toXX() methods and friends\n\nI noticed that toSet() and toList() each lacked an @throws NullPointerException for the case where an element of the FluentIterable is null; this seems like an omission given that their sorted cousins have the @throws  as do the various other toXX() methods that return an ImmutableXX as well as index() and uniqueIndex() which are similar in spirit \n\nI also standardized toMap()  index()  and uniqueIndex() to each use the same format for listing the reasons they can throw NPE (null element  or null function result)   Note that these can also throw NPE on a null parameter to the method  but that is not documented per convention since the package has @ParametersAreNonnullByDefault \n\nFinally  I updated Multimaps index() and Ordering immutableSortedCopy() to adopt this convention as well (since they\ re passed through to by the FluentIterable methods)  and I tidied up some wording choices (e g  consistently using   @code null    and using  element of this iterable  instead of just  element  when the method takes parameters) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152552349\n  
1371,     Implement CharSink writeLines(Stream[  String ) \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152418428\n  
1372,     Updated the main interfaces javadoc snippet to reflect the new interfaces  Successor Predecessor Graph \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152356712\n  
1373,     Eliminate references to ImmutableAsList in ImmutableMultiset \n\nImmutableMultiset  for once  doesn t have a specialized asList()  so this does the right thing on both server side and Android: on Java 7  it returns a normal ImmutableList  on server-side it returns an ImmutableList whose contains() method delegates to the backing ImmutableMultiset \n\nEffects on ImmutableMultisetProGuard ([ \n80423 bytes => 78313 bytes\n34 classes => 31 classes\n257 methods => 240 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152304598\n  
1374,     isFinite: use `&&` to avoid a ShortCircuitBoolean warning; if there really is benefit to `&` that could be benchmarked/justified in the future \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152292580\n  
1375,     BloomFilter approximateElementCount(): rename from its temporary name \npursuant to API Review \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152264799\n  
1376,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152256148\n  
1377,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152247926\n  
1378,     Fix for Android crash caused by mis-aligned call of Unsafe getLong on a 4-byte aligned field offset \n\nAny use of Unsafe to read java arrays of  another type  is dangerous\nand unsupported (by Unsafe)  so fall back to safe java more\nconservatively  unless we are running 64-bit java with 8-byte aligned\nbyte array offset   This leaves the Big Java Server optimizations in place \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152215885\n  
1379,     Automated g4 rollback of changelist 151734490 \n\n*** Reason for rollback ***\n\nRoll forward  since we ve concluded this is not the culprit \n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 151172294 \n\n*** Reason for rollback ***\n\nSuspected cause of b/36638818 \n\n*** Original change description ***\n\nRewrite ImmutableMultiset on Java 7 in terms of the guts of HashMultiset  taking ruthless advantage of its property that it retains insertion order in the absence of removals \n\nThis avoids reimplementing yet another hash table  saves some memory -- not as much as an open-addressed table would ve  but some  and still keeps us to O(1) total objects --   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152060057\n  
1380,     Test ImmutableIntArray under GWT \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=152035299\n  
1381,     Change switch() to if() \n(followup to CL 151849104)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151865662\n  
1382,     Remove the singleton list optimization from ImmutableList sublist\n\nsince SingletonImmutableList no longer exists there is no benefit and this will\ncause singleton sublists to consume more memory than non singleton sublists\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151861509\n  
1383,     Make ImmutableIntArray @GwtCompatible\n\n * changed one int[  clone() into Arrays copyOf(int[ )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151853310\n  
1384,     Fixed bugs in test in that 1 >> x - 1 is actually 1 >> (x - 1) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151850976\n  
1385,     Automated g4 rollback of changelist 151172294 \n\n*** Reason for rollback ***\n\nSuspected cause of b/36638818 \n\n*** Original change description ***\n\nRewrite ImmutableMultiset on Java 7 in terms of the guts of HashMultiset  taking ruthless advantage of its property that it retains insertion order in the absence of removals \n\nThis avoids reimplementing yet another hash table  saves some memory -- not as much as an open-addressed table would ve  but some  and still keeps us to O(1) total objects -- and saves us some code   Of course  we ve still got lots of code size reduction work to do on HashMultiset  now  but even so this still represents   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151734490\n  
1386,     Add @since and a comment \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151611541\n  
1387,     Methods that take an edge as parameter now take type E instead of Object \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151584791\n  
1388,     Methods that take a node as parameter now take type N instead of Object \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151580804\n  
1389,     ImmutableIntArray initial version \n\nNext steps:\n- serializable\n- gwt  android\n- add java8-specific methods\n- adopt\n- clone to Immutable Long Double Array after it seems to stabilize\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151519883\n  
1390,     Partial rollback of changelist 150805495 \n\nSpecifically  I m rolling back only the server/java8 changes \n\n*** Reason for rollback ***\n\nNeed to investigate Bazel heap regression \n\n*** Original change description ***\n\nDo not copy in Immutable List Set SortedSet  construction \n\nWe re still avoiding the potential for a memory leak with the forceCopy part  but we want to avoid the garbage created by slicing the array down to exactly the right size \n\nWe don t ever copy in ImmutableList  since we can only be too big by a factor of 3/2   In Immutable Set SortedSet   we copy if  after deduplication  the number of unique elements is < array length / 2   (And we rebuild the hash table in IS if it s more than twice as   \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151480429\n  
1391,     Eliminate the static Ordering constant in Multisets  moving it into its own class  to avoid the various problems with static initialization \n\nEffects on ImmutableMultisetProGuard ([ \n86386 bytes => 84832 bytes\n39 classes => 37 classes\n284 methods => 277 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151478858\n  
1392,     Avoid referencing any Ordering methods except natural() in ImmutableSortedSet \n\nThis is a behavior change  but kevinb@ and I agreed that this shouldn t really be detectable -- the handful of users of SortedSet comparator() don t seem likely to actually do much introspecting on the comparator  and the comparator is equivalent  just no longer an Ordering \n\nEffects on ImmutableSortedSetProGuard:\n81478 bytes => 78328 bytes\n32 classes => 29 classes\n307 methods => 287 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151474930\n  
1393,     Renamed  Successor Predecessor Graph to  Successors Predecessors Function \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151421328\n  
1394,     Added more memory benchmarks for collections \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151394873\n  
1395,     (w/lowasser) Streams forEachPair()\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151386365\n  
1396,     Add test in MultisetForEachEntryTester to test multiple copies of a single element \n\nFollow-up to [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151364503\n  
1397,     Close <ul> element \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151362187\n  
1398,     Inline containment logic in Iterators removeAll  allowing ImmutableMultiset to avoid retaining Predicates \n\nEffects on ImmutableMultisetProGuard ([ \n104688 bytes => 102704 bytes\n56 classes => 53 classes\n427 methods => 418 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151351199\n  
1399,     Add BloomFilter approximateCount() \n\nFixes #2755\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151333352\n  
1400,     Apply  @ForOverride  to AbstractService doStart & AbstractService doStop\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151328608\n  
1401,     Deprecate Executor-less Futures methods upon incoming migration completion to the ones with a MoreExecutors directExecutor()  discouraging internal use  while keeping the open-source version in Guava intact  They and scheduled to be deleted in April 2018 \n\nFor more information  see [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151237280\n  
1402,     Rewrite ImmutableMultiset on Java 7 in terms of the guts of HashMultiset  taking ruthless advantage of its property that it retains insertion order in the absence of removals \n\nThis avoids reimplementing yet another hash table  saves some memory -- not as much as an open-addressed table would ve  but some  and still keeps us to O(1) total objects -- and saves us some code   Of course  we ve still got lots of code size reduction work to do on HashMultiset  now  but even so this still represents a modest transitive retention reduction for ImmutableMultiset \n\nEffects on ImmutableMultisetProGuard:\n110419 bytes => 104143 bytes\n64 classes => 56 classes\n456 methods => 426 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151172294\n  
1403,     Update docs for AbstractFuture subclassers to recommend afterDone() \nAlso  fix a typo in BloomFilter \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151133593\n  
1404,     Deprecated the old TimeLimiter callWithTimeout() method now that its replacements have been fully implemented \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151123087\n  
1405,     Deprecated SimpleTimeLimiter s constructors and added a static factory method \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151072768\n  
1406,     Fix embarrassing forEachEntry bug in ImmutableSortedMultiset \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151063670\n  
1407,     Implemented new TimeLimiter methods in SimpleTimeLimiter \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151010922\n  
1408,     make NullPointerTester isNullable() use @CheckForNull too\n\ni e   returns true if a parameter is annotated with @Nullable\n*or* @CheckForNull  Both annotations mean  this can be null  \n\nFixes #2731\n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=151005288\n  
1409,     Reorder methods so we (a) aren t splitting overloads anymore and (b) have them in the order: stream starters  stream combiners  stream chainers  and terminal ops \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150915090\n  
1410,     Implemented new TimeLimiter methods in FakeTimeLimiter \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150902171\n  
1411,     Moved TimeLimiter s class-level documentation to newProxy() and replaced it with more general info \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150894315\n  
1412,     Added TimeLimiter  call run WithTimeout() methods with improved exception behavior and more readable method signature \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150889844\n  
1413,     Do not copy in Immutable List Set SortedSet  construction \n\nWe re still avoiding the potential for a memory leak with the forceCopy part  but we want to avoid the garbage created by slicing the array down to exactly the right size \n\nWe don t ever copy in ImmutableList  since we can only be too big by a factor of 3/2   In Immutable Set SortedSet   we copy if  after deduplication  the number of unique elements is < array length / 2   (And we rebuild the hash table in IS if it s more than twice as big as it should be) \n\nThe memory cost here isn t big  but Android especially doesn t like garbage objects  and garbage isn t super fun on server side either \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150805495\n  
1414,     Add @FunctionalInterface to AsyncCallable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150771279\n  
1415,     Removed  Successor Predecessor Graph nodes() \n\nReasons:\n- The new interfaces are functional\n- It will be easier converting existing uses of TreeTraverser and similar classes \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150682183\n  
1416,     Added tests to cover some forEach code in Iterables  (Which means these tests should not be in the Java7 version) \n\nAlso some minor cleanups\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150666890\n  
1417,     Fix LocalCache compute deadlock issue  also added unittests \n\n   com/google/guava/issues/2743\n\nwe need to hold the lock when calling compute  the rest of the calls\nlike removeEntry need to hold the lock too \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150363160\n  
1418,     Preconditions java: reword the section on Performance to clarify what aspects of performance are actually expected to be an issue in practice \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150348211\n  
1419,     Fix external bug #2751 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150327872\n  
1420,     Added a test for copyOf when the collection is an EnumSet   In the process generalized the abstract classes so that we could call copy of \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150220273\n  
1421,     Apply  @ForOverride  annotation to Equivalence doEquivalent & doHash \n\n[ \n\n   com/google/guava/issues/1966\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150196929\n  
1422,     Added a test that improves test coverage of the nested class MapViewOfValuesAsSingletonSets (via asMultimap) \n\nAlso cleans up ImmutableMap to match Java 7 patterns of constructors (and thus show the test coverage improvements) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=150104082\n  
1423,     Added missing tests to ImmutableList sortedCopyOf() (using natural order) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149945041\n  
1424,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149768016\n  
1425,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149651971\n  
1426,     Make MediaType charset() a little cheaper \n\nSince we only care if there are zero or 1 elements we don t need to construct an ImmutableSet at all and so can avoid copying the list \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149602676\n  
1427,     It was senseless to hold these nifty collectors back from Guava (sorry) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149416083\n  
1428,     Reimplement inCompletionOrder() (courtesy lukes@) \n(Also  make it available under GWT  but possibly I could have done that without reimplementing?)\n\nThis is likely to be slightly faster than what we had before  In particular  it means that a directExectur() listener for one output Future can t slow the completion of other output Futures (except to the extent that all Futures-based code is likely to be an interconnected graph in which any directExector() listener can slow any other :)) \nIt also means that we complete each output Future in the same thread as the input Future completed  This shouldn t matter to most users  but it could affect people who think they know better than the directExecutor() warnings  (And the resulting improvement to parallelism is one reason for the likely performance improvement noted above  along with the removal of SerializingExecutor s locking )\nIt might also increase the chances that the output Futures actually complete in the same order as the input Futures (though there will always be the potential for races)  Users shouldn t care  but it seems like a nice property to provide to the extent that we can easily enough \n\nIf nothing else  it removes the last remaining usage of SerializingExecutor from Guava  which may be nice for minimizing dex size for Android \nThat said  many Android users probably do want SerializingExecutor for their own use  But currently we don t expose ours publicly  so they have their own copy  and they could end up with both ours and theirs -- at least if they use both inCompletionOrder and their own copy  which probably no one does currently  But the long-term solution may be to expose SerializingExecutor publicly  in which case they d be back to having only one version  and the only people who would benefit would be those who use inCompletionOrder but don t otherwise use SerializingExecutor \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149415170\n  
1429,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149330334\n  
1430,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149315090\n  
1431,     Use the valuesSpliterator() method we added to AbstractTable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149314468\n  
1432,     Add CharSource forEachLine(Consumer) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149307373\n  
1433,     Among the Futures methods that run user callbacks  those that don t take an Executor will be deleted   This CL migrates them to the counterparts that take MoreExecutors directExecutor() as such Executor in the parameter list  exactly the way that the old method works \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149302150\n  
1434,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149297072\n  
1435,     Replace constants (static final CONSTANT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\nFor constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149152061\n  
1436,     Fix bad reference to BufferedReader#readLine by adding parens so it doesn t somehow assume it should refer to the package-private version of the method that takes a boolean argument \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149139876\n  
1437,     Add CharSource lines() \n\nAlso make a variety of javadoc tweaks and improvements \n\nFixes    com/google/guava/issues/2693 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149122377\n  
1438,     Add javadoc of common ways to obtain a non-public-constructable objects \n\nMapSplitter -> Splitter withKeyValueSeparator\nCache/LoadingCache -> CacheBuilder\nInterner -> Interners\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149053355\n  
1439,     Add Stopwatch elapsed() which returns a java time Duration\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149027680\n  
1440,     google-java-format Stopwatch (and test) to minimize diffs introduced by\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=149000993\n  
1441,     For constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\nThis change replaces constants (static final CONSTNAT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148919704\n  
1442,     For constant field declarations  you should use the immutable type (such as ImmutableList) instead of the general collection interface type (such as List)  This communicates to your callers important semantic guarantees \n\nThis change replaces constants (static final CONSTNAT_CASE) declaration type which use the general collection interface (e g  List) with an immutable type (e g  ImmutableList) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148879760\n  
1443,     Deprecate and better document many hash functions \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148661971\n  
1444,     Update Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148458296\n  
1445,     Support an optional label when enqueuing listener events  to make using method references more palatable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148397429\n  
1446,     Inline the logic of Ordering onKeys() to get from a key comparator to an entry comparator with only one class instead of more \n\nEffects on ImmutableSortedMapProGuard ([ \n60598 bytes => 57291 bytes\n53 classes => 49 classes\n432 methods => 420 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148394436\n  
1447,     Switch ImmutableSortedMap over to using AbstractMap SimpleImmutableEntry instead of ImmutableMapEntry \n\nEffects on ImmutableSortedMapProGuard ([ \n62724 bytes => 60598 bytes\n55 classes => 53 classes\n444 methods => 432 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148390060\n  
1448,     Avoid reference to PeekingIterator in RegularImmutableSortedSet containsAll  inlining that logic instead of pulling in the extra class \n\nEffects on ImmutableSortedSetProGuard ([ \n40823 bytes => 39358 bytes\n34 classes => 32 classes\n314 methods => 307 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148374768\n  
1449,     Annotate some flaky slow tests as @AndroidIncompatible \n\nThese tests appear to have become flakier around CL 148237028 -- probably mostly because it removed @AndroidIncompatible from one method but perhaps because of the changes in implementations of some of the other methods  (I even wonder if changes to the implementations of some tests are causing other tests to fail  given the number of new failures I saw in unrelated tests in my  After  run  Or maybe that\ s just an artifact of small sample size )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148352222\n  
1450,     Make ListenerCallQueue functionality available outside the concurrent package internally  Changes:\n- encapsulate list of listeners functionality\n- rename Callback interface to Event and make it lambda-compatible\n- move  methodName  to just be toString() on Event  which also defers/avoids unnecessary allocations\n- remove @GuardedBy suppression\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148347379\n  
1451,     Make the tests for Quantiles use up-to-date Truth technology  My main motiviation here is to stop using hasValuesWithin  which is going away  While I m at it  let s start using comparingValuesUsing for the Map assertions to avoid the unpleasant loop  and inline the helpers  which aren t really useful now that we ve done that \n\nI also fixed testPercentiles_index_computeInPlace() which was being slow (about 100s on my machine  and it was annotated as incompatible with android just for slowness) because it was doing a lot of stuff which wasn t really necessary \n\nI also added a jsr305 dep which blaze complained was missing if I didn t :-/ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148237028\n  
1452,     ByteProcessor does not operate on lines \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148235758\n  
1453,     Make classpath scans over circular symlinks predictable \n\nFixes #2649\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148224109\n  
1454,     Allow Funnel<? super T> for BloomFilter readFrom()\n\nThis brings readFrom() in line with create() (as well as the protected constructor that readFrom() delegates to) in accepting Funnel<? super T>   The existing Funnel<T> requirement is needlessly strict  given that a Funnel<T> is a consumer of T so any Funnel<? super T> should be acceptable \n\nRelaxing this allows  for example  reconstructing a BloomFilter<String> that uses a Funnel<CharSequence> such as Funnels unencodedCharsFunnel() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148122926\n  
1455,     Rename Multiset collector parameter names to be consistent with other collector factories \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148116285\n  
1456,     Instead of using the SortedLists utility class  go straight to Collections binarySearch in the implementation of RegularImmutableSortedSet \n\nSortedLists is a much nicer API  but it carries a decent chunk of code weight that we can lose without a problem  and we don t need its fancier features of dealing with multiple elements comparing as equal -- the point of a SortedSet is that we don t have to worry about those \n\nEffects on ImmutableSortedSetProGuard ([ \n50271 bytes => 43278 bytes\n44 classes => 34 classes\n360 methods => 334 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148112233\n  
1457,     Explain the segmented nature of maximumWeight better \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=148103826\n  
1458,     Fixed signature compatibility issue \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147899708\n  
1459,      *Graph  Network  java: change documentation of allowsSelfLoops() and allowsParallelEdges() to correct the type of exception that is thrown when one attempts to modify them in a way that the constraint prevents (e g   adding a self-loop to a graph that doesn t allow them) \n\nTechnically this is a contract change  but in fact the implementations were already throwing IllegalArgumentException  so in practice anyone that was depending on that documentation being accurate (by  say  catching UnsupportedOperationException) was already in trouble  so IMO we should just make this change without trying to worry about backward compatibility; this is just a bug fix \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147933338\n  
1460,     Some rework of Equivalence javadocs  Remove a message that no longer applies there \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147899167\n  
1461,     Added SuccessorGraph/PredecessorGraph \n\nThis CL has no tests because it only adds interfaces without any testable logic \n\nNext steps:\n- Update the paragraphs starting with  There are three main interfaces  (added TODO\ s)\n- Update the wiki\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147874873\n  
1462,     Suppress @GuardedBy errors \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147862530\n  
1463,     Push down definition of ImmutableSortedSet createDescendingSet to subclasses  so we don t get DescendingImmutableSortedSet unless we actually have an ImmutableSortedSet implementation that uses it \n\nEffects on ImmutableSortedSetProGuard ([ \n47637 bytes => 46304 bytes\n41 classes => 40 classes\n337 methods => 318 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147783833\n  
1464,     Fix  SecretSpecKey  typo in Hashing javadoc\n\nThe actual JDK class is named SecretKeySpec  not SecretSpecKey   Arguably this is confusing since it does implement Key  but then again it also implements KeySpec   \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147632964\n  
1465,     Fix cases where GWT sometimes couldn t infer which types are serialized \nAnd finally revise our (internal-only) tests to catch these problems and the problem fixed by CL 147488537 \n\nAs far as I can tell  our old tests passed only because of a GWT bug \nThe fixes are mostly to create dummy superclasses with dummy fields  as usual \nThe exception is ImmutableSortedSet  For some reason  the fix there is to move the existing dummy fields to RegularImmutableSortedSet  My completely wild guess (without investigating at all) is that GWT ignores the ImmutableSortedSet fields because ImmutableSortedSet_CustomFieldSerializer doesn t have the expected methods  This guess makes no sense  especially because GWT appears to be fine with the *Comparator<E>* field on ImmutableSortedSet  just not the E field  Basically nothing makes any sense  but I m just happy it works now \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147607863\n  
1466,     Push down the implementation of createValues() into the subclasses of ImmutableMap \n\nThe only implementations of ImmutableMap that actually use the ImmutableMapValues class are the handful of views like DenseImmutableTable rowMap()   Pushing down the implementation of createValues() allows us to avoid getting ImmutableMapValues or its dependencies for users just using ImmutableMap directly \n\nEffects on ImmutableMapProGuard ([ \n30202 bytes => 27737 bytes\n26 classes => 23 classes\n180 methods => 167 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147515235\n  
1467,     Eliminate references to ObjectArrays in the closure of ImmutableSet and ImmutableMap \n\nProGuard cannot currently eliminate any class that has a static constant that isn t a primitive or String  and ObjectArrays has the EMPTY_ARRAY static constant   Instead  we ll directly inline empty object array singletons anywhere we need them; Object[0 s will still be singletons  we ll just have different singletons in different places \n\n[ \nEffects on ImmutableSetProGuard:\n23072 bytes => 22614 bytes\n17 classes => 16 classes\n140 methods => 140 methods (no change)\n\nEffects on ImmutableMapProGuard:\n30589 bytes => 30224 bytes\n27 classes => 26 classes\n180 methods => 180 methods (no change)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147491289\n  
1468,     Copied from cpovirk s CL 147393681 to submit while cpovirk is OOO \n\nFix GWT serialization broken by CL 146683890 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147488537\n  
1469,     Push down the implementation of ImmutableMap createKeySet() into its implementations  because ProGuard can t figure out how to eliminate createKeySet even when it s overridden in the only ImmutableMap implementation it knows of \n\nThis makes there be one and only implementation of key sets retained by ImmutableMap itself  RegularImmutableMap KeySet   There is no implementation change to the other map types  we just inline the createKeySet() method to those implementations \n\nEffects on ImmutableMapProGuard ([ \n32155 bytes => 30612 bytes\n29 classes => 27 classes\n190 methods => 180 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147408143\n  
1470,     Move the the static constant empty iterator to live in its implementation class  ArrayItr \n\nThis removes the only static constant field from c g c c Iterators  which allows ProGuard to eliminate it and move its methods to another common location   Additionally  if we don t reference emptyIterator() or forArray(   ) in future  we ll eliminate ArrayItr too \n\n[ \nEffects on ImmutableSetProGuard:\n23711 bytes => 23087 bytes\n18 classes => 17 classes\n143 methods => 140 methods\n\nEffects on ImmutableMapProGuard:\n32685 bytes => 32171 bytes\n30 classes => 29 classes\n192 methods => 190 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147359807\n  
1471,     Don t use ImmutableSet of() for the keySet of ImmutableMap of() \n\nThe keySet of the empty map will still be a singleton (since the empty map is a singleton and it caches keySet)  it ll just be a different singleton from ImmutableSet of()   This ensures that the only implementation of ImmutableSet retained by usages of ImmutableMap are its own keySet implementations \n\nEffects on ImmutableMapProGuard ([ 38966 bytes => 37886 bytes\n37 classes => 36 classes\n231 methods => 219 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=147078624\n  
1472,     Turn Iterators emptyModifiableIterator into an enum singleton instead of an anonymous inner class \n\nProGuard can t eliminate static fields  but it can recognize that the enum isn t referenced except by emptyModifiableIterator and eliminate it from classes that reference other methods in Iterators \n\nEffects on ImmutableMapProGuard: ([ 41126 bytes => 40551 bytes\n40 classes => 39 classes\n247 methods => 243 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146953456\n  
1473,     Don t use a Predicate in Iterators contains   This saves an embarrassing number of classes \n\nEffects on ImmutableMapProGuard: ([ 46280 bytes => 41212 bytes\n48 classes => 40 classes\n273 methods => 247 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146929047\n  
1474,     Automated g4 rollback of changelist 146841288 \n\n*** Reason for rollback ***\n\nSome people appear to have been depending on specific hashCode behavior?\n\n*** Original change description ***\n\nEliminate SingletonImmutableSet  partially folding it into RegularImmutableSet \n\nWe skip allocating an all-up hash table for a singleton set  but we share implementation with the hash-based RegularImmutableSet \n\n[ Effects on ImmutableSetProGuard:\n26650 bytes => 24854 bytes\n21 classes => 19 classes\n165 methods => 149 methods\n\nEffects on ImmutableMapProGuard:\n50050 bytes => 50176 bytes  no other changes \n(I infer that SingletonImmutableSet wasn    \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146925879\n  
1475,     Update version guarantee for our tests\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146917804\n  
1476,     Eliminate SingletonImmutableSet  partially folding it into RegularImmutableSet \n\nWe skip allocating an all-up hash table for a singleton set  but we share implementation with the hash-based RegularImmutableSet \n\n[ Effects on ImmutableSetProGuard:\n26650 bytes => 24854 bytes\n21 classes => 19 classes\n165 methods => 149 methods\n\nEffects on ImmutableMapProGuard:\n50050 bytes => 50176 bytes  no other changes \n(I infer that SingletonImmutableSet wasn t actually in the post-ProGuard transitive closure from ImmutableMap and that we just added a little bit of code to a utility method that was )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146841288\n  
1477,     Eliminate references to Joiner in toString static utilities  inlining the joining logic explicitly \n\nEffects on ImmutableMapProGuard ([ \n50061 bytes => 46299 bytes\n53 classes => 48 classes\n293 methods => 273 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146838293\n  
1478,     Add emptiesFirst/Last to Comparators for easily comparing java util Optional\nvalues \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146801689\n  
1479,     Delete SingletonImmutableList \n\nWhile SingletonImmutableList allocates one fewer object  this isn\ t worth it on Android   This has no effect on the MemoryTester bounds for ImmutableList itself \n\nCurrently we are deleting it in all environments  but if we liked we could delete it only in Android; its deletion does increase the MemoryTester bounds for e g  ImmutableListMultimap  whose  sparse  configuration generates a singleton ImmutableList per key \n\n[ Effects on ImmutableSetProGuard:\n27697 bytes => 26650\n22 classes => 21 classes\n173 methods => 165 methods\n\nEffects on ImmutableMapProGuard:\n51766 bytes => 50061 bytes\n55 classes => 53 classes\n305 methods => 293 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146683890\n  
1480,     Don t have a special class for Iterators unmodifiableListIterator()  instead using Iterators forArray(ObjectArrays EMPTY_ARRAY) \n\n[ Effects on ImmutableSetProGuard:\n28632 bytes => 27697 bytes\n24 classes => 22 classes\n180 methods => 173 methods\n\nEffects on ImmutableMapProGuard:\n52700 bytes => 51766 bytes\n57 classes => 55 classes\n312 methods => 305 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146675737\n  
1481,     Have ImmutableMaps for zero and one element use RegularImmutableMap instead of  Empty Singleton ImmutableBiMap  avoiding pulling in ImmutableBiMap and all its dependencies \n\nThe increase in the size of singleton maps does require an increase in the constant overhead in MemoryTester for immutable multimaps and tables  but a constant overhead isn t worth that much concern   (We might come back to work on these when we start trying to improve multimap and table size  though )\n\nEffects on ImmutableMapProGuard: ([ 59284 bytes => 52710 bytes\n64 classes => 57 classes\n363 methods => 312 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146528004\n  
1482,     Optimize ContiguousSet asList() for the three built-in DiscreteDomains \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146513267\n  
1483,     Avoid mentioning ImmutableSortedMap in the ImmutableMap implementation \n\nI m not sure why ProGuard couldn t strip this out already  but ImmutableSortedMap and several of *its* dependencies were getting retained when ProGuard stripped ImmutableMap  and this fixes it \n\nEffects on ImmutableMapProGuard: ([ 87770 bytes => 59284 bytes\n93 classes => 64 classes\n601 methods => 363 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146505055\n  
1484,     Make RegularImmutableSet extend ImmutableSet directly  not ImmutableSet Indexed \n\nThe only side effects are that the iterator is slightly more efficient (less indirection)  and importing ImmutableSet by itself doesn t import helpers for ImmutableSet views of other collections   A minor gain  but they add up \n\nEffects on ImmutableSetProGuard: ([ 31249 bytes => 30128 bytes\n28 classes => 26 classes\n198 methods => 192 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146473318\n  
1485,     Avoid mentioning ImmutableSortedSet in the ImmutableSet implementation \n\nI m not sure why ProGuard couldn t strip this out already  but ImmutableSortedSet and several of *its* dependencies were getting retained when ProGuard stripped ImmutableSet  and this fixes it \n\nEffects on ImmutableSetProGuard: ([ 37524 bytes => 31249 bytes\n34 classes => 28 classes\n263 methods => 198 methods\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146427279\n  
1486,     Added a new tests case that proves RateLimiter works even for very small numbers \n\nFixes #2594\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146144129\n  
1487,     Make annotation dependencies non-optional \n\nFixes    com/google/guava/issues/2721\n\nDiscussion: [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146128219\n  
1488,     Deprecate several redundant methods in Files  cross-reference functionality\nadded to JDK s Files class (hence not in Guava s MoreFiles) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146069308\n  
1489,     Test that all MediaType constants are unique \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146033356\n  
1490,     Allow ignoring Constructors in NullPointerTester\n\nFixes #2728\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=146030420\n  
1491,     Among the Futures methods that run user callbacks  those that don t take an Executor will be deleted   This CL migrates them to the counterparts that take MoreExecutors directExecutor() as such Executor in the parameter list  exactly the way that the old method works \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145602579\n  
1492,     Make TearDownStack thread-safe\n\nI encountered an issue with some code that starts several servers in\nthe background (in parallel)  adding a TearDown to stop each one after\nthe test is finished  Fixing that issue in the calling code itself\nboils down to basically one of two choices: a  synchronzing my access\nto the tear down stack; or b  restructuring the code so the teardown\nhappens on the main thread  Solution  a  is incomplete  as I can\ t\nprotect the access to the stack from code at large (only my code)  and\nsolution  b  leads to a less-readable  more convuluted code  that\ndelays the registering of the teardown to much after it would\nnaturally go (and lead to incomplete tear downs  if the test were to\nstop before the moment where the tear down is registered) \n\nMaking TearDownStack thread-safe seems like a much better option \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145446978\n  
1493,     Among the Futures methods that run user callbacks  those that don t take an Executor will be deleted   This CL migrates them to the counterparts that take MoreExecutors directExecutor() as such Executor in the parameter list  exactly the way that the old method works \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145349663\n  
1494,     Among the Futures methods that run user callbacks  those that don t take an Executor will be deleted   This CL migrates them to the counterparts that take MoreExecutors directExecutor() as such Executor in the parameter list  exactly the way that the old method works \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145333015\n  
1495,     Add the method Network edgeConnecting() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145123448\n  
1496,     Link to    com/google/guava/wiki/Why-we-deprecated-Throwables propagate\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145114919\n  
1497,     Change NullPointerTester to work for Stream parameters \n\nThe default-generated proxy for Stream instance will throw ClassCastException if the method/constructor calls collect()  which is common \n\nThe reason for the exception is that stream collect() return R  which the proxy has no idea  that is a List<T>  or ImmutableList<T> or whatever  That type is unknown because of erasure \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145114911\n  
1498,     Support interface static methods and default methods for NullPointerTester \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145114472\n  
1499,     Add the methods Graph hasEdge() and ValueGraph hasEdge()  Also add some test coverage for ValueGraph asGraph() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=145109107\n  
1500,     Shuffling from internal-only change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144996795\n  
1501,     Finally add Tables synchronizedTable  which has seemed to continually fall through the cracks   \n\nFixes    com/google/guava/issues/1297\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144981241\n  
1502,     Introduce a package-private BaseGraph interface and AbstractBaseGraph class  This allows us to remove a large amount of code duplication  It also gives us a small reduction in constant overhead for Graphs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144926159\n  
1503,     Now that ValueGraph no longer extends Graph  change all the common graph interfaces to handle equals()/hashCode()  normally   Deprecate Graphs equivalent() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144788407\n  
1504,     Make it so ValueGraph no longer extends Graph  Instead  provide a ValueGraph asGraph() method  In a followup change  this will allow us to handle equals()/hashCode()  normally  and delete the Graphs equivalent() methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144787090\n  
1505,     Update README for Guava 21 0 final and set snapshot version to 22 0-SNAPSHOT \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144370430\n  
1506,     To fix external bug    com/google/guava/issues/2152 \n\nThis code follows the article emcmanus mentioned:\n   oracle com/blogs/kohsuke/2007/04/25/how-convert-javaneturl-javaiofile\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144362958\n  
1507,     Fix  Feburary  typo \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144227696\n  
1508,     Expose collectors for Multisets accepting per-element counts\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144222270\n  
1509,     Deprecate CheckedFuture \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=144206874\n  
1510,     Mention rc2 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143787902\n  
1511,     Annotate AbstractFuture with @DoNotMock \n\nIdeally we d annotate ListenableFuture itself  but I don t want to go down the road of fixing or suppressing all existing violations right now \nI m doing even AbstractFuture only because it will soon become a subclass of FluentFuture  which we want to be @DoNotMock \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143777863\n  
1512,     Better phrasing of Throwables getCauseAs() documentation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143599868\n  
1513,     Add @since to RangeMap putCoalescing() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143594298\n  
1514,     Add MoreFiles equal() - Files/MoreFiles feature parity \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143587980\n  
1515,     Add RangeMap putCoalescing() in order to support coalesced RangeMap entries \n\n   com/google/guava/issues/2665\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143507326\n  
1516,     Add example anti-pattern to getCauseAs() Javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143498116\n  
1517,     Apply `assertTrue(obj instanceof Class)` -> `assertThat(obj) isInstanceOf(Class class)` refactorings to c g common \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143496490\n  
1518,     Avoid isNotInstanceOf()  which can wrongly succeed under -XdisableClassMetadata \n\n   com/google/truth/issues/198\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143483705\n  
1519,     Mark RemovalListener and Weigher as Java 8 FunctionalInterfaces\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143461582\n  
1520,     Tweaks from shuffling of internal hash functions \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143402767\n  
1521,     Fix javadoc errors reported by IntelliJ IDEA \n\nFixes #2699\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143271383\n  
1522,     Remove more unused imports \n\nFixes #2698\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143270574\n  
1523,     Remove unused imports \n\nFixes #2697\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143186380\n  
1524,     Release @Immutable annotations in common graph \nWe ve already released them in other packages \n\nThis uses some of the previously unused imports that would be removed by #2697 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143185270\n  
1525,     Make Maps toImmutableEnumMap use j u f Function \n\nFixes    com/google/guava/issues/2694\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143120572\n  
1526,     Update Guava README to mention 21 0-rc1 \n\nAlso update headers to ATX style \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143120092\n  
1527,     Stop qualifying references to local types \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143116418\n  
1528,     Consistently use java util function interfaces in arguments to Collector factories (   com/google/guava/issues/2694)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143114856\n  
1529,     Add a TODO; inadvertently update some copyright dates \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143076499\n  
1530,     Add a toString() to the Runnable created by Futures addCallback   While not typically exposed to the user  the Runnable may still be seen in logging and/or debugging output \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=143062925\n  
1531,     Specify that EvictingQueue is FIFO \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142690159\n  
1532,     Fix occasional hangs \nAlso  include LinkedBlockingDeque in our public tests  since we ve required Java 6 for a long time \nPlus  use static imports  Stopwatch  and Truth  and reformat \n\nThe cause of the hang is that sometimes we cancel the producer task before it has even begun to execute  Part of the correct fix is probably to wait longer than 10ms  as martinrb has taught me     But for the moment  let s at least wait for the task to start before potentially cancelling it \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142670289\n  
1533,     Implement Throwables getCauseAs(Throwable  Class)  which safely casts a Throwable s cause and ensures that the exception thrown on a bad cast has the original exception as its cause \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142602139\n  
1534,     Add a custom gwt serializer for the Range object\n\nFixes #2687\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142559536\n  
1535,     Fix 2 javadoc typos introduced by [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142488570\n  
1536,     Inline two vestigial single-use helper methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142479573\n  
1537,     Update Truth dependency to 0 31 and add truth-java8-extension dependency for guava-gwt tests \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142186596\n  
1538,     Annotate Table and Multiset with @CompatibleWith\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142164308\n  
1539,     Improve EqualsTester doc\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142156023\n  
1540,     I think this recommendation will go over better  (It happens to be identical to\nwhat we already had on the java 7 branch )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=142039672\n  
1541,     guava-testlib: Cover Collections synchronizedNavigable Map Set () \n\nThe tests only cover regular Navigable Map Set  behavior for the\ncase of wrapping a Tree Map Set   They do not test the fact that\nthe wrapper is synchronized \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141996774\n  
1542,     Add  Sets Maps  toImmutableEnum Set Map  Collectors \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141945702\n  
1543,     Add a  constrainToRange  method to constrain a value to a closed interval \n\nEquivalent to Boost\ s clamp function [1  and numpy clip [2  \n\nMath min(Math max(x  min)  max) is much more difficult to read and error-prone \n\n[1     boost org/doc/libs/1_53_0/boost/algorithm/clamp hpp\n\n[2     scipy org/doc/numpy/reference/generated/numpy clip html\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141944536\n  
1544,     Fix typos in UnsignedInts docs\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141936357\n  
1545,     Add UnsignedInts  checked saturated Cast \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141789650\n  
1546,     Make ImmutableMultiset elementSet() return ImmutableSet \n\nFixes    com/google/guava/issues/1050\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141785980\n  
1547,     Remove unneeded JSNI from Objects equals\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141768910\n  
1548,     Warn about upcoming deprecation of Multimap static factory methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141596365\n  
1549,     Add a disclaimer to Files/MoreFiles getFileExtension that clarifies that it is unable to account for filesystem-specific quirks and instead only uses the information available in the File/Path API \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141517772\n  
1550,     Stop scaring Cache asMap() users away from new Java 8 methods  which Louis made\nwork really well long ago \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141456649\n  
1551,     Update Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141369309\n  
1552,     Add set-arithmetic operations to ImmutableRangeSet  as discussed in\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141337779\n  
1553,     Annotate Graph and Network with @CompatibleWith as appropriate \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141267927\n  
1554,     Annotate Multimap with @CompatibleWith annotations to enforce type-compatibility with keys and values as appropriate \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141203238\n  
1555,     Remove non-interface methods from Multimap implementations \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141187597\n  
1556,     Remove non-interface methods from TreeBasedTable implementations \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141187443\n  
1557,     Add Reflection annotation to j c g common util concurrent AbstractFuture for j2objc compile  in order to strip all other transpiled java reflections \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=141119133\n  
1558,     Add toJavaUtil instance method  which is handier and also doesn t have to be\nmarked @Nullable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=140905873\n  
1559,     Fix iteration+removal bug for reference-equal objects\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=140849556\n  
1560,     Adds @RetainedWith to ImmutableSet asList to prevent the reference cycle from\ncausing leaks in Objective-C \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=140738410\n  
1561,     Update Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=140673519\n  
1562,     Fail more clearly when escapers run out of buffer space \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=140383461\n  
1563,     Fix two bugs in MinMaxPriorityQueue (introduced in [  First is a bug in removeAt(int) that sometimes causes the wrong element to be removed  Second is a bug that sometimes causes certain elements to be iterated over more than once if elements were removed during iteration \n\nReported externally at    com/google/guava/issues/2658\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=140382230\n  
1564,     Add Booleans  true false First \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139831226\n  
1565,     Remove methods scheduled for deletion in Guava 21 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139609575\n  
1566,     fix typo\n\n by  ->  be  (3x)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139481101\n  
1567,     Add more docs on the relationship between c g c c view methods and Streams \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139396264\n  
1568,     Add flatteningToMultimap collectors \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139360343\n  
1569,     Migrate last users of ForwardingTestCase and delete it \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139349868\n  
1570,     Use ForwardingWrapperTest to simplify last round of ForwardingTestCase subclasses \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139318347\n  
1571,     Use ForwardingWrapperTester to simplify a few more Forwarding*Test \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139121126\n  
1572,     Override Multiset size() to clarify add additional javadocs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=139078681\n  
1573,     Suppress warning for modification of immutable collections\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138927630\n  
1574,     Use GWT s provided Arrays copyOf and Arrays copyOfRange where\npossible\n\nFixes #2635\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138921292\n  
1575,     Document and deprecate mutations on SetView  which already documents its unmodifiability  as suggested by cushon@ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138920681\n  
1576,     Reflect Navigable* support in GWT in TreeMultimap \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138910015\n  
1577,     Use ForwardingWrapperTester in Forwarding*MultimapTest \n\nForwardingObjectTester is a convenient thin wrapper around ForwardingWrapperTester  But it uses mockito and lives in common/util/concurrent  so not used here \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138905486\n  
1578,     Include java lang Lang from java util Util \nThis is necessary now that our java util contains classes that use java lang InterruptedException \n\nIn short:\n\nBefore:\n<module>\n <super-source path= super />\n</module>\n\nAfter:\n<module>\n <super-source path= super />\n <inherits name= java lang Lang />\n</module>\n\nFixes    com/google/guava/issues/2638\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138904012\n  
1579,     Add @Beta to the ImmutableTable collectors \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138675494\n  
1580,     Add mutable Table collector to Tables  including a version with a merge function to match Collectors toMap and ImmutableMap toImmutableMap \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138673160\n  
1581,     Add a value-merging collector for ImmutableTable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138670433\n  
1582,     Add mapWithIndex overloads mapping IntStream -> Stream  etc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138666464\n  
1583,     Improve the Spliterator of Multimap values-for-key collections \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138553300\n  
1584,     Make some AbstractMapBasedMultimap helper methods static   (As part of the process  make Sets unmodifiableNavigableSet GWT-compatible  as NavigableSet is no longer an issue )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138550340\n  
1585,     Fix some typos in guava-[gwt testlib tests /*\n\nFixes #2630\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138514647\n  
1586,     Automated g4 rollback of changelist 56995761 \n\n*** Reason for rollback ***\n\nUse Preconditions in primitives checkedCast methods  as [  renders the change in [  unnecessary \n\n*** Original change description ***\n\nDon t use Preconditions checkArgument in primitives checkedCast methods  as it boxes for what should be a very fast method \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138467875\n  
1587,     Warn about overriding Converter reverse() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138458677\n  
1588,     Update link to GWT docs that died with Google Code \n\nThe best substitute I ve found is a commit diff email \n\nThe copy of the page carried over from Google Code to Github doesn t include the relevant information  and it didn t come with history:\n   com/gwtproject/old_google_code_wiki/commits/master/ResourceOracle wiki md\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138424761\n  
1589,     Defer overlap checking in ImmutableRange Set Map  Builder to the build() call  which matches the behavior in ImmutableMap Builder and allows significantly faster handling of the case where ranges are inserted in predictable order \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138415685\n  
1590,     Go back to Collections sort() instead of List sort() to eliminate difference\nbetween forks  since the former just delegates to the latter anyway \n\nBasically rolls back the part of [ that wasn t already\ncorrected \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138232524\n  
1591,     Note that Guava for Java 8 is coming \n\nI guess we\ ll update this again -- possibly along with the Github tagline (    for Java 6+ )  editable (only?) straight from the Github UI -- when we actually release 21 0 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138213797\n  
1592,     Open source Comparators \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138197361\n  
1593,     Make SloppyTearDown logger private \n\nFixes #2624\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138190467\n  
1594,     Automated g4 rollback of changelist 138114495 \n\n*** Reason for rollback ***\n\nThese type inference errors seem to be fixed by using a newer JDK8 version \n\n*** Original change description ***\n\nFix JDK8 compilation errors in non-test code \n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138189338\n  
1595,     Continue uploading snapshots now that we re building only with JDK 8 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138189249\n  
1596,     Remove a redundant statement in TreeRangeMap remove() \n\nFixes #2167\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138184740\n  
1597,     Use a newer JDK 8 for travis build\n\nThe travis docker image uses JDK 8u31  which is ancient and has type\ninference bugs that are fixed at head  This change causes it to use\n8u111 instead:\n\nFixes #2625\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138184449\n  
1598,     Fix ForwardingMultimapTest\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138184166\n  
1599,     Fix links to javadoc io for Maven Javadoc Plugin\n\nFixes #2479\n\nFixes #2628\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138184010\n  
1600,     Simplify some Table implementation details \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138116540\n  
1601,     Add Multimaps toMultimap(keyFunction  valueFunction  multimapSupplier) collector \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138115283\n  
1602,     Fix JDK8 compilation errors in non-test code \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138114495\n  
1603,     Change travis config to not try to build on JDK7 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138107654\n  
1604,     Release Java 8 changes to Guava \n\n(Note: This will break the public Guava GWT tests  We ll come back to fix them )\n\nFixes    com/google/guava/issues/2585     com/google/guava/issues/2479     com/google/guava/issues/2029  and probably various other issues :)\n\nAlso relevant:    com/google/guava/issues/2591\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138100073\n  
1605,     Removes unnecessary (and unsafe) @Weak annotation that is causing crashes on\niOS \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=138077107\n  
1606,     Fixes a reference cycle between WeakValueEntry instances and their\nWeakValueReference \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137989327\n  
1607,     fix warning on eclipse\n\nFixes #2621\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137977709\n  
1608,     Fix typo in comments\n\nFixes #2166\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137968297\n  
1609,     Remove emulated=true   The class no longer needs to be emulated since there s nothing GwtIncompatible in it \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137960451\n  
1610,     Add @since for Interners Builder \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137843495\n  
1611,     Make Ints  to from ByteArray GWT compatible \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137840276\n  
1612,     Fix some typos in guava/*\n\nFixes #2618\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137827424\n  
1613,     Introduce InternerBuilder  which allows tweaking of the concurrency level of the to-be-built Interner \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137825551\n  
1614,     fixes serialization errors when serializing a\nRegularImmutableAsList\n\nthe issue occur when ImmutableList is included in gwt s serialization\npolicy and ImmutableSet not and a list created by ImmutableSet asList\nneeds to be serialized\n\nFixes #2614\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137724815\n  
1615,     Fix #1190\n\nBefore this fix  splitting a single character input string with a\nSplitter onPattern instance created with a zero-width regex pattern \nwould have caused the input string to be dropped from the output \nresulting in an empty iterable being returned rather than a single\nelement one \n\nThis fix ensures that the input passes through untouched \n\nFor example  whereas before in this code snippet  \ words\  would have\nbeen initialized as an empty iterable   \n\n   String string =  f ;\n   Iterable<String> words =\n       Splitter on(Pattern compile( \\\\b )) split(string);\n   // words is empty!\n\nFixes #2615  #2086\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137723825\n  
1616,     Add ImmutableList sortedCopyOf \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137571509\n  
1617,     Fix the extra space that shows up in ValueGraph s javadoc summary \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137559829\n  
1618,     Fix a couple things in README \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137558251\n  
1619,     Fix link to Release 20\n\nAlso remove the no-longer-needed link to v20-rc1   
1620,     Update README to point to 20 0 as the latest release and update version numbers to 21 0-SNAPSHOT \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137552649\n  
1621,     Migrate from deprecated Guava APIs to replacements:\n Objects firstNonNull() -> MoreObjects firstNonNull()\n Objects ToStringHelper -> MoreObjects ToStringHelper\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137538755\n  
1622,     Mark Utf8 as emulated  since it has @GwtIncompatible methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137532973\n  
1623,     Make Forwarding[Listenable Future GwtCompatible \n\nThey were marked with GwtIncompatible  but I do not think there s any reason to apply such a restriction \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137515337\n  
1624,     Make AtomicLongMap serializable \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137404691\n  
1625,     Fix links to murmurhash3 cpp\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137404185\n  
1626,     Start on documenting Iterables to explain the connection to Streams \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137220845\n  
1627,     Shuffling from internal-only change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137207933\n  
1628,     Lint Javadoc for HTML and syntax  and fix errors \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137191293\n  
1629,     Fix bad Javadoc tags \n\nFixes #2610\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137186740\n  
1630,     Update to GWT 2 8 0\n\nFixes #2608\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137183524\n  
1631,     Shuffling from internal-only change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137176212\n  
1632,     Graph[Builder  java et al : fix representation of angle brackets in Javadoc   *sigh*\n\ncgdecker@  we will need to cherrypick this one too for the v20 release   :(\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137161301\n  
1633,     Move ForwardingBlockingDeque into c g c u c \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137071571\n  
1634,     Update to GWT 2 8 0-rc3 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137051387\n  
1635,     graphs_explained md: file being added to facilitate reviewed changes to    com/google/guava/wiki/GraphsExplained \n\nIncludes updates to the top-level graph type class Javadoc also \n\nReplaces  iff  with  if  throughout common graph  to address GitHub issue #2605 \n\ncgdecker@  this is going to need to be cherrypicked for the final release \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=137047779\n  
1636,     Make Charsets ISO_8859_1 GwtCompatible \nAlso run google-java-format over the files \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136764462\n  
1637,     Add JDK Deque implementations to Queue tests \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136755080\n  
1638,     Stop stripping @LazyInit annotations \nThe annotation has been released in public Error Prone \n\n(roll forward of CL 136160211  which was rolled back in CL 136171136 because of a problem fixed in CL 136350404)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136589788\n  
1639,     Update Public Suffix List \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136425689\n  
1640,     Prepare for Public Suffic List update  which removes the  !  rule that this file was using \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136359859\n  
1641,     Fixes a documentation error regarding the return type/value\n\nFixes #2604  #2599\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136357364\n  
1642,     Shuffling from internal-only change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136201585\n  
1643,     Optimize allocation in nonCancellationPropagating\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136179307\n  
1644,     Add @SafeVarargs to some methods Lists \n\nI m also removing a couple of casts from Ordering<Comparable> to raw Ordering which were causing warnings and didn t seem necessary \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=136176905\n  
1645,     Update the Guava tagline on github \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135846196\n  
1646,     Allow MemoizingSupplier to release its delegate to the GC where possible \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135792840\n  
1647,     Add new RangeSet methods accepting Iterable<Range<C>> \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135723032\n  
1648,     Suppress an intentional type mismatch \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135710548\n  
1649,     As currently defined  the hashcode of every unordered EndpointPair which is a self-loop is zero! This is particularly not good for graphs with many self-loops  such as the transitive closure graph  where every node has an incident self-loop  Change hash to use + instead of ^ (this still preserves the property of symmetry  even with overflow) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135539805\n  
1650,     Bring over some API documentation from [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135513835\n  
1651,     Remove Iterator tester infrastructure  which has never had any real tests \n(We do perform IteratorTester-based testing through CollectionIteratorTester and ListListIteratorTester )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135501101\n  
1652,     Shuffling from internal-only change \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135500956\n  
1653,     Updated Guava README to mention Guava 20 0-rc1 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135492007\n  
1654,     Add @since 20 0 to BaseEncoding canDecode \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135482744\n  
1655,     Delete constraints APIs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135480846\n  
1656,     Rewrite MutableClassToInstanceMap to avoid using ConstrainedMap \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135408484\n  
1657,     Skip GWT tests on Travis \nThey re just too slow \n\nFixes    com/google/guava/issues/2568 once and for all  maybe \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135244971\n  
1658,     No need to disable doclint completely  Disabling high-level\nHTML issues should be enough\n\nFixes #2523\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135244931\n  
1659,     usage of American English spelling for  license \n\nFixes #2590\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135244865\n  
1660,     Remove stale links from  Learn about Guava   
1661,     Update removal target for APIs that should be removed in 20 0 but which actually won t be \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135140462\n  
1662,     Update Mockito version to 2 1 0\n\nFixes #2588\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135139422\n  
1663,     Fix typo in ValueGraphBuilder \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135057781\n  
1664,     Fix particularly unfortunate typo in ValueGraph javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=135011464\n  
1665,     Migrate users from HostAndPort getHostText() to HostAndPort getHost() \nThese methods behave identically  but the former name is deprecated \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134844363\n  
1666,     Implement edgeValue() via edgeValueOrDefault() instead of vice versa  For edgeValue() this is the same efficiency  but makes edgeValueOrDefault() perform fewer hash lookups \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134820696\n  
1667,     Remove ancient `@Beta` annotations  making these APIs  final  \n(They can still be removed via 2-year deprecation cycle )\nAlso touched up a bit of javadoc here and there \n\nHonestly  which exact libraries I chose to debeta in this CL are somewhat\nrandom (though leaning toward older things) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134817353\n  
1668,     Replace unnecessary StringBuilder calls with String concat\n\n(Roll forward the part of CL 134687034 that was rolled back in CL 134695981  The j2cl bug has been fixed )\n\nFixes #2582\n\nTested:\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134792990\n  
1669,     Remove CharacterFilter(BitSet) along with CharMatcher fromBitSet  which was introduced as a temporary helper for the migration \n(partial rollback of CL 132688558  plus some additional changes)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134770507\n  
1670,     Apply a handful of automated  returns @Nullable  suggestions \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134770298\n  
1671,     (partial) Automated g4 rollback of changelist 134687034 \n\n*** Reason for rollback ***\n\nj2cl bug?\n[ \n\n*** Original change description ***\n\nReplace unnecessary StringBuilder calls with String concat\n\nFixes #2582\n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134695981\n  
1672,     Remove reference to a deprecated method\n\nFixes #2580\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134689299\n  
1673,     Remove unused imports\n\nFixes #2583\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134687038\n  
1674,     Replace unnecessary StringBuilder calls with String concat\n\nFixes #2582\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134687034\n  
1675,     Apply IntelliJ-suggested language feature migrations \n\nAll code which initializes an IOException with a cause exception now uses the appropriate constructor (which was introduced in Java 6)  rather than initCause  Since Guava now depends on Java 6  this is a safe change to make \n\nFixes #2581\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134684204\n  
1676,     Remove redundant String format call\n\nFixes #2584\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134682786\n  
1677,     Change some javadoc to reference node U and V in the context of connectivity (to be consistent with methods on EndpointPair) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134464648\n  
1678,     Use an anonymous class for AbstractGraph edges() This was changed recently ([  because of some planned changes we ended up going a different direction with  so now I think it makes more sense inlined \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134453666\n  
1679,     Update Mockito version to 2 1 0-RC 1\n\nFixes #2567\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134425972\n  
1680,     Tweak Network edgesConnecting() javadoc so people don t think it returns a path of edges \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134419709\n  
1681,     Add paragraph to javadoc for Network edgesConnecting() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134408815\n  
1682,     Add edgeValueOrDefault() method to ValueGraph interface  and remove Map-returning edgeValues() for now  This CL effectively rolls back [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134341213\n  
1683,     Assorted cleanup of cancellation:\n- Eliminate our overrides of interruptTask() (other than one in a test of interruptTask()) \n- Make cancel() final under GWT \n- Simplify a few tests \n- Add or improve boilerplate comments about visibility of fields \n\nWe will likely not be able to make cancel() final in general (even if it weren t for our backward-compatiblity guarantees)  thanks to certain usages \nI had hoped that maybe we could in FluentFuture  I suppose that we still could  since we ll offer FluentFuture from(ListenableFuture)  and anyone who needs to override cancel() could override it in the delegate \n\n   com/google/guava/issues/1905\n   com/google/guava/issues/2075\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134216985\n  
1684,     Javadoc improvement(?) pass to Function/Functions  To be continued \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134125361\n  
1685,     Increase more timeouts to reduce test flakiness  as in CL 133260276 \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134086982\n  
1686,     Increase GWT timeout again \n\n   org/google/guava/jobs/161959726#L5083\n\nFixes    com/google/guava/issues/2568 again  hopefully \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134086956\n  
1687,     Fix comment that had gone out of date \n\nThis used to be true:\n[ \n\nBut it hasn t been for a long time:\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=134001575\n  
1688,     Remove a stray  the  \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133962640\n  
1689,     Fix a typo \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133909277\n  
1690,     HostAndPort java: Deprecate getHostText() in favor of getHost() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133907054\n  
1691,     Update GWT deps to 2 8 0-rc2 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133854841\n  
1692,     Bump Travis timeout  It s still too low  e g  \n\n   org/google/guava/builds/161636738\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133848972\n  
1693,     If File exists throws an exception when constructing a ClassPath instance  ignore that entry in the classpath rather than propagating the exception \n\nFixes    com/google/guava/issues/2390 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133844760\n  
1694,     Put scary doc on hashString and less scary doc on hashUnencodedChars \n\nI ve based the doc on what we currently have in the Hasher class doc \n\nMotivation:\n[ [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133835490\n  
1695,     Remove the offset and size fields from RegularImmutableList \n\nThese seemed to be designed to create a faster sublist()  but our base\nimplementation of sublist seems likely to be quite similar in performance \nPlus by eliminating these fields we:\n\n* eliminate a preconditions check and extra field reads on each call to  get(int)\n* save 8 bytes for the fields (and maybe more for alignment on some platforms)\n\nThis design seems to be from the very first version of RegularImmutableList and there don t appear to be benchmarks covering ImmutableList get()   so this change is somewhat speculative   I m curious what your thoughts are \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133794845\n  
1696,     Use ArrayDeque and PriorityQueue under GWT (where they re newly available)  and provide synchronizedQueue  synchronizedDeque  and MinMaxPriorityQueue there \nThis also lets us delete our manual implementation of TreeTraverser and avoid LinkedList internally \n\nFixes #2545\n\n(Roll forward CL 131198531  which was rolled back in CL 131218608 because of a GWT bug that has since been fixed )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133714567\n  
1697,     Tell Travis to wait for Maven to finish \n\nCurrently  it times out:\n   org/google/guava/jobs/161103688\n\nFollowup to CL 133592825  which it turns out effectively converted a silent timeout (   com/google/guava/issues/2568) to a noisy one \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133612375\n  
1698,     Increase GWT test timeout \nApparently the GWT Maven plugin considers tests to have succeeded if they time out!\n\nFixes    com/google/guava/issues/2568\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133592825\n  
1699,     Small refactor of AbstractGraph edges() (move to inner class instead of anonymous class) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133384196\n  
1700,     Some cleanup in EndpointPairIterator \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133383011\n  
1701,     Delete MapConstraints notNull()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133379674\n  
1702,     Remove Constraint stuff from package-info \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133300878\n  
1703,     Some additional test coverage for undirected graphs + minor cleanup \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133282385\n  
1704,     Create TreeTraverser using() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133270986\n  
1705,     Delete MapConstraints constrainedMultimap()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133265325\n  
1706,     Make flaky test less likely to flake \nThe test currently fails if a thread stalls for more than 50s  I ve increased that to 9999ms \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133260276\n  
1707,     Fix another typo in javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133213816\n  
1708,     Fix typo in javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133213802\n  
1709,     Fix imports in all Guava packages \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133190481\n  
1710,     Delete MapConstraints constrainedSetMultimap() and constrainedSortedSetMultimap()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133180608\n  
1711,     Delete MapConstraints constrainedBiMap()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133175256\n  
1712,     Avoid using  i e   in first sentence of javadoc so the javadoc generator doesn\ t prematurely cut off the summary \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133166740\n  
1713,     Try to explain the Stream equivalent for filter(Class) a little better \n(And stop caring about the paltry benefits of `e -> e instanceof Foo` over `Foo class::isInstance` )\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133156773\n  
1714,     Update an @link in javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133143698\n  
1715,     Optimization of RegularImmutableMap \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133136645\n  
1716,     RegularImmutableSet extends ImmutableSet Indexed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133133513\n  
1717,     Improve docs on the FluentIterable-Stream connection (part 1) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133039225\n  
1718,     Add some test coverage for ElementOrder comparator() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133024805\n  
1719,     Prepare for Java 8 \n\nFallout:\n\n1  This temporarily breaks the j2objc cycle whitelist \nEventually we will provide different versions of it for Java 8 and pre-Java 8 \n\n2  This incidentally disables pluggable regex support \nEventually we will turn it back on for Java 8 and leave it off for Android \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132882204\n  
1720,     Fix typo \n\nFixes #2564\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=133001763\n  
1721,     Add another test for Iterables removeIf \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132998224\n  
1722,     Add the  vtt type used for HTML5 video subtitles \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132996392\n  
1723,     Increase test coverage for Networks  Add clarifying statement in javadoc for inEdges() and outEdges()  Modify the sanityCheck method to also check that a set is equals() to its ImmutableSet copy (this will also make sure the set doesn t have duplicate elements) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132956078\n  
1724,     Optimize Graphs transitiveClosure() to avoid copying to a List in the undirected case  Credit to jbduncan for the idea!\n\nNote: Change reachableNodes() from HashSet to LinkedHashSet since the latter has has slightly better iteration performance  and we re now iterating over the set repeatedly \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132927288\n  
1725,     Add note about replacements for BYTES constants  isFinite()  and hashCode() methods in Java 8 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132923187\n  
1726,     Warn Android users that default Stopwatch behavior may be bad for their health \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132910015\n  
1727,     Temporarily allow creation of a CharMatcher from a BitSet for internal purposes \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132688558\n  
1728,     Update Public Suffix List \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132612873\n  
1729,     Use AssertionError for default case \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132476284\n  
1730,     Clean up some exceptions  In general  the pattern we try to follow is that if the user provides an invalid argument (e g  a node not in a graph)  we throw an IllegalStateException with a detailed error message  If it s an internal method and something is wrong on our end  we throw an IllegalStateException (and don t usually bother with an error message) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132447786\n  
1731,     Swap the nodes of an unordered EndpointPair to prevent callers from relying on the  ordering  of an unordered pair  Remove some superfluous  this   prefixes in ElementOrder (we generally only include  this   when assigning to a member variable) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132439705\n  
1732,     Add a test for passing ListenableFuture<?> instances to whenAllComplete \nIt doesn t always work as we d like :(\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132437172\n  
1733,     Run g4 fix on all the files in common graph \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132405519\n  
1734,     Move some javadoc out of the graph implementation classes (where we don t really expect people to be poking their noses)  Mention briefly in the graph interfaces \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132390285\n  
1735,     Avoid duplication of code in ImmutableValueGraph  Surprised I didn\ t realize this sooner :-/ the backing graph is a ValueGraph  so we can just call through  This also let\ s us do some other nice things:\n\n1) Get rid of the static methods in AbstractValueGraph \n2) Get rid of the static method in AbstractGraph  That was actually for a different reason (because of ForwardingObject)  but the only thing ForwardingObject did for us was forward the toString() method which we actually *don\ t* want \n3) Allow us to  cache  the edge value map  and have both the mutable and immutable implementations inherit that behavior  If someone is calling e g  graph edgeValues() get(   ) in a loop this should be a noticeable improvement \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132330742\n  
1736,     Rename parameter \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132286166\n  
1737,     Increase test coverage for common graph  Ensure properties besides just those covered by Graphs equivalent() are copied over as well \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132210161\n  
1738,     Some minor common graph tweaks to avoid equals() checks when unnecessary \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132168152\n  
1739,     Refer to Network references as  network  instead of  graph   Note that we\ ve already started doing this  but (as you can see) are fairly inconsistent with it \n\nRename GraphType to EdgeType in  Graph Network EquivalenceTest\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132130888\n  
1740,     Suppress some unused warnings in Eclipse \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132121576\n  
1741,     Eliminate checkNotNulls where they\ re clearly they\ re not necessary (i e  when we dereference the variable on the immediately following line)  Also remove the  variableName  message in some of them  particularly when they\ re internal variables \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132120234\n  
1742,     guava-testlib: Cover Collections unmodifiableSortedMap()\n\nTested: [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132105239\n  
1743,     guava-testlib: Cover checked  Sorted  Map Set \n\nTested: [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132091633\n  
1744,     guava-testlib: Cover Collections unmodifiableMap\n\nTested: [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132070464\n  
1745,     Add some missing @Nullable annotations \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132065891\n  
1746,     Specify in the javadoc the behavior of Graphs equivalent() when both parameters are null  Run g4 fix on the file \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132046690\n  
1747,     Refactor test utility methods to match graph mutation signatures \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=132005311\n  
1748,     Fix Eclipse warning (missing #) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131988897\n  
1749,     ValueGraph java: modify edgeValues() Javadoc to clarify that the behavior of get() if passed an EndpointPair not in the graph is different from the behavior of edgeValue() if passed two nodes not connected in the graph \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131985226\n  
1750,     Add ValueGraph edgeValues()  Remove ValueGraph edgeValueOrDefault(node  node) \n\nThere\ s a few nice things we get out of this  An easy way to address all the values in a ValueGraph as a single collection (edgeValues() values())  An easy way to get an edge value if you\ re dealing with  EndpointPair s  And if you\ re on Java 8+  Map has getOrDefault() plus some other nifty methods \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131959724\n  
1751,     Scope an (internal) return type to UnmodifiableIterator \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131915927\n  
1752,     Make the  constructor  methods EndpointPair ordered()/unordered() public (and make the ones accepting a Graph/Network package-private) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131908058\n  
1753,     Changes to common graph  Sorry for the churn  but after this things should be settled down for a while (and we\ ll be launching v20 soon!)  Changes include:\n\n-Revert the interface names back   BasicGraph  is now  Graph  (BasicGraph was probably a a poor choice)  and  Graph  is now  ValueGraph   The  node only  Graph interface is at the top of the interface hierarchy  and ValueGraph extends it \n-To facilitate the above  the various graph interfaces do *not* specify equality  and the default implementations use reference (identity) equality \n-Add static methods Graphs equivalent(   ) for users that want value-based equality \n-Rename Endpoints to EndpointPair  Rename nodeA()/nodeB() to nodeU()/nodeV() and expose isOrdered() \n\nMinor changes:\n\n-Undid the small refactor from [  since the original structure makes it easier for the Immutable classes to have the right hierarchy (i e  ImmutableValueGraph extends ImmutableGraph  ImmutableNetwork asGraph() is an ImmutableGraph) \n-Added an  isEquivalentTo  method to NetworkSubject (formerly GraphSubject) in labs  Eventually we should get around to having a single truth import for both Graphs and Networks \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131906631\n  
1754,     Fix the serialization of sparse immutable tables \n\nThe  cellColumnIndices  fields of DenseImmutableTable and SparseImmutableTable\nappeared to serve the same purpose  but were actually slightly different  This\nbroke serialization of sparse immutable tables  Additionally  our serialization\ntests did not cover sparse immutable tables \n\nRename the SparseImmutableTable field for clarity  and add tests covering\nsparse immutable tables \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131855143\n  
1755,     Add some javadoc stating that immutable graphs are thread safe \n\nSlightly refactor code so enterprising users looking at the implementation don t think that s not the case :) And more seriously  this is a better design that makes us less likely to introduce bugs  so it s a good change all around  Thanks Greg!\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131507603\n  
1756,     Try to explain Sets newHashSetWithExpectedSize() more accurately and usefully \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131318810\n  
1757,     Fix typo just because \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131316999\n  
1758,     Make it more difficult to get StackOverflowErrors from hooking chains of futures together with setFuture\n\nThere are two ways such an SOE can occur given a chain of AbstractFutures strung together with setFuture\n1 when the  innermost  future completes  the sequence of directExecutor listeners will all execute inline  recursively\n2 when the  outermost  future is cancelled  AbstractFuture cancel() propagates cancellation to the future that has been assigned to it via setFuture since this is  inline  we can run out of stack\n\nThe first one can be solved by modifying the way we execute listeners and detecting this case explicitly\n\nThe second one would technically allow for the same solution but a number of users depend on their cancel methods actually getting called so we need to limit this solution to TrustedFuture subclasses and mark TrustedFuture cancel final   I can break this change into a separate CL but i thought it might be easier to review altogether  let me know \n\nThis of course doesn t solve every way you could get such a StackOverflowError  just a few potentially common ones \n\n(This may help with problems like    com/google/guava/issues/2254)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131312174\n  
1759,     Add @Beta to new method that hasn t yet been API reviewed \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131302300\n  
1760,     Make nonCancellationPropagating available to GWT \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131285023\n  
1761,     Automated g4 rollback of changelist 131198531 \n\n*** Reason for rollback ***\n\nThe ArrayDeque implementation in upstream GWT has a bug that is being fixed in    googlesource com/#/c/16680/\n\n*** Original change description ***\n\nUse ArrayDeque and PriorityQueue under GWT (where they re newly available)  and provide synchronizedQueue  synchronizedDeque  and MinMaxPriorityQueue there \nThis also lets us delete our manual implementation of TreeTraverser and avoid LinkedList internally \n\nFixes #2545\n\n***\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131218608\n  
1762,     Use ArrayDeque and PriorityQueue under GWT (where they re newly available)  and provide synchronizedQueue  synchronizedDeque  and MinMaxPriorityQueue there \nThis also lets us delete our manual implementation of TreeTraverser and avoid LinkedList internally \n\nFixes #2545\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131198531\n  
1763,     Fix bug in Helpers isEmpty \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131104085\n  
1764,     Allow atomic removal of 0 values from AtomicLongMap\n\nI think this is a pretty sensible thing to expose as an atomic sort of alternative to\nremoveAllZeros  We could also expose remove as is \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131078929\n  
1765,     NullPointerTester should not require @Nullable on the param of an equals() override\n\nThis is currently being worked around with things like:\n\nnew NullPointerTester()\n     ignore(AutoValue_MyValueType class getMethod( equals   Object class))\n       \n\nThe work-arounds prevent AutoValue from being treated as a pure implementation-generating processor \n\nFixes #1819\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131074329\n  
1766,     Add @Nullable annotations \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131061728\n  
1767,     Disabling SelfEquals check for test\n\nWe intend to make this a compilation error in [  s Java compiler  so it is necessary to fix existing occurrences first to avoid breaking builds \n\nSee [  for more details \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=131053298\n  
1768,     Add Vector tests to guava-testlib s TestsForListsInJavaUtil\n\nTested: [ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130970050\n  
1769,     Prefer hardcoding constant over calculating at runtime \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130969942\n  
1770,     Return the underlying graph/network for multiple calls to Graphs transpose()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130954918\n  
1771,     Add Graphs transpose() static utility methods for viewing the transpose of a graph  See:    wikipedia org/wiki/Transpose_graph\n\nAdd Graphs asBasicGraph()  One downside to having BasicGraph *under* Graph in the type hierarchy (still overall a good idea though :P) is that people are likely to write methods that accept  BasicGraph<N>   even though they COULD accept  Graph<N  ?>   A little bit of javadoc is not going to stop that from happening  so might as well make it less painful to handle  Also  if someone e g  wants to make a MutableBasicGraph copy of a Graph  there was really no way to do that before  They can now do:\n\nGraphs copyOf(Graphs asBasicGraph(myGraph));\n\nNote that we cannot simply change the MutableBasicGraph version of copyOf() to accept a Graph<N  ?>  because then it would have the same type erasure as the MutableGraph version of copyOf() but a different return type  ImmutableBasicGraph copyOf() has the same issue  because ImmutableBasicGraph extends ImmutableGraph which has it\ s own copyOf() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130939830\n  
1772,     Minor javadoc tweak \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130896308\n  
1773,     Remove some superfluous checkNotNulls in NetworkConnections  On the nodes/edges  these are internal classes and those parameters have already been checked  On the calls to super remove*  they ve also already been checked \n\nNote that I previously made a similar change for the GraphConnections \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130873616\n  
1774,     Fix indentation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130870792\n  
1775,     Change allowsSelfLoops() to default to false for Graph/NetworkBuilder \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130840045\n  
1776,     Delete the unused Graphs parallelEdges()  Promote Graphs adjacentEdges (back) to interface method  with a default impl in AbstractNetwork \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130803846\n  
1777,     Make Endpoints implement Iterable \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130800281\n  
1778,     Fix some stale language in a test \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130796558\n  
1779,     Fix typo\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130785660\n  
1780,     Slightly update javadoc for inducedSubgraph()  Since edges() has different return type in Graph vs Network  have to use slightly different terminology here \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130776654\n  
1781,     Change javadoc to refer to Mutable* interfaces  Technically  Graph/Network don t dictate anything when adding edges  because they don t have methods for adding edges \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130760757\n  
1782,     Add NetworkMutationTest (parallel to GraphMutationTest) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130753566\n  
1783,     Expand on  question 3  from the graph/network javadoc  which I felt was a little hard to parse  Also some misc  javadoc cleanup \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130752546\n  
1784,     Fix typo\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130699020\n  
1785,     Super nit: move allowsParallelEdges() above allowsSelfLoops() in the Network interface (this is the order they re presented in NetworkBuilder  as well as the order in the implementing class) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130698523\n  
1786,     Fix compile-time constant expression overflows\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130697805\n  
1787,     Some more cleanup of javadoc  Add specific language regarding undirected graphs since I feel the behavior there is non-obvious \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130684893\n  
1788,     Update Network asGraph() s edge value methods to be consistent with how they re defined in the interfaces  Update tests to fail with the old implementation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130683572\n  
1789,     Completely overhaul top-level javadoc for common graph interfaces in light of the new interface hierarchy  Spend a lot of time answering what I think will be the #1 question users have: should I use a Graph or a Network? Spend a lot less time defining graph theory terms  that s what wikipedia is for :) plus the method-level javadoc defines terms as necessary  Overall  make it a lot more concise  Javadoc that s too long for anyone to bother reading is just as good as javadoc that doesn t exist!\n\nAlso  ran g4 fix on these files \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130673920\n  
1790,     Update some javadoc in the graph builders  add sample code  Run g4 fix on the files \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130658795\n  
1791,     More test coverage for graphs! Test adding and removing nodes/edges repeatedly  Currently only for Graph  will add similar coverage for Network later \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130657984\n  
1792,     Optimize directed graphs to consume less memory  at the cost of additional code complexity  Some very rough benchmarks also seem to indicate this has slightly faster runtime  I suspect this is due to improved cache performance/locality when using a single Map \n\nMemory: Directed mutable graphs consume less memory across the board  with graphs of small degree benefiting the most (memory consumption around 75% of previous)  Directed immutable graph memory consumption is more of a wash - going down slightly for graphs of small degree and up for graphs of large degree \n\nRuntime: Adding a few million edges seems to be about 10% faster \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130653738\n  
1793,     Add *degree() methods back to Graph/Network interfaces  with correct formal definition this time (self-loops count twice) \n\nReplace references (in affected tests) to assert True False  with Truth assertThat() is True  False  \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130651507\n  
1794,     Remove reference to hypergraphs in test!\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130646222\n  
1795,     Move Network validation into a static method (will be useful for adding Network coverage to MutationTest later) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130645401\n  
1796,     Add more test coverage for Immutable graphs/networks \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130643917\n  
1797,     Change the definition of hashcode for Networks (map of edges to endpoints) to more closely mirror hashcode for Graphs (map of edges to value)  Also the map we re basing the hashcode on is now half the size for undirected networks  which is nice (a downside is that isolated nodes don t affect the hashcode  but I m not too worried about that) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130560997\n  
1798,     Rename SimpleEdgesConnecting to EdgesConnecting to be consistent with our naming pattern for NetworkConnections (*NetworkConnections and *MultiNetworkConnections) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130551638\n  
1799,     Update some javadoc  Remove old @SuppressWarnings \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130551561\n  
1800,     Make equals/hashcode methods in AbstractGraph/Network final  since changing the behavior of these while still implementing the interface is incorrect \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130551324\n  
1801,     Rename ValueGraph to Graph \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130546021\n  
1802,     Update error message for calling source/target on endpoints of an undirected edge \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130530287\n  
1803,     Rename  Graph  to  BasicGraph   Flip the inheritance hierarchy  Now  BasicGraph<N> extends ValueGraph<N  Presence> \n\nNote that in a followup CL   ValueGraph  will be renamed  Graph   and this will make more sense :)\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130529648\n  
1804,     Add Hashtable to TestsForMapsInJavaUtil \n\nTested: [ \nAs a sanity check  also verified that that target fails if I put a  throw new AssertionError()  in testsForHashtable()\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130452528\n  
1805,     Shuffling from internal-only change \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130430413\n  
1806,     Slightly update wording on Graph equals() javadoc \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130410280\n  
1807,     Delete the NodeConnections interface  As an implementation detail we previously took advantage of the shared interface  but that is no longer the case  and such a trivial interface doesn t seem worth keeping around \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130403467\n  
1808,     Add a bit of test coverage for value graphs \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130333367\n  
1809,     Delete the unused  @GoogleInternal copy* methods (in particular  copyNodes  copyEdges  and their Predicate-based counterparts)  We re missing the ValueGraph version for all of these  and in the copyEdges case  also the Graph version  The Predicate-based methods have the obvious issue that we d want to release with the Java-8 Predicate  not the Guava Predicate  copyNodes() and copyEdges() have the unfortunate issue of there not being an obvious correct answer for the whether the source or destination should come first in the parameters  And finally  copyEdges() requires us to decide what to do in the event that the destination graph doe not contain the incident nodes (and neither option is particularly intuitive)  Overall  we d rather not have to support these methods at this point \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130333320\n  
1810,     Define equality for Graphs so that a Graph never equals a ValueGraph  This allows ValueGraphs to have the expected behavior when you query valueGraphA equals(valueGraphB) (i e  values are taken into account as well) \n\nSince ValueGraph now defines its own equals/hashcode  add AbstractValueGraph to facilitate clients getting this behavior \n\nAdd ValueGraph versions of copyOf() and inducedSubgraph() \n\nAdd a package-private ForwardingGraph class for the non-value graph classes (ConfigurableMutableGraph  ImmutableGraph) to use \n\nRename AbstractConfigurable* classes to Configurable* (and make non-abstract) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130329432\n  
1811,     Move GraphProperties isCyclic() to Graphs  delete the GraphProperties class  Rename method to hasCycle()  because isCyclic() implies that it might be O(1)  Also to be consistent if we ever add other  has  methods (e g  hasSelfLoop()  hasTriangleSubgraph()  etc ) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130327382\n  
1812,     Add the methods Graphs reachableNodes() and Graphs transitiveClosure()  Three teams have already implemented similar logic! Also  looking through the remaining uses of the legacy Digraph  the only thing preventing many from being converted to common graph is the lack of transitive closure  So I d say there s very high demand for this \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130307025\n  
1813,     Fix source links \n\nFixes    com/google/guava/issues/2548\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130300093\n  
1814,     Clean up the javadoc for the mutable graph interfaces \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130297160\n  
1815,     Delete TestGraphBuilder/TestNetworkBuilder  Remove the testing subpackage from common graph \n\nNote that similar functionality will be introduced if we add ImmutableGraph Builder classes (see b/30855928)  but that probably won t be for a little while \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130280956\n  
1816,     Shift the nodeOrder/edgeOrder methods down in the Graph/Network interfaces  These are definitely  properties  of the graph  and should be under the label as such  Note that the AbstractConfigurable* implementation classes already have the methods in this order \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130227111\n  
1817,     ValueGraph implementation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130174881\n  
1818,     Add some test coverage \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130173111\n  
1819,     Update isCyclic() to work on both directed and undirected graphs  This is part of the effort to move it to Graphs (which I ll do in a followup CL)  so we can delete the GraphProperties class!\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130163573\n  
1820,     Expand test coverage  Make validateGraph() a static method so ValueGraphTest can use it (a MutableValueGraph is a not MutableGraph so it can t extend AbstactGraphTest directly)  Move removeEdge_existingEdge() up in the test hierarchy \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130160765\n  
1821,     Update Ordering javadoc to explain the Java 8 situation  Now with branchiness \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130097437\n  
1822,     Use BitSet under GWT  as it s now available there \nThis lets us remove our manual emulation of BinaryTreeTraverser  and it moves us a step closer to allowing precomputed CharMatchers there (if we want to someday  which we might not due to memory concerns) \n\nFixes #2546\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=130010612\n  
1823,     Fix compile-time constant expression overflows\n\nThis change fixes compile-time constant expressions that overflow  in\npreparation for enabling a new compiler error \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129993557\n  
1824,     Use StringBuilder append(a) append(b) instead of sb append(a + b) in Iterators java \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129988431\n  
1825,     Rename addEdgeV2() to addEdge() \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129976233\n  
1826,     Endpoints java: revert language change in Endpoints adjacentNode()\ s exception message;  does not contain  seems more appropriate even though Endpoints is no longer a Collection    is incident to  implies that  Endpoints  is really a misnomer for  Edge   which is sort of OK for Graph but not so much for Network  and  contain  works in both cases \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129924124\n  
1827,     Bump timeout after recent flaky failure \n\n[ \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129894231\n  
1828,     Some tweaks to the Endpoints class:\n\n-Expose nodeA() and nodeB() as public methods \n-Don t have Endpoints implement Collection \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129826551\n  
1829,     Remove logging of regex compiler \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129777911\n  
1830,     Make ImmutableTable serializable \n\nAdd a common serialized form for ImmutableTable implementations which preserves\nall external behavior (e g  view iteration orders) through round-trip\nserialization \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129756122\n  
1831,     Remove a few unnecessary casts that were previously required due to the old  ? super  signature  Some slight tweaks to AbstractNetwork toString() method (no behavioral changes) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129696909\n  
1832,     Remove the  ? super  from the return type of the nodeOrder/edgeOrder methods  It doesn\ t actually provide any additional functionality for the user  just a mild annoyance  Also this is in line with the recommendation here:\n\n[ \n\nIn partiular:\n\n In return types\n\nAvoid using wildcards in return types and constants  You should almost never need to do this  and it puts a burden on the user  \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129689329\n  
1833,     Add the following method to the Graph interface:\n\nSet<Endpoints<N>> edges()\n\nwhich replaces the existing Graphs endpoints() method  but makes it more discoverable and also makes  size() O(1) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129680891\n  
1834,     Improve EvictingQueue addAll() s performance by skipping the head of\ncollections larger than the size of the queue  Also clear the backing\nqueue in such cases to avoid calling  remove() n times \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129679957\n  
1835,     while-statement did not loop\n\nA return statement occurred in the first\niteration of the loop making the loop\nstatement redundant  as it is semantically\nequivalent to an if-statement \n\nReplaced the loop-statement with the\nequivalent if \n\nFixes #2541\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129649564\n  
1836,     AbstractGraphTest: use Truth-style assertions where possible \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129645612\n  
1837,     Fix a test not marked @Test\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129588434\n  
1838,     Rename MutableGraph addEdge(N  N) to MutableGraph putEdge(N  N) (to indicate that Graphs do not support parallel edges and for consistency with the upcoming ValueGraph interface)  Change the order of parameters in MutableNetwork addEdge(E  N  N) to MutableNetwork addEdge(N  N  E) \n\nThe migration for the latter will be done in two steps  in order to avoid silently breaking someone with a WIP change involving a Network<N  E> where N == E  The method with the new parameter order will temporarily be called addEdgeV2  and is planned to be changed back to addEdge the evening of Wednesday  August 10 \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129529711\n  
1839,     Add a service provider for the regex library used by common base (e g  Splitter onPattern) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129471520\n  
1840,     Update to GWT 2 8 0-rc1 \n\nThis requires that we treat the GWT sources as Java 8  That should be harmless \nIt also requires that we upgrade the version of Firefox that we use to run GWT tests (not that we run GWT tests very regularly)  Probably also harmless?\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129440214\n  
1841,     Demote Network adjacentEdges() from an interface to a utility method \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129380888\n  
1842,     Make the Endpoints subclasses private  Expose a package-private isDirected() method  The instanceof check felt a little hacky to me \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129352385\n  
1843,     Preliminary ValueGraph interfaces \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129344333\n  
1844,     Use J2ObjC s @RetainedWith annotation to prevent leaks resulting from reference\ncycles between inverse maps \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129344101\n  
1845,     Remove the *degree() methods from the Graph/Network interfaces  In a followup CL  we ll add a (correct) implementation of degree() as a static utility method in Graphs  But I d like to get the client-affecting changes (i e  ones where the longer I wait the more merge conflicts I get) out ASAP \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129170874\n  
1846,     Minor style tweak (doesn t actually change anything  but the better symmetry makes me happy) \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129060870\n  
1847,     Flatten the Graph->Network hierarchy  In other words  it\ s no longer true that a Network IS A Graph  Instead  provide an asGraph() method that allows for viewing a Network as a Graph  Also  update a lot of code that should have been using Graph (instead of Network) to use Graph \n\nThe motivating reasons for this are:\n\n1) Graphs  by definition  do not support parallel edges  So to have Network be a Graph and break that is a little odd  Instead  we can delegate this to asGraph()  stating that the graph will have an edge between node A and B if the Network has an edge between A and B \n\n2) Equality/hashcode semantics  It was rather unfortunate to require Graph to have explicit knowledge of its subinterfaces  so that they could have their own definition of equality that\ s incompatible with Graph  With this change  Graph has only one definition of equals/hashcode (like basically every other Java data structure) and subinterfaces (e g  the upcoming ValueGraph) are expected to follow that \n\n3) We\ re going to add an edges() method to Graph  but Graphs will have a slightly different concept of edges than Networks  In a Graph the edges ARE the endpoints  while in a Network the edges HAVE endpoints (and ARE the user-provided objects) \n\nNote that there are a LOT of places where we refer to networks as  graph  in the code  This CL does not make an attempt to change those  It\ s uncertain whether we want to change those to  network  or continue to use  graph  as a generic term  but that can be handled in a separate CL if necessary \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=129020913\n  
1848,     Redesign of MapMakerInternalMap with the motivation of saving a lot of memory by not wastefully having stuff that s unneeded  The algorithm (the j u concurrent ConcurrentHashMap-inspired segments of hash tables) is untouched \n\nMemory usage of MapMakerInternalMap is important because it s used under the covers by Interners#newWeakInterner \n\nThe problems the new design fixes\n---------------------------------\n\nThere are four relevant cases of MapMakerInternalMap  one for each combination of weak/strong keys and weak/strong values  The old code implemented all of these exactly the same  from a memory layout perspective  For example  in the worst-case of strong-keys-strong-values  there s the following waste (all numbers assume 64-bit jvm with Xmx < 32G)  in decreasing order of severity:\n\n* per-entry: 16 bytes for the StrongReference object\n* per-segment: 32 bytes for the ReferenceQueue object for the values  32 bytes for the ReferenceQueue for keys  8 bytes for the storing the references to both of those) \n* per-map: 8 bytes for storing the references to keyStrength and valueStrength  4 bytes for storing the reference to valueEquivalence (just comes from valueStrength) \n\nFor maps with strong values  there s also the minor issue that a new StrongReference wrapper is created whenever the value of a key is changed  This puts unnecessary  albeit probably not that much  pressure on the GC \n\nThe approach\n------------\n\nWe want to get rid of the above waste but we don t want to sacrifice any type safetey  Here s how we do this:\n\n* We introduce four different entry implementations and four corresponding Segment implementations (for each key & value strength pair)  These implementations have optimal memory usage wrt the waste discussed above \n* We introduce a base InternalEntry interface  parameterized on its own implementation (i e  CRTP -    wikipedia org/wiki/Curiously_recurring_template_pattern)  This is so the Segment implementation can be generic in the actual Entry type and still be type safe) \n* We introduce a base Segment class  parameterized on its own subclass (CRTP) as well as on the type of the InternalEntry implementation  The latter is so that the Segment implementations know how to safely efficiently handle the corresponding InternalEntry implementations \n* And  tying it all together  we introduce a InternalEntryHelper class  parameterized on the InternalEntry implementation type  Specific InternalEntryHelper implementations know how to safely and efficiently deal with the corresponding InternalEntry and Segment implementations \n* Each of the four InternalEntryHelper implementation classes are singletons (they have no state!)  The MapMakerInternalMap has a reference to the specific InternalEntryHelper implementation it needs - this is the _only_ overhead of our approach \n\nThe existing MapMakerInternalMap tests unfortunately poke around into the internals in a hacky and unsafe manner  To continue to support this  we have XXXForTesting methods that do casts and call into the type-safe methods alluded to above \n\nResults\n-------\n\nGuava s memory benchmark\ntl;dr:\nStrongKeysStrongVals (size = 1M) -> 28 3% memory savings\nWeakKeysStrongVals (size = 1M) -> 24 8% memory savings\nStrongKeysWeakVals (size = any) -> 48 bytes per-map memory savings\nWeakKeysWeakVals (size = any) -> no change\n\nFuture Work\n-----------\n\nThe same design optimization could be applied to LocalCache \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128986019\n  
1849,     Update Guava s J2ObjC dependency to version 1 1  This version includes the\n@RetainedWith annotation \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128842160\n  
1850,     Rename otherNode() to adjacentNode() in Endpoints \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128831933\n  
1851,     Add guarantee of insertion-based order to HashBiMap \nPreserve insertion order in GWT as well \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128827385\n  
1852,     Update MutableGraph javadoc to state in no uncertain terms that there can only be a single edge connecting a pair of nodes  Delete TODOs regarding parallel edges for Graphs  which we will not do \n\nRegarding motivation:\n\n1) Having a Graph with parallel edges complicates things a fair bit  There are certain assumptions you can make about graphs without parallel edges that you cannot make about graphs with parallel edges  Given that we don\ t even expose an  allowsParallelEdges()  method  there\ s literally no way to future-proof yourself if we did later add Graphs with parallel edges  We\ d just break a lot of code \n\n2) In order for a Graph with parallel edges to actually make sense  we would have to expose several additional methods (at the least  getEdgeCount(nodeA  nodeB)  setEdgeCount(nodeA  nodeB)  and allowsParallelEdges())  Given that Graph is supposed to be the simpler interface  this would be unfortunate \n\n3) With my proposed ValueGraph interface  a ValueGraph<N  Integer> would be exactly analogous to a Graph<N> with parallel edges  but with clearer semantics  However  I feel points #1 and #2 are sufficient to resolve this matter \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128824588\n  
1853,     Automated g4 rollback of changelist 128499385 \n\n*** Original change description ***\n\nSuper source Strings#isNullOrEmpty to improve JS performance \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128709966\n  
1854,     Object shouldn t be tested for equality with itself  This was identified using Error Prone check \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128657125\n  
1855,     Object shouldn t be tested for equality with itself  This was identified using Error Prone check \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128588135\n  
1856,     Automated g4 rollback of changelist 128473677 \n\n*** Original change description ***\n\nSuper source Strings#isNullOrEmpty to improve JS performance \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128499385\n  
1857,     Super source Strings#isNullOrEmpty to improve JS performance \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128473677\n  
1858,     Graph java: fix typo in documentation\n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128397707\n  
1859,     Super source Objects to have Objects#equal(String  String) to improve JS performance \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128390183\n  
1860,     Fix typo in Splitter limit javadoc \n\nAlso  grammar pedantry:  including the last  is a parenthetical but was missing a comma  Adding a third comma was too many  so I moved it to the end \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128381331\n  
1861,     Add MapMakerInternalMap to BenchmarkHelpers  mostly for the sake of getting support for MapMemoryBenchmark \n\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128380910\n  
1862,     Remove unused import \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128196200\n  
1863,     Optimize Ascii toUpperCase/toLowerCase for generic charsequences\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=128182386\n  
1864,     Replace calls to deprecated Throwables propagate() with  throwIfUnchecked(e)  (if it is possibly unchecked) and  throw new RuntimeException(e)  \n\nFor files in javatests/  just wrap + throw a new RuntimeException \n\nWe are removing all calls in preparation for deleting the method \n\nMore information: [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127774261\n  
1865,     Update imports ordering to the new java import order \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127770522\n  
1866,     Update imports ordering to the new java import order \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127766798\n  
1867,     Change HashBasedTable to be backed by LinkedHashMaps so iteration order is deterministic \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127625411\n  
1868,     Add some test coverage for removeEdge() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127584532\n  
1869,     An optimization for removeNode() on undirected graphs \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127583081\n  
1870,     Update imports ordering to the new java import order \n\nThe import order is changing because the current rules are unnecessarily complicated  difficult to configure in IDEs  and difficult for users to remember \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127568338\n  
1871,     Rename NodeConnections to NetworkConnections and NodeAdjacencies to GraphConnections  Have a base interface called  NodeConnections   This change is just cosmetic right now (although we do refer to these things as  connections  everywhere  so it\ s nice to actually have  NodeConnections  be the base interface)  but it will make more sense in the context of ValueGraph (there will be a ValueGraphConnections) \n\nHowever  I think this change is worthwhile (or at least not harmful) even outside of ValueGraph  And a rename like this  if bundled like with a large functional CL  will clutter things up a lot \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127552346\n  
1872,     Rephrase the equals() javadoc in Graph  Remove same statement from Network since there currently are no subinterfaces of Network  Clean up a reference to  relation  (that\ s impressive it snuck in considering we ditched that name long before we actually checked in any code!) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127547695\n  
1873,     Small tweaks to some methods in AbstractGraph/Networks \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127546964\n  
1874,     Eliminate some duplicated code \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127538907\n  
1875,     Remove the public equal/hashCode/toString methods from Graphs  There are a variety of reasons for doing this:\n\n1) No other class in Guava does this  For example  there\ s no Sets hashCode() or Multimaps equals() \n2) The instanceof checks and casting is annoying  and would only get substantially worse if we introduced an additional core interface  Yes  this is hidden from the user  but might as well take advantage of polymorphism and avoid it entirely \n3) Reduced API surface area  I don\ t like exposing multiple ways to do the exact same thing  The user shouldn\ t have to wonder  hmm    is Graphs equal(foo  bar) always going to give me the same result as foo equals(bar)?  \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127507834\n  
1876,     Delete the ImmutableSet copyOf() inside edgesConnecting() for immutable networks  Three main points here:\n\n1) The comment is no longer true  edgesConnecting() used to be evaluated as the intersection of two sets  but is now done differently (we did add a unit test to make sure they\ re equal though!) \n\n2) With the introduction of  SimpleEdgesConnecting   in the no parallel edges allowed case  this is already super efficient (i e  everything is O(1))  There\ s no need to wrap it in an immutable set \n\n3) With the introduction of  MultiEdgesConnecting   even in the parallel edges allowed case  methods such as  contains()   size()  and  isEmpty() are all O(1) if successors() has been invoked  We lose the O(1) runtime of those methods if we always make an immutable copy of the set first \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127470554\n  
1877,     Update the javadoc for the MutableGraph/Network interfaces  Update three things:\n\n1) Remove the reference to  optional operation   This was before the mutation methods were split out into Mutable* interfaces  Now that they are  the language doesn\ t really make sense - if an implementation didn\ t support it they just wouldn\ t implement the Mutable interface! jrtom@ mentioned the possibility of e g  a MutableGraph that only supports adds but not removes  This is possible  but seems relatively unlikely  and it\ s not like this stops them from throwing UOE  I just don\ t think it\ s worth mentioning in the javadoc any more \n\n2) Mention what the default behavior of addEdge() is  My coworker using graph for the first time was trying to figure it out  and was frustated because he had to dive into the implementing class logic to figure it out (and it wasn\ t particular easy)  We should just state up front what we do \n\n3) Make it clear when addEdge() will throw an IllegalArgumentException  We no longer have to add clarifying javadoc in the implementing classes \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127449329\n  
1878,     Fix typo in GraphBuilder nodeOrder() javadoc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127438088\n  
1879,     Update edgesConnecting() size() and edgesConnecting() isEmpty() to be more efficient for Networks with parallel edges  In particular  take advantage of the cached successor multisets  Currently the methods are always O(D)  This will also be O(D) if successors hasn t been invoked  but will be O(1) for future calls  For example  with something like:\n\nedgesConnecting(n1  n2) size()\nedgesConnecting(n1  n3) size()\nedgesConnecting(n1  n4) size()\n   \n\nAll calls after the first will be O(1)  as it invokes successors(n1)  This makes it so that  if someone has a dense graph with O(N^2) edges  calling edgesConnecting() size() or edgesConnecting() isEmpty() on every pair of nodes is O(N^2) (i e  amortized O(1)) rather than (N^3) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127381761\n  
1880,     Add the Forwarded header (RFC 7239) to HttpHeaders java \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127381583\n  
1881,     Make ImmutableNetwork copyOf() more efficient in the case of directed networks that allow self loops  Sets intersection() size() is linear in the size of the first set  whereas this is O(1) assuming degree() is O(1) (which at least in our impl  it is) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127357590\n  
1882,     More test coverage!\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127355528\n  
1883,     Suppress error for comparing objects to themselves\n\nMore information: [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127346658\n  
1884,     Make Endpoints of(Un)Directed package private  I don\ t think it makes sense to create Endpoints outside the context of a Graph  Also  exposing these methods might encourage clients to try to make graphs with  mixed  (directed and undirected) edges  or even use Endpoints as a hacked up Pair \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127230487\n  
1885,     Fixed the typo for javadoc\n\nFixes #2528\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127197947\n  
1886,     Update link to Style Guide \n\nFixes #2526\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127196987\n  
1887,     Remove the isDirected() method from Endpoints  Also remove Graphs addEdge()  which was only used inside Graphs  and I wasn t a huge fan of (it s super easy to implement yourself if you need the functionality) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127142376\n  
1888,     Remove the method Graphs roots()  “roots” as we’re defining them isn’t really a standard term of art (I can only find references to ROOTED graphs  which have exactly one root)  Additional reasons to remove:\n\n1) It\ s super easy to implement yourself  either inlined as you\ re processing nodes or as a static method \n2) The definition is even weirder for undirected graphs \n3) If we have this method  we should have also have the parallel method  Set<N> leafs(Graph<N> graph)   However   leafs  is not well-defined in graph theory  It can either mean  nodes with an out degree of zero  OR  nodes with a degree of one  \n4) There\ s only 1 real caller  Technically there\ s 2  but one of them seems to have a bunch of methods that are dead \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127139526\n  
1889,     Split testFuzzyCompare()  which seems to be the main test to time out recently \nThis should reduce the flakiness to more tolerable levels \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127115918\n  
1890,     Migrate from easymock to mockito in javatests/com/google/common/collect\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127112056\n  
1891,     Migrate from easymock to mockito in javatests/com/google/common/hash\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127106598\n  
1892,     Enforce that various iterators are unmodifiable to prevent potential bugs \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127101187\n  
1893,     Fix typo in ForwardingMultiset \n\nPS: It would appear this class and many like it have between 0 and low single digit usage in all of [  (and of those uses  some are    questionable)  I wonder how useful these classes really are :-/ although I m sure we re not in any rush to deprecate them  just an observation \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127094899\n  
1894,     Slightly rearrange the methods in NodeConnections (I prefer all the Set-returning methods to be together)  The subclasses still implement the methods  in order  due to their particular hierarchy \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127035785\n  
1895,     Update Public Suffix List \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=127000299\n  
1896,     Fix 2 small typos in common math Stats classes \n\n   com/google/guava/issues/2522\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126994349\n  
1897,     Migrate from easymock to mockito in javatests/com/google/common/io\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126993635\n  
1898,     Increase timeout for each open-source GWT test method from 5 minutes to 10 \nThe test that does static initialization of MathTesting is timing out \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126971588\n  
1899,     Migrate from easymock to mockito in javatests/com/google/common/util/concurrent\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126971523\n  
1900,     Migrate from easymock to mockito in javatests/com/google/common/cache\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126971307\n  
1901,     Update definitions of equals() and hashCode() for Graph/Network  The new hashCode() shouldn t change any behavior (of course) but should be more efficient for directed graphs  equals() does change behavior in certain corner cases (see [  but it was arguably broken before  To keep things simple  we now flat out say directed != undirected \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126965617\n  
1902,     Update MapCacheTest so it s not flaky  Ensure the mapCache is cleared before every test so state is not persisted across tests \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126918869\n  
1903,     Delete MapMaker makeComputingMap() and ComputingConcurrentHashMap \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126901506\n  
1904,     Add ConcurrentHashMultiset create(ConcurrentMap) \nDeprecated and  MOE insert public  for ConcurrentHashMultiset create(MapMaker) \nMigrate [  users to the latter \n\n
1905,     Add the method Graphs endpoints() that does what you expect: returns the endpoints corresponding to each edge in a graph  The whole  we print every edge in an undirected graph\ s toString() twice  and that\ s a feature not a bug *wink*  annoyed me  Also there\ s other cases  such as copyOf() and and getWeaklyConnectedComponents()  where we don\ t want to process each edge twice  In those particular cases they happen to be no-ops  but for cases where it\ s not  or where you do something computationally expensive  doubling up on undirected edges is bad :(\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126884706\n  
1906,     Avoid using MapRetrievalCache unless node lookup is expensive  The class constructs  CacheEntry  objects when adding to the cache  which if the cache is not used makes us slower  and even if the cache is used is roughly a wash speed-wise if map lookup is fast (e g  a HashMap or ImmutableMap  and an object with a reasonable hashCode()) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126874176\n  
1907,     Move oppositeNode() from Graphs to Endpoints and rename it otherNode()  Also make a few methods final  It changes the following code:\n\nGraphs oppositeNode(graph  edge  node);\n\nto this:\n\ngraph incidentNodes(edge) otherNode(node);\n\nThe oppositeNode() method in Graphs always kind of bugged me  It takes three parameters  which is a lot for a utility method  More importantly  the last two parameters were both of type Object  with no  obviously correct  ordering  so it was easy to accidentally swap them and get a run-time error  Finally  with the introduction of the Endpoints class  this moves the method to the more logically correct place  Someone looking for this method was probably already dealing with incidentNodes() and Endpoints  It makes a lot more sense to say  hey  sorry you can\ t call target() since this is undirected  try otherNode() instead!  if it\ s in the same class \n\nIn terms of the change itself  the more fluent style seems like a big win  And there\ s not even a burden to third-party implementations of Graph/Network  because we will have the only implementations of Endpoints (the constructor is private)  So I see only positives and no negatives for this change \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126859221\n  
1908,     An optimization for Graphs and Networks  inspired by Michael  Introduce  MapIteratorCache  and  MapRetrievalCache   MapIteratorCache is extremely light-weight and optimizes the follow case:\n\nfor (N node : graph nodes())  \n  graph foo(node);\n \n\nwhile MapRetrievalCache is slightly heavier and additionally optimizes the following cases:\n\ngraph foo(node);\ngraph bar(node);\n\nOR\n\ngraph foo(node1);\ngraph foo(node2);\ngraph bar(node1);\ngraph bar(node2);\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126763076\n  
1909,     Permit forwarding from a Future<V> to a Future<? extends V> \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126696175\n  
1910,     Fix typo \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126665968\n  
1911,     Replace use of MapMaker makeComputingMap in Ordering \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126444165\n  
1912,     Fix DoubleMath rounding bug identified in Guava issue 2509 \n\nThe approach is a little changed from the pull request #2511 -- more exhaustive testing  and it does more math in long arithmetic before casting back to a double \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126331169\n  
1913,     Fixing missing dep in concurrent \nNot sure how targets are only now failing: [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126318059\n  
1914,     Update comment to be more accurate/descriptive \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126308525\n  
1915,     Use N and E instead of S and T in get*MapForBuilder() methods \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126305518\n  
1916,     Automated g4 rollback of changelist 125826869 \n\n*** Reason for rollback ***\n\nThe class-level Javadoc for the top-level interfaces is going to be refactored soon  and I don t want to lose these comments in the process \n\n*** Original change description ***\n\nI was reading through the class-level javadoc (which could use some cleaning up  but I think jrtom said he s working on that)  and this passage struck me  The latter two options don t seem like something that would actually happen  For example  we allow nodes of any type  so an impl where the nodes store the topology and cannot be shared across graphs doesn t really make sense \n\nEven beyond that  this just seems like low-level implementation stuff that users of the Graph/Network interfaces shoul   \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126258496\n  
1917,     Suppress SelfComparison error \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126106581\n  
1918,     Mention getOnlyElement() as an alternative in the Javadoc for getFirst() \n\nThis came up in my Java readability review ([ as I had been\naware of getFirst() but not of getOnlyElement()  Indeed  I think many of the\ncases where it s valid to only look at one element from an iterator are\nactually cases where there s only one element in the iterator  and so I suspect\nI won t be the only person who s using getFirst() when they are really looking\nfor getOnlyElement() instead \n\nThis CL also reformats the rest of the Javadoc for getFirst() to 100 characters\nto be consistent with the new paragraph that I added \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126073627\n  
1919,     Super nit fix: move <p> into the same line as comment (this is how rest of common graph is formatted) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=126025605\n  
1920,     Have more helpful error messages \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125997504\n  
1921,     Makes copyNodes() and copyEdges() @GoogleInternal  kevinb mentioned earlier that he thinks those methods should be @GoogleInternal for now \n\nAlso  change copyOf() slightly to have separate impls for the predicate and non-predicate versions  The non-predicate version can be slightly more efficient by avoiding incident node containment checks when adding edges \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125995006\n  
1922,     Delete the common graph algorithms subpackage  Move the    unusual retainWithTransity() method into the same package as its only caller  Move inducedSubgraph() into Graphs (dropped the  get  prefix) and tried to apply some sense of ordering to the class \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125983079\n  
1923,     The JavaDocs for LinkedHashMultimap#keySet() don t specify the iteration order of the returned set  so making the documentation more specific  The new JavaDocs were copied from Multimap#keySet()  with the 2nd paragraph added by me \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125961795\n  
1924,     Use some fancy logic to reduce the number of equality checks in certain cases for undirected endpoints \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125901163\n  
1925,     Move the static  constructor  methods in ElementOrder above the class methods (as done in e g  Endpoints)  Also  remove  final  from the static methods  since it\ s not standard practice to include on static methods (and the class itself is final) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125901101\n  
1926,     Update example code snippet slightly (existing one doesn t techincally compile) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125873135\n  
1927,     Fix broken generic types in ElementOrder  Added two tests  neither of which compile with the existing code!\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125863282\n  
1928,     Fix typo \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125863097\n  
1929,     I was reading through the class-level javadoc (which could use some cleaning up  but I think jrtom said he s working on that)  and this passage struck me  The latter two options don t seem like something that would actually happen  For example  we allow nodes of any type  so an impl where the nodes store the topology and cannot be shared across graphs doesn t really make sense \n\nEven beyond that  this just seems like low-level implementation stuff that users of the Graph/Network interfaces shouldn t have to care about \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125826869\n  
1930,     Make the load factor for  inner  (per node/edge) hash maps and sets 1 0  Note that non-multi networks use HashBiMaps  which already have an unmodifiable load factor of 1 0 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125796201\n  
1931,     More safety checks when adding and removing edges  plus simplify the code  Rather than return a boolean  addEdge now asserts that it *always* add an edge (we avoid calling it at all if it wouldn t)  Similarly for removing edges  removeEdge() now asserts that it always removes an edge - unless the graph is undirected and it s a self-loop edge \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125784233\n  
1932,     Make degree(node) on directed networks O(1) instead of O(D)  at the cost of a teensy bit of memory (a self loop counter)  In actuality it doesn t seem to take up any extra memory  perhaps due to how the object is padded/aligned  Additionally  this CL makes iterating through incidentEdges() slightly faster on directed networks if no self-loops are present  In the undirected case  adding and removing self-loop edges is now slightly faster \n\nNote: this CL makes it so that every call to *degree(node) is O(1)  as explained here:\n\ndegree(node)\ndirected graphs: we store a map that combines predecessors + successors\nundirected graphs: easy\ndirected networks: now O(1) :P see description above\nundirected networks: easy\n\noutDegree(node)\ndirected graphs: we store an explicit successor count\nundirected graphs: same as degree(node)\ndirected networks: easy  we store an out edges map\nundirected networks: same as degree(node)\n\ninDegree(node)\ndirected graphs: we store an explicit predecessor count\nundirected graphs: same as degree(node)\ndirected networks: easy  we store an in edges map\nundirected networks: same as degree(node)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125754834\n  
1933,     Make sure all public classes/interfaces in common graph have @Beta and @since \n\nAlso  a little bit of narcissism :) add myself to authors to the main interfaces (Graph/Network/MutableGraph/MutableNetwork)  I normally wouldn t list myself first but the convention seems to be alphabetical order \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125691964\n  
1934,     Delete some incorrect javadoc  ImmutableGraph doesn t evan *have* an edgesConnecting() method  For ImmutableNetwork  the statement isn t quite true either  In the case of no parallel edges allowed  it s actually O(1) (thanks to [  Given that  I think it makes sense to just remove the statement entirely \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125686408\n  
1935,     Remove trailing whitespace \nIt s marginally complicated a couple Java 8 branch integrations for me \nAlso  add trailing newlines  and replace tabs with spaces \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125668183\n  
1936,     Remove some TODOs I added a while ago that probably shouldn t be TODONE \n\nRegarding Java 8: we ll want to minimize the code differences between the two versions of Guava  and avoiding repeating a 3 line static method doesn t really seem worth the difference \n\nAllowing users to specify the expected degree is in direct opposition with specifying expected edge count  since given two out of (node count  edge count  degree) you can always derive the third  Specifying node/edge count seems like the most reasonable combination  and it s what s already implemented \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125642711\n  
1937,     Make the predicate versions of copyOf() not call expected(Node|Edge)Size  because that may allocate too much memory if most elements don t pass the predicate \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125642699\n  
1938,     Test ImmutableMap equals in ImmutableMapTest testEquals \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125597377\n  
1939,     A teensy weensy optimization for the no-self-loops case \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125596848\n  
1940,     Interrupt the producer thread instead of assuming it will exit naturally \nIf the SynchronousQueue producer doesn t try to put() in time for the consumer to accept the value  it hangs forever \nThe result is a flaky test \n\nAs part of this  I ve removed the producer s ability to fail the test if it s interrupted \nThat s because I need to be able to interrupt the SynchronousQueue put() operation \nI could find a way to continue to fail on interrupts in other cases  but it doesn t seem valuable enough to be worth the trouble \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125565652\n  
1941,     Always wait around for the expected interrupt \nIn the current code  we sometimes stop waiting too early and never receive it  The main thread then waits forever to hear that the interrupt was received \nThe result is a flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125560176\n  
1942,     I thiiiink there s a chance the current removeEdge() impl could still cause a CME  Either way  I have a change that avoids the issue and is more efficient  by removing the self node from the predecessors/successors before we start iterating through them \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125536109\n  
1943,     Fix typo in private method in Graphs \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125493802\n  
1944,     I remember why I did the parallel edge check before the self-loop check now! In the MutableGraph case  it s actually more efficient  because we can return early (rather than just throw an exception) in that case  And I have the same order in MutableNetwork just for consistency \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125487467\n  
1945,     Propagate toString() through TrustedListenableFutureTask  for better debug \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125473814\n  
1946,     Remove a retain cycle in FluentIterable \nEven though  this iterable = this  is a legitimate java code  it causes a memory leak when it is transpiled to objective-c via j2objc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125467534\n  
1947,     Rename orderNodes() to nodeOrder() and orderEdges() to edgeOrder() \n\nNote that I feel this is actually *more* in the spirit of the guidelines we established \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125467297\n  
1948,     Merge GraphErrorMessageUtils into GraphConstants \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125402353\n  
1949,     Improve the performance of addEdge()  This doesn t change the big O runtime (it s already O(1))  but it does eliminate several hash lookups :)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125397749\n  
1950,     Add Graphs replaceEdge() (@GoogleInternal for now)  Especially useful if a caller has immutable weighted edges and needs to update an edge weight  Given that we want to encourage immutable elements (as opposed to the mutable weighted edge my team ended up using :P)  seems worthwhile \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125392004\n  
1951,     Prefer TODO with bug number over alias  plus add a couple TODOs re: graphs with parallel edges \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125370345\n  
1952,     Lower  expected degree  for internal maps  of which we have O(N) per graph/network  This greatly reduces memory consumption for graphs of small average degree  in exchange for a small performance hit for graphs of large average degree \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125369630\n  
1953,     Update variable names that referenced old node1/node2 names with new A/B names \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125368052\n  
1954,     Delete the TODO to  try creating an abstract superclass that NetworkBuilder and GraphBuilder could derive from  \n\nI investigated this  and although it\ s possible  you get almost no benefit from it  There\ s only 3 rather trivial methods that end up the in the abstract class (4 if we eventually allow parallel edges on Graphs)  and the subclasses still have to override them to scope the return type (you don\ t want to actually return the abstract base class to the user!) \n\nIf the method names were buildGraph() and buildNetwork() instead of just build()  it would be much more reasonable   Then we wouldn\ t need an abstract class at all and NetworkBuilder could extend GraphBuilder  But I don\ t think the extra verboseness for callers is worth being able to simplify some code on our end  Also  I don\ t think being able to use a NetworkBuilder to build Graphs (not Networks) is an ability anybody particularly wants \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125365378\n  
1955,     Give a more realistic usage example for EqualsTester \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125338610\n  
1956,     Update the immutable and mutable versions of copyOf() to have the correct restriction: don t make copies of Networks that allow parallel edges \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125224138\n  
1957,     Mark methods in Graphs that take a Predicate as @GoogleInternal until we can migrate to JDK 8 s Predicate  Rename the merge*From() methods to copy*()  Change the behavior of copyEdges from copying over all edges (and adding incident nodes as necessary) to only copying over edges where the incident nodes are already present (and thus not adding any additional nodes)  as was discussed in API review \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125178123\n  
1958,     Clean up the implementation of roots() and move it to Graphs  This is part of the effort to delete GraphProperties java  as discussed earlier  The other method in GraphProperties is isCyclic()  which I d like to handle separately (e g  it should handle undirected graphs if it s going to be in Graphs  or maybe moved to labs/) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125176121\n  
1959,     Update toString() for Endpoints in undirected case  Also  change test to use EqualsTester  which gives us coverage for hashCode() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125174596\n  
1960,     Remove the redundant (inherited from Graph) adjacentNodes() method from Network  as well as some other javadoc cleanup I missed in [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125172452\n  
1961,     Work around javac bug \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125169771\n  
1962,     Delete the existing Hypergraph interface  We\ re pretty much 100% sure this is not where we want it in the interface hierarchy  and leaving it there as a public interface isn\ t helping anyone \n\nAlso  remove references to  hyperedges  and  hypergraphs  in the javadoc/g3doc  No proposal that we\ re considering will Graph/Network support hyperedges \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125098921\n  
1963,     Change the return type of Network incidentNodes() from Set<N> to Endpoints<N>  This also replaces the source() and target() methods on Network and moves them to Endpoints \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125092926\n  
1964,     Make unmodifiableNavigableMap covariant in V \n\nFixes #2499\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125058909\n  
1965,     Update javadoc  The previous sample code was not actually doing what the comment describes  In particular  it was calling adjacentNodes() instead of successors()  The comment says  all nodes reachable from node   but adjacentNodes() will also travel AGAINST the direction of the edge (not necessarily  reachable  in the directed case) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=125022633\n  
1966,     Fixes mismatched parentheses in Graph javadoc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124975157\n  
1967,     Remove @Beta from Escaper and UrlEscapers \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124844727\n  
1968,     Add a Charmander to CharMatcher \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124753981\n  
1969,     Fix usage example of ImmutableSortedMultiset Builder \n\nFixes #2500\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124729333\n  
1970,     *Builder  graph classes: support element ordering using a new ElementOrder class \n\nMemoryTester: add accessors for bytesPerElement and constantOverhead \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124401032\n  
1971,     Fix some Graph/Network javadoc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124387755\n  
1972,     Document that we don t forward calls to default methods  except when we do \nAlso  standardize on <b> for Warnings \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124370400\n  
1973,     Allow linear white space before  ;  character in MediaType \nThis is allowed by the relevant specs  AFAICT \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124283184\n  
1974,     Move Graphs selfLoopPredicate() to GraphsTest java\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124271785\n  
1975,     Suppress warning from comparing Object to itself  This was identified using Error Prone \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124270612\n  
1976,     Add some missing @Nullable annotations to InetAddresses \nUse static imports for Preconditions \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124267108\n  
1977,     Push asList() cache down into ImmutableCollection subtypes to avoid holding onto the extra reference in ImmutableList \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124186158\n  
1978,     Support owner type subtype relationship in TypeToken isSubtypeOf() and TypeToken getSubtype()\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=124038295\n  
1979,     Make a couple of optimizations to UnsignedLongs toString(x  radix):\n\n* If x > 0  use Long toString  The JDK code is essentially the same for radices other than 10  and is much faster for 10 \n\n* If radix is a power of two  use shifting and masking instead of division and remainder \n\n* If radix is even  simplify the initial division that extracts the last digit \n\nSee also    com/google/guava/issues/2478 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=123940513\n  
1980,     Change MoreExecutors invokeAnyImpl to accept <long  TimeUnit> \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=123436300\n  
1981,     <td><b> => <th>\n\nAlso move the <blockquote> tags  The forthcoming Javadoc formatter will probably move them somewhere else  I kind of want to remove them  but I assume they re there to indent the table \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=123426877\n  
1982,     - Update links to URL and HTML specs where necessary \n- Use https for all links  new and old \n- Remove claim that the *fragment* will be percent-encoded at *parse* time  as this is apparently not true:\n Unfortunately not using percent-encoding is intentional as implementations with majority market share exhibit this behavior  \n   spec whatwg org/#fragment-state\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=123321924\n  
1983,     Remove unnecessary string concatenation\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=123253690\n  
1984,     Deprecate Ordering binarySearch \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=123249690\n  
1985,     Add a fallback in Ordering leastOf to ensure the worst case of the quickselect component is bounded to O(k log k) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=123038053\n  
1986,     Make iterating through predecessors() and successors() more efficient on directed graphs  Avoids doing a hash lookup for every element in the table  A rough benchmark shows that iteration takes slightly less than half the previous time \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122853102\n  
1987,     Restrict Unsafe getLong() hack to x86_64 (amd64) and AArch64 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122817458\n  
1988,     Adding WOFF2 media type \n\nBootstrap uses this file format  which is then filtered out in apps framework since this type isn t defined \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122743223\n  
1989,     Use    @code @  or similar formulations to prevent things like  @Override  from being interpreted as tags \nRemove some @Override tags entirely \nMake other fixes as necessary \nMove some code in the direction of the one-ish true-ish template-ish  <pre>    @code      </pre>  \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122443929\n  
1990,     Rewrite the LongMath SIEVE_30 constant in a more readable form  The new form is not numerically equivalent but the difference is only in the ignored bits 30 and 31 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122266867\n  
1991,     Update javadoc of Futures#dereference to point to correct #transformAsync method \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122184701\n  
1992,     Update public suffix list \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122019817\n  
1993,     isPrime: try to improve javadoc\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=122003309\n  
1994,     Expose  Int Long Math isPrime to external users \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121998832\n  
1995,     Remove emptyIterator() from Guava \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121572091\n  
1996,     Deprecated Throwables propagateIfInstanceOf() and propagateIfPossible() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121520908\n  
1997,     Annotate the GWT client copy of ImmutableList add* with @CanIgnoreReturnValue \nThe server copy already has this annotation \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121516405\n  
1998,     Delete unused methods in ConfigurableMutable* \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121494418\n  
1999,     Inline remaining usages of Throwables propagate  We are removing all calls in preparation for deleting the method \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121489882\n  
2000,     Make the AbstractConfigurable* classes actually abstract \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121411875\n  
2001,     Rename ConfigurableNetwork->ConfigurableMutableNetwork and ConfigurableGraph->ConfigurableMutableGraph  A followup CL will rename AbstractConfigurableNetwork->ConfigurableNetwork and AbstractConfigurableGraph->ConfigurableGraph (this is being done in two seperate CLs otherwise critique doesn t understand it s a rename)  The above mentioned classes are not actually abstract  so calling them Abstract* is wrong \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121393585\n  
2002,     Adds content security policy (CSP) headers  which are used by older user agents \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121387099\n  
2003,     Remove @Beta from Throwables throwIfInstanceOf() and throwIfUnchecked() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121375812\n  
2004,     Deprecated Throwables propagate()\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121375741\n  
2005,     Fix a minor oversight in using a constant in LongMath for its intended purpose \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=121145870\n  
2006,     Predicates subtypeOf  a correctly-named duplicate of Predicates assignableFrom  Deprecate the latter  Add javadoc \n\n   com/google/guava/issues/1444\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120843247\n  
2007,     Delete warning that TimeLimiter might be changed significantly \n\nIt is just as API-unfrozen as any other @Beta API -- no more  no less \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120835232\n  
2008,     Added NaCL binaries to media type list \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120819293\n  
2009,     Add some missing @Beta s for new stuff in 20 0 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120809190\n  
2010,     Delete GenericMapMaker parent class now that generic parameterization is no longer needed (caching APIs are gone) \nDelete unused NullEntry and AbstractReferenceEntry \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120734317\n  
2011,     Add spaces to annotations inside comments to prevent them from being interpreted as real code when the file is parsed by tools that behave like the checker framework (see    cs washington edu/checker-framework/current/checker-framework-manual html#annotations-in-comments) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120731063\n  
2012,     Delete MapMaker softValues() \nDelete unused NullConcurrentMap and NullComputingConcurrentMap implementations \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120709309\n  
2013,     Remove MapMaker expireAfterWrite()  the expirationQueue  ticker related functionality  and all expirable/evictable related implementation details \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120703596\n  
2014,     Change name of Animal Sniffer run \nThe old name includes the version of Java that we re running against  This would otherwise become an unnecessary diff between the Java 8 and Android branches \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120559577\n  
2015,     Suppress what will soon be an error-prone compile error internally \n\npropagateIfPossible(e) means  throw e if it\ s a RuntimeException or Error   In this code  e is known to be a checked exception \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120407217\n  
2016,     Small optimization for node/edge containment  It wouldn t be worth it if nodes()/edges() returned they keysets directly  but wrapping in an unmodifiableset involves an extra object creation and subsequent garbage collection \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120366484\n  
2017,     Make sure edgesConnecting() is unmodifiable in the parallel edges allowed case \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120348240\n  
2018,     Clean up the impls of edges connecting in the no parallel edges allowed case  Slightly optimize contains() by avoiding constructing an interator \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120347747\n  
2019,     Support reflection-less atomic updates in AggregateFutureState and InterruptibleTask as in AbstractFuture \n\nFixes    com/google/guava/issues/2463\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120337540\n  
2020,     Add some validation to predecessor/succesor counts  This should also catch the unlikely (impossible?) case where there are more than Integer MAX_VALUE predecessors or succesors  Alternatively we could change these to longs  but that adds ~8 bytes to every node  and I m already pretty sure a HashMap cannot hold more than 2^30 entries \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120291028\n  
2021,     Update documentation for Interners \nSince Java 7  the String intern() does not allocate the strings in permgen  but instead on the heap (in a table whose bucket size is configurable using XX:StringTableSize) \n\nSee    java com/view_bug do?bug_id=6962930\nand    info/string-intern-in-java-6-7-8/\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120287206\n  
2022,     Make mutable directed graphs about 40% smaller  Another nifty benefit: directedGraph adjacentNodes(node) size() is now O(1)  Remove (unused) equals/hashcode impl from NodeAdjacencies \n\nInterestingly  this does make immutable directed graphs slightly larger  The exact % depends on the degree of the nodes  inDegree == 1 and outDegree == 1 is a particularly large increase because two SingletonImmutableSets is much smaller than one ImmutableMap with two entries \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120276536\n  
2023,     Reduce the memory usage of Networks by roughly 20%  Delete the IncidentNodes class  Remove (unused) equals/hashcode impl from NodeConnections  Additionally  removeEdge() is now O(1) in all cases (used to be O(D) for networks with parallel edges)  edgesConnecting() is now O(1) for networks that don’t allow parallel edges (used to be O(D)  even though a network without parallel edges cannot return > 1 edge for this method) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120272801\n  
2024,     Stop using exceptions as flow control in isUriInetAddress() \n\nThis causes processes to use more memory (Object[ s) than they ought to due to filling in stack traces for the exception \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120245586\n  
2025,     AbstractServices failure exceptions report what service failed to help with debugging tests with many services \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120232421\n  
2026,      subType  ->  subtype \n superType  ->  supertype \n\n Subtype  is one word  according to various dictionary and to our usage in public methods on TypeToken and MediaType \n Supertype  is not as 100% clear in the dictionary  but when a dictionary or other document mentions it  I see it as one word  I also see precedent in  Class getSuperclass  \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=120124434\n  
2027,     Work around Eclipse bug that previously affected GWT and now affects j2objc (with -sourceLevel 8):\n   eclipse org/bugs/show_bug cgi?id=443596\n\nFixes    com/google/guava/issues/1939 (though I believe that GWT fixed things on their end a while back)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119992342\n  
2028,     Make some of Throwables available under GWT \n\nFixes #2457\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119967512\n  
2029,     Add @GwtIncompatible \nThis isn t currently necessary but may be so someday  so I ve been trying to establish the practice \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119881900\n  
2030,     Add char overload to Joiner withKeyValueSeparator() to parallel the overload in Splitter withKeyValueSeparator() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119803558\n  
2031,     Currently  SomeClass<?> getSubType(SubClass<?  OtherT>) returns SubClass<?  OtherT> \nHowever  if we do NotGeneric getSubtype(SubClass<OtherT>)  we get SubClass as a raw type instead of\nSubClass<OtherT> \n\nIf we fix that bug  then as it turns out we weren t generating proper owners for static classes  so fix that too\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119755147\n  
2032,     Followup to  Let PackageSanityTests run over the entire package (and stop special casing)  \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119501361\n  
2033,     Let PackageSanityTests run over the entire package (and stop special casing) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119488117\n  
2034,     Graph java: break out mutation- and edge-specific methods into subinterfaces:\n* Network java: edge-specific methods (extends Graph)\n* MutableGraph java: mutation methods for Graph (extends Graph)\n* MutableNetwork java: mutation methods for Network (extends Network)\nGraph<N  E> becomes Graph<N> \n\nConsequential changes:\n* adding various new Network-specific classes (NetworkBuilder  AbstractNetwork  etc )\n* adapted Graph-specific classes to remove edge-related code\n\nNote: Graph does not currently support parallel edges \n\nMotivations:\n* Make graphs without explicit  first-class edge objects available \n* Remove mutation methods from the top-level interfaces so that Graph/Network objects supplied as their parameters don t (contractually) support modifications   (And so that the slightly differing signatures for Graph and Network mutation methods don t cause user confusion )\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119461180\n  
2035,     Stop toString() on Stats and PairedStats throwing when the count is zero \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119289337\n  
2036,     Add throwIfUnchecked and throwIfInstanceOf \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119271623\n  
2037,     Delete MapMaker expireAfterAccess()  including it s recencyQueue \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119225281\n  
2038,     Delete MapMaker maximumSize()  including it s evictionQueue \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119208974\n  
2039,     Add javadocs about O(1) support for Iterables getLast() on RandomAccess lists \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119188139\n  
2040,     Avoid importing classes that don t exist in GWT \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119183243\n  
2041,     Remove MapMaker removal notification queue and removal listener support \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119165768\n  
2042,     Update Public Suffix List \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=119098167\n  
2043,     Improve MoreExecutors shutdownAndAwaitTermination \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118971489\n  
2044,     Hide MapMaker maximumSize() internally \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118959646\n  
2045,     Add more warnings to the javadoc of Files copy(File  File)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118821183\n  
2046,     Fix typo in Javadoc: ImmutableList is a  list   not a  set  \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118817173\n  
2047,     Implement Stopwatch toString() under GWT \n\nFixes #2437\nFixes #2365\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118680962\n  
2048,     Remove wildcard imports \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118678029\n  
2049,     Remove the use of static  shared buffers for skipping/discarding data \n\nAlso replace the use of BUF_SIZE constants with createBuffer() methods \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118598496\n  
2050,     Add ByteSteams exhaust(InputStream) and CharStreams exhaust(Readable) \n\nAlso ensure that the write-only skip buffers are zeroed each time they re written to just so we don t hang on to any data we shouldn t in memory \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118584097\n  
2051,     Add  DS_Store to  gitignore \nFrom: mardibiase <mardibiase@gmail com>\n\nFrom #2437\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118503538\n  
2052,     Re-run google-java-format on //java[tests /com/google/common/ (up to escape) now that some\nformatting behavior has changed \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118071047\n  
2053,     Changes to the LinearTransformation API: add inverse()  remove transformY(y)  and rename transformX(x) to transform(x)  Note that inverse() transform(y) is the new transformY(y) \n\nThe inverse is lazily initialized  following the pattern used in Converter  (This doesn t to any double-checked locking or anything  which is presumably okay because in the unlikely event of a race  constructing it twice is not the end of the world )\n\nTGP appears to show nothing but flakes: [ [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=118056833\n  
2054,     Remove hardcoded graph toString() tests  Instead  simply verify that every node and edge appears in the graph s string representation  This is done for a few reasons:\n\n1) It gives us a false sense of test coverage  For example  getPropertiesString() is used in both the actual code and the test code  If there was a bug in getPropertiesString none of the tests would catch it \n\n2) Any minor tweak to the graph string format  which should be an easy change  requires touching a lot of tests \n\n3) The biggest reason: incidentNodes() on an undirected graph makes no guarantee of order  As such  a test should not hardcode the expected toString() result  Multiple string representations of the same graph are equally valid \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117974195\n  
2055,     Link to the new spec instead of the old one  and do so more concisely \n\nContext:    com/google/guava/issues/2434#issuecomment-200464086\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117950249\n  
2056,     Add constants for X-Forwarded-Host and X-Forwarded-Port to HttpHeaders \n\nSee    com/google/guava/issues/2430\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117837581\n  
2057,     Deprecate all CharMatcher constants \n\nRemoval date tentative based on date of 20 0 release \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117833310\n  
2058,     Re-remove CharMatcher WHITESPACE internally \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117823196\n  
2059,     updated readme\n\nFixes #2431\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117823087\n  
2060,     Remove MapMaker expireAfterAccess() from public API internally  Please use CacheBuilder instead \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117774783\n  
2061,     Make all AbstractFutures behave like TrustedFutures under GWT \n\nI m doing this for two reasons:\n\n1  Exceptions are almost certainly disproportionately expensive under GWT  But mostly   \n\n2  I can get away with under GWT  where there are very few users of util concurrent  (This is technically a violation of our compatibility policy  but I suspect we ve played a little fast and loose with it when it comes to GWT before  Plus  util concurrent is likely to be even less used outside Google than it is inside  and it gained GWT support only in Guava 19  And to top that off  I hope to remove Future get() entirely from GWT  so this CL will be the least of users  worries :))\n\nAlso  update a comment in ImmediateFuture \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117746555\n  
2062,     Steer users away from dereference() \n\nQuestions:\n- Should I steer them away even more strongly? Should I be trying to delete this method?\n- Might we want Callables submit(Executor  AsyncCallable)? This is a moderately common use of dereference()     com/google/guava/issues/2076\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117730195\n  
2063,     Steer users away from ListenableFutureTask \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117730099\n  
2064,     Update public suffix list \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117625766\n  
2065,     Major refactoring of the com google common graph APIs (including updates to client code):\n-Remove DirectedGraph and UndirectedGraph interfaces; a Graph s directedness can now be queried with graph isDirected() \n-Remove GraphConfig class; use the query methods directly on the Graph interface instead \n-Add GraphBuilder; use this instead of Graphs create[Un Directed(GraphConfig)\n-Remove ImmutableGraph Builder; ImmutableGraph construction is now done with ImmutableGraph copyOf(Graph) \n-Rename multigraph() to allowsParallelEdges(boolean) \n-Rename noSelfLoops() to allowsSelfLoops(boolean) \n\nOld example syntax for creating a graph:\n  DirectedGraph<N  E> graph = Graphs createDirected(GraphConfig multigraph());\n\nNew example syntax for creating a graph:\n  Graph<N  E> graph = GraphBuilder directed() allowsParallelEdges(true) build();\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117606125\n  
2066,     Automated g4 rollback of changelist 117579683 \n\n*** Original change description ***\n\nRemove CharMatcher WHITESPACE internally \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117604531\n  
2067,     Test that changes to an Iterator are reflected in the backing collection \nUnrelatedly  move CopyOnWriteArrayList suppressions into TestsForListsInJavaUtil  since the collection s quirks are documented decisions  not implementation bugs  This prepares for adding another suppression on the Java 8 branch \n\nTested:\nglobal TAP\n[ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117580763\n  
2068,     Remove CharMatcher WHITESPACE internally \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117579683\n  
2069,     Document that order() is called even without KNOWN_ORDER \n\nFixes    com/google/guava/issues/2349\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117569479\n  
2070,     Skip Map+Multimap toString() tests if NON_STANDARD_TOSTRING is specified \n\nFixes    com/google/guava/issues/2418\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117563335\n  
2071,     Hide MapMaker removalListener() internally \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117372601\n  
2072,     Restore documentation that Futures catching is available under GWT but with some caveats \n\nThe resulting documentation looks roughly like this:\n\n@Partially GwtIncompatible(value= AVAILABLE but requires exceptionType to be Throwable class )\npublic static <V X extends java lang Throwable> com google common util concurrent ListenableFuture<V> catching(\n    com google common util concurrent ListenableFuture<? extends V> input \n    java lang Class<X> exceptionType \n    Function<? super X ? extends V> fallback)\n\nFixes    com/google/guava/issues/2379\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117364356\n  
2073,     Remove all CharMatcher constants except WHITESPACE internally \n\nWHITESPACE will be removed separately since it had orders of magnitude more usages \n\nThis is effectively a roll-forward of [  but with additional constants removed \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117362844\n  
2074,     Remove class from <pre class= code > \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117357703\n  
2075,     Specify behavior with self-loops in degree() javadoc \n\nWikipedia states:  the degree (or valency) of a vertex of a graph is the number of edges incident to the vertex  with loops counted twice   I\ ve found several primary sources that also state the same  But Wolfram has this definition:  The degree of a graph vertex v of a graph G is the number of graph edges which touch v  with no mention of self-loops \n\nWith directed graphs it would be easy to get this behavior (just return inDegree + outDegree)  but with undirected graphs you would either need to store more information than we currently do or make this an O(D) method instead of O(1)  Overall I\ m not sure how many people care so probably not worth changing  but at least worth calling out in the javadoc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117273477\n  
2076,     Fix javadoc typo in ImmutableSet copyOf()\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117174782\n  
2077,     Replace instances of StringBuilder append(String substring/CharSequence subsequence) with the append overload that takes a substring range  Plus another minor change \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117136790\n  
2078,     Make immediateFailedFuture and immediateCancelledFuture trusted futures \n\n   com/google/guava/issues/1961\n\n(Rollforward CL 86499614  which was rolled back in CL 86516778 because of test breakages )\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=117125023\n  
2079,     Update references to guava-libraries googlecode com to the Github location in pom xml files \n\nTested:\n    TAP --sample for global presubmit queue\n    [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116983878\n  
2080,     This change replaces usages of static final fields on CharMatcher  e g  CharMatcher WHITESPACE  with the equivalent static factory method  e g  CharMatcher whitespace() \n\nThe change is being made so that we can remove the static final fields  primarily because they must be eagerly initialized  causing many implementation classes (which may be unnecessary) to be loaded  This is a significant performance problem on Android  Using methods allows implementation classes to only be loaded when actually needed  as well as matching our long-standing preference for factory methods over public fields \n\nSee [  for more information \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116880331\n  
2081,     Used UncheckedThrowingFuture in another place \nAdd tests for Error throwing now that that s easy to do \n\nThis also eliminates a usage of Forwarding*Future:\n   com/google/guava/issues/2416\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116853544\n  
2082,     Adopt getDone() and getDoneFromTimeoutOverload() in other Future tests \nMove  get(-1  SECONDS)  test out of the normal path and into its own test method so that I can supppress it if we remove Future get under GWT \nTest  get(MAX_VALUE  SECONDS)  for overflow \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116853438\n  
2083,     Fixes  standardizations  and noise reduction in Futures tests \n\n- Run more tests under GWT (and fix some @GwtIncompatible reason documentation)  This required no actual changes to the tests except   \n- Make testSuccessfulAsList_resultCancelledRacingInputDone look at the correct logger now that we\ ve moved most listener execution to AbstractFuture \n- Retrieve that logger with getLogger() rather than from the class under test\ s `log` field \n- Use TestLogHandler instead of our custom throwing handler \n- Move RuntimeExceptionThrowingFuture out of FutureCallbackTest  and use it in FuturesTest instead of our hacked up solutions that happen to work today \n- Test both overloads of get() for some immediate*Future() implementations \n- Go crazy with static imports  even by my standards \n- Rename expected exceptions to  expected   and remove comments about their expectedness \n- Remove descriptions from fail() calls \n- Remove a redundant immediateFuture() test \n- Use Truth in a few places \n- Use getDone() for various reasons:\n  - It will let tests work under GWT if I remove get() there \n  - It sometimes saves us an isDone() assertion \n  - It prevents some tests from hanging in the case of a bug \n  - It doesn\ t declare `throws InterruptedException`  so in theory  we might be able to remove some `throws` clauses  (But I haven\ t done so )\n- Add a getDoneFromTimeoutOverload() with a custom GWT implementation to prepare for losing timed get() there \n\nLeft for later CLs:\n- reformatting everything\n- splitting FuturesTest into separate classes\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116759522\n  
2084,     Make LittleEndianDataOutputStream final (like LittleEndianDataInputStream) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116674000\n  
2085,     Fix tiny Javadoc problems \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116657537\n  
2086,     Use Futures getDone() internally \nAdd a doc reference to getDone() from getUninterruptibly() \nImprove the error message on bad calls to getDone() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116652736\n  
2087,     Add @CheckReturnValue to the com google common io package  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116620632\n  
2088,     Start a README md and an overview/recipe-book for Stats calculations  Revise Stats java class docs a bit \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116584822\n  
2089,     Discourage people from mocking or otherwise creating custom implementations of ListenableFuture \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116573821\n  
2090,     This change replaces usages of static final fields on CharMatcher  e g  CharMatcher WHITESPACE  with the equivalent static factory method  e g  CharMatcher whitespace() \n\nThe change is being made so that we can remove the static final fields  primarily because they must be eagerly initialized  causing many implementation classes (which may be unnecessary) to be loaded  This is a significant performance problem on Android  Using methods allows implementation classes to only be loaded when actually needed  as well as matching our long-standing preference for factory methods over public fields \n\nSee [  for more information \n\nTested:\n    TAP train for global presubmit queue\n    [     Some tests failed; test failures are believed to be unrelated to this CL\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116565003\n  
2091,     Automated g4 rollback of changelist 116449500 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116468022\n  
2092,     Prevent fail() from being ignored by the surrounding catch() block by throwing new Error() \n\nTests of a testing API often look like this:\n\ntry  \n  runATestThatShouldFail();\n  fail();\n  catch (AssertionError expected)  \n \n\nHowever  the catch() block can catch not only the expected failure from runATestThatShouldFail() but also the  test did not fail when it should have  failure from fail() \n\nThis an automated fix using Error Prone ([ \n\nWe intend to make this a compilation error in [ \ s Java compiler \nso it is necessary to fix existing occurrences first to avoid breaking\nbuilds \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116458330\n  
2093,     Fix documentation issues with CharMatcher matchesNoneOf \n\nFixes external issue    com/google/guava/issues/2410 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116450985\n  
2094,     Shuffling from internal-only change \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116449500\n  
2095,     Remove more unnecessary @CheckReturnValues on APIs now that these packages are\ncompletely @CRV d \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116285375\n  
2096,     Remove @CheckReturnValue from individual classes now that it is in\npackage-info java\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116280164\n  
2097,     Add Futures getDone() \n\nAPI Review:\n   google com/document/d/1HvGIffjs3clWLzs0SNzLSKSzlzjIIesZOt6fhedo85Y/edit\n\nAlso  make immediateCancelledFuture() available under GWT  since I use it in the new tests \nTo use cancellationExceptionWithCause() from it  I had to move that method out of the server-only AbstractFuture java and into the shared Futures java \nThis runs somewhat counter to my effort to make Futures java smaller  Maybe we ll want a Util/Helpers class  though I m not quite sure what else would go in it (executeListener? currently non-static maybePropagateCancellation?) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116279071\n  
2098,     Update the travis configurations to only build the  master  branch or any branches prefixed with  release  in order to reduce the duplicate use of build bots on travis for pull requests based on non-user-fork-originated branches \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116275195\n  
2099,     Add @CheckReturnValue to com google common collect package  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116272898\n  
2100,     Add tests:\n- map put(presentKey  value)\n- entry setValue\n\nFixes    com/google/guava/issues/2406\n\nMake classes support entry setValue:\n- CompactHashMap\n- LocalCache\n  - Support was removed in [  and I m not sure why \n  - The private documentation still claims that it s supported \n  - A test (that I edit in this CL) checks that it s not  but presumably only because it was copied from a test that looked for the old behavior and thus needed to be updated:     | [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116244562\n  
2101,     Remove unused variables \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116177337\n  
2102,     Add asAsyncCallable method to Callables \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116175454\n  
2103,     When displaying the actual class name  use the simple name \n(Note that GWT has supported getSimpleName() since 2 6 0 )\n\nWe started doing this for the expected class name in CL 115380685 by passing literal strings like  IllegalStateException  to the constructor \nBut I also made some changes to make this more obvious \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116150794\n  
2104,     Add missing rejectionPropagatesToOutput tests \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116137704\n  
2105,     Never return a (Sorted|Navigable|Bi)(Map|Set) from the plain (Map|Set) overloads \n\nPrior to this CL  the plain overloads performed instanceof checks  delegating to the (Sorted|Navigable|Bi) versions when possible \n\nThe old behavior is probably The Right Thing  but it hinders Proguarding \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116128191\n  
2106,     Encourage users to use framworks instead of chaining things together manually \n\nAs part of that  I tried to clarify the significance of using ListenableFuture  as an input to another Future   I don\ t love what I\ ve ended up with  but I\ m not optimistic that I\ ll do better anytime soon \nOne part of *that* was switching part of the doc to the second person simply because I couldn\ t find a good way to make it flow otherwise  I ended up propogating this to more of the doc  and I think it\ s probably a small net improvement \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116019725\n  
2107,     Add @CheckReturnValue to Iterators  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=116004491\n  
2108,     Add @CheckReturnValue to ListMultimap and SetMultimap  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115997209\n  
2109,     This change replaces usages of static final fields on CharMatcher  e g  CharMatcher WHITESPACE  with the equivalent static factory method  e g  CharMatcher whitespace() \n\nThe change is being made so that we can remove the static final fields  primarily because they must be eagerly initialized  causing many implementation classes (which may be unnecessary) to be loaded  This is a significant performance problem on Android  Using methods allows implementation classes to only be loaded when actually needed  as well as matching our long-standing preference for factory methods over public fields \n\nTested:\n    TAP train for global presubmit queue\n    [     Some tests failed; test failures are believed to be unrelated to this CL\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115935997\n  
2110,     Add overloads to Preconditions checkState checkArgument and checkNotNull to avoid boxing and varargs for the most common parameter combinations \n\nThis adds primitive overloads for all combinations of Object char int and long up to 2 parameters and Object only overloads up to 4 parameters   This covers 92-98% of formatting calls based on an analysis of googles codebase \n\nThis change is fully binary compatible but only mostly source compatible   It is possible that this cl will call some Preconditions calls to become ambiguous with respect to overload resolution   For example this call\n\nvoid foo(Boolean condition  short s)  \n  checkState(condition   %s   s);\n \n\nwill fail to compile with this change   There are two simple changes to the invocation that will resolve the ambiguity   \ condition\  can be explicitly unboxed  or \ s\  can be explicitly boxed   We believe that such situations will be incredibly rare \n\nSee the JLS 15 12 2 for full information on overload resolution:    oracle com/javase/specs/jls/se7/html/jls-15 html#jls-15 12 2\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115881707\n  
2111,     Add @CheckReturnValue to RangeMap and RangeSet  This forces the caller of these\nAPIs to  do something  with the result of the call \nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115856896\n  
2112,     Add @CheckReturnValue to Multimap and Table  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115771812\n  
2113,     Make Iterables unmodifiableIterable() and Iterators unmodifiableIterator() methods accept (Iterable|Iterator)<? extends T> instead of (Iterable|Iterator)<T>  Some of our unmodifiable*() methods already did this (e g  unmodifiableMultiset()  unmodifiableBiMap())  and the  ? extends T  signature is consistent with the unmodifiable*() methods in Collections java \n\nNote that SortedMap only does it for values  not keys  due to the various Key-typed methods that return views in the interface  Maps unmodifiableMultimap() also has some issues that at the very least make it tricky (maybe impossible  didn\ t investigate enough to be sure) to follow this pattern \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115705731\n  
2114,     Add the Service-Worker-Allowed header to the HTTP header constants for Java/Go \n\n(Note: C++ constants are added in [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115700477\n  
2115,     Automated g4 rollback of changelist 108345794 \n\n*** Reason for rollback ***\n\nCauses performance regression in J2CL transpiler and requires incorrect code to be accepted \n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 108184450 \n\n*** Reason for rollback ***\n\nChange no longer needed  j2cl transpiler was updated \n\n*** Original change description ***\n\nRemove import for java util Formatter since it s needed only for the javadoc \nThis class is not supported by GWT and in the new version of GWT (J2CL) we plan to strip not needed imports only if the class/method is marked with @GwtIncompatible \n\n***\n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115640681\n  
2116,     Add @CheckReturnValue to the immutable collection types  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115562334\n  
2117,     Add @since 20 0 to the  ceiling floor PowerOfTwo methods \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115489834\n  
2118,     Add  floor ceiling PowerOfTwo as discussed at API review \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115483556\n  
2119,     Add @CheckReturnValue to Multiset and friends \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115381146\n  
2120,     Fix 6-year-old test bug \n\nThe bug is:\n\n  try  \n    somethingThatShouldFail();\n    fail();\n    catch (AssertionFailedError expected)  \n   \n\nThe fail() is masked by the catch() block \nI ve requested an enhancement to Error Prone to catch this:    com/google/error-prone/issues/393\n\nAdditionally  I improved IteratorTester under GWT: IteratorTester couldn t catch wrong-exception bugs there because of GWT s lack of reflection  This was a known  documented limitation  but the tests still attempted to verify its ability to do so  When I fixed the test bug  they broke  I then realized that I could just fix IteratorTester to work under GWT  It s probably even a simplification \n\nTested:\nglobal TAP\n[ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115380685\n  
2121,     Reformat parts of util concurrent that I had mostly already reformatted \nNow that I have some more automation  I ve caught some more problems \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115358094\n  
2122,     Strip mentions of soft references from Guava \nReformat \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115352566\n  
2123,     Remove most of our uses of <code> \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115352506\n  
2124,     Replace <br> tags \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115352490\n  
2125,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115333807\n  
2126,     Add @CheckReturnValue to Iterables  This forces the caller of these APIs to  do\nsomething  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115264046\n  
2127,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115240986\n  
2128,     Removes @WeakOuter from AggregateFuture RunningState and subclasses  The weak\nouter reference causes a dangling pointer if the RunningState outlives its\nFuture  Furthermore  the @WeakOuter wasn t necessary to maintain leak-free\nbehavior because AggregateFuture nulls it s runningState reference in\nafterDone() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115226151\n  
2129,     Fix Error Prone errors in GWT code \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115110183\n  
2130,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115089318\n  
2131,     Remove closing </li> tags \nI couldn t find any </p> or other optional closing tags in any of the files I ve touched so far \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115089061\n  
2132,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115088232\n  
2133,     Move <p> tags to the beginning of the line \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115086346\n  
2134,     Attempt to finish adding Java 8 usage notes to our functional types \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115081604\n  
2135,     GraphConfig: fix logic bug in compatibleWith()  document the correct behavior  and add tests \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115078269\n  
2136,     AbstractPackageSanityTests java: document that the @Test annotations are deliberate even though it s not actually a JUnit4 test  as some of its subclasses @RunWith(JUnit4) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=115074892\n  
2137,     Make effectively final fields final\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114996899\n  
2138,     Make effectively final fields final\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114996805\n  
2139,     Create an abstract base class for our graph implementations  Eliminate lots of redundant code! Also improves the (currently incorrectly documented) runtime of removeNode() in IncidenceSetUndirectedGraph on multigraphs from O(degree^2) to O(degree) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114995238\n  
2140,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114992641\n  
2141,     Fix bad line breaks \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114992502\n  
2142,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114976442\n  
2143,     Add missing GWT emulation of interruptTask() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114972363\n  
2144,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114972304\n  
2145,     More reformatting \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114963965\n  
2146,     Reuse the mac instance just constructed for bit-length calculation \n\nVia    com/google/guava/pull/2395/\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114961907\n  
2147,     Add @CheckReturnValue to the com google common  escape|xml|html  packages and subpackages  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114912000\n  
2148,     Graph java: change return type of #degree() methods to int \nAdd documentation specifying behavior if the number of relevant edges is > Integer MAX_VALUE \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114905866\n  
2149,     Introduce AbstractGraph  This is a bare-bones base class that all Graph implementations should be able to extend (analogous to e g  AbstractSet for Sets)  It ensures there is consistent equals()/hashCode() across different Graph implementations  Additionally  this CL drops the requirement that two graphs have to have  the same type  to be equal \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114901380\n  
2150,     Reformat FluentIterable  moving some  Stream equivalent  sections above @tags so that they appear properly \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114900720\n  
2151,     Use StringBuilder reverse() instead of reimplementing it \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114887716\n  
2152,     Fix modifier order\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114875899\n  
2153,     Eliminate intra-|if| MOE stripping  and add a comment \n\n[ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114859955\n  
2154,     google-java-format the rest of util concurrent \nI also rewrapped Javadoc and comments (mostly using the built-in Eclipse formatter) \nI made almost no hand changes \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114854530\n  
2155,     More reformatting \nI ve restricted myself to files that are part of open-source Guava \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114854445\n  
2156,     Change Range toString() to use printable ASCII chars (  ) instead of \\u2025 (‥)\n\nSee    com/google/guava/issues/2376\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114820315\n  
2157,     Indent continued @tag lines 4 spaces instead of aligning them with the second word of the first line \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114799803\n  
2158,     google-java-format common escape \nI also rewrapped Javadoc and comments (mostly using the built-in Eclipse formatter) \nI made almost no hand changes \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114785034\n  
2159,     Clarify docs of filter()  limit()  and transform() to specify that the result is a view \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114554046\n  
2160,     In EnumsTest  rewrite code that creates a second copy of TestEnum in a second ClassLoader  so that it doesn t try to add instances of the second TestEnum to a Set<TestEnum> (which is a Set of the original TestEnum)  In Java 8  apparently this is a little bit less erased so it fails \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114474572\n  
2161,     Add javadoc and test coverage stating that non-hypergraph edges are always incident to either one or two nodes \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114459445\n  
2162,     Run more tests against MutableClassToInstanceMap by defining a type that implements 5 interfaces \nEliminate a suppression for MutableTypeToInstanceMapTest that is unnecessary because put() is unsupported  anyway \nDo some assorted other cleanup \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114449200\n  
2163,     Add a validation check to AbstractDirectedGraphTest  opposite to the one in AbstractUndirectedGraphTest:\n\n[ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114447561\n  
2164,     Slightly optimize Graphs oppositeNode()  50% of the time (assuming node is randomly chosen between the repeated node and adjacent node) we ll only have to perform one equals() check instead of two \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114380996\n  
2165,     Add @CheckReturnValue to the com google common util concurrent package  This forces the caller of these APIs to  do something  with the result of the call \n\nIf you want to use transform() to perform an action on a successful Future without returning a result  use addCallback()  (addCallback() brings the added bonus that any exceptions will be logged )\nSimilarly  if you want to use catching() to perform an action on a failed Future without return a result  use addCallback() \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114371704\n  
2166,     Simplify some code in directed graphs  In particular  make removing the incident edges when removing a node more intuitive  Note that removeNode() in undirected graphs currently is O(degree^2) (for multigraphs)  but that will be alleviated once we have AbstractIncidenceSetGraph and it moves to this implementation \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114345530\n  
2167,     Remove unused variable declarations that are followed by fail() \nThey are no longer necessary \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114342552\n  
2168,     Add test coverage to IncidentNodes to ensure our equals/hashcode is compatible with other Sets  Add a (micro)optimization to avoid constructing an iterator object for calls to contains() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114329541\n  
2169,     Add some validation checks for undirected graphs \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114224325\n  
2170,     Add @CheckReturnValue to com google common reflect  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114218057\n  
2171,     Add @CheckReturnValue to collect Range  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114147974\n  
2172,     Permit the elapsed time to be slightly shorter than expected \nThis fixes some flakiness I m seeing in Guava \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114130006\n  
2173,     Release most of UninterruptiblesTest and UninterruptibleFutureTest to Guava \nI ve excluded the CountDownLatch tests  which are currently intertwined with some other Google-internal tests \n\nThis requires migrating off TearDownTestCase to TearDownStack \n   com/google/guava/issues/1752#issuecomment-180971813\n   com/google/guava/issues/2387\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114122813\n  
2174,     Add @SafeVarargs to Iterators cycle() (being consistent  since we just added it to forArray()) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114120886\n  
2175,     Use String isEmpty() in Strings isNullOrEmpty() \n\nString isEmtpy() was not in Android until Java 6/API 9 (   android com/reference/java/lang/String html#isEmpty())  which Guava now requires \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114108086\n  
2176,     Add @SafeVarargs to Iterators forArray (ImmutableList of() and ImmutableSet of() are already annotated with this) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114078599\n  
2177,     Add documentation indicating that the builder mutators returns the same builder object \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114066331\n  
2178,     Document the requirement that  for directed graphs  incidentNodes iterates as source then target  Move other directed graph specific documentation into DirectedGraph \n\nNote: this order is already expected in a few places  and is tested in existing tests here:\n\n[ \n[ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114038654\n  
2179,     Add @CheckReturnValue to DiscreteDomain  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114030796\n  
2180,     Some small cleanup to Graphs \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114030721\n  
2181,     Replace  DirectedIncidentNodes  and  UndirectedIncidentNodes  with a shared  IncidentNodes  class that implements Set  This avoids the call to  asImmutableSet() that the directed graphs were performing  and also makes it so that we are now very close to having an abstract base graph implementation that will almost entirely replace the 4 current implementations \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=114000977\n  
2182,     Move toString() implementation for graphs to Graphs java  This is similar to how Graphs equal() is implemented  and will allow Graph implementations to get toString() for  free  \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113999189\n  
2183,     Add @CheckReturnValue to com google common math  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113983550\n  
2184,     Add more consistency checks to AbstractGraphTest \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113961752\n  
2185,     Reduce memory footprint of mutable graphs by roughly 10%  Considering the increase that [  yielded  getting this back down is definitely good \n\nThis is done by using HashSets instead of LinkedHashSets for the various internal data structures stored in NodeConnections  Note that we still maintain insertion order on nodes() and edges()  because those are the keysets of LinkedHashMaps  As  outer level  structures (i e  only 1 per graph)  making those HashMaps instead of LinkedHashMaps would have a relatively small effect on memory footprint compared to changing the many  inner level  Sets inside NodeConnections \n\nAs for the question of whether we WANT to maintain insertion order  that\ s not what we were doing anyway  and implying it is what we were doing could be dangerous if someone relies on it  For example  the order in which nodes becomes predecessors or successors to other nodes can be completely different from the order in which the nodes were inserted to the graph  So there is no consistent ordering of nodes  each call to predecessors() or successors() will yield a different  ordering  than that of nodes()  To complicate the matter even further  there are methods like incidentEdges() and adjacentNodes() on directed graphs  These are simply the union of two other sets  which by its nature will not preserve any ordering (a union iterates over the elements in set1  followed by the elements of set2 that were not in set1)  so we have yet another inconsistent  ordering   For now  I propose we should only guarantee insertion order on a graph\ s nodes() and edges()  and not any other accessors \n\nAs a side note  of the two problems mentioned  the former will not be a problem when we allow  sorted nodes/edges  because the inner Sets can simply be TreeSets as well  preserving the same ordering as the outer level TreeMaps  The implementation of Sets union() will still prove to be problematic  but the implementation could be presumably be modified to support SortedSets if we want to guarantee that any Set<N> or Set<E> accessor will be sorted if the Graph is created with a Comparator<N> or Comparator<E> \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113885975\n  
2186,     Make Graphs oppositeNode() slightly more efficient  It performs the same number of equals checks (1 in self-loop case  2 otherwise) but without the additional call to contains() - while still providing the incidence check \n\nAlso  make it work on the base Graph type  This will be necessary in order to call it from our base abstract graph implementation \n\nAnd finally  add test coverage  for which there was apparently none!\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113869827\n  
2187,     Add @CheckReturnValue to MinMaxPriorityQueue  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113863719\n  
2188,     Add @CheckReturnValue to ObjectArrays  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113856750\n  
2189,     Add @CheckReturnValue to the com google common eventbus package  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113855301\n  
2190,     Remove  SetView  from all graph implementations  See [  for why it should be killed with fire  In particular  it made the returned Sets have O(N) (in both time and memory) size() and contains() methods  and in one case  O(N^2) iteration!\n\nTo facilitate this change  create  NodeConnections  to replace  IncidentEdges   This class stores not only the incident edges but also the adjacent nodes for each origin node \n\nAs a side benefit  addEdge() is now O(1) in all cases \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113813654\n  
2191,     Add @CheckReturnValue to SortedLists  This forces the caller of these APIs to  do something  with the result of the call \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113749076\n  
2192,     Add validation that checks that predecessors  successors  in edges  out edges  and all sorts of other relationships are in sync after every test  Add more test coverage for removing edges  This would have caught the breakage in [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113690611\n  
2193,     Graph java: fix indentation in class-level Javadoc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113683678\n  
2194,     Fix various collections (Sets union()  Sets intersection()  Multisets sum()  etc ) that might overflow when asked for size()  With very large collections  these could potentially return negative (!) results  According to the spec  the result should be Integer MAX_VALUE:\n\n   oracle com/javase/7/docs/api/java/util/Collection html#size()\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113683485\n  
2195,     Remove unnecessary  unused  variables thanks to an update in the @CheckReturnValue checker \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113673831\n  
2196,     Small fix in javadoc\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113660488\n  
2197,     Automated g4 rollback of changelist 113559037 \n\n*** Reason for rollback ***\n\nAs per api review   This is being rolled back since [  statistics have been gathered \n\n*** Original change description ***\n\nAdd overloads to the Preconditions check(NotNull|State|Argument) varargs\nmethods to avoid varargs and boxing overhead in the case of 1-2 template parameters \n\nIn order to avoid autoboxing and numeric conversions we need to support all primitive types \n\nAPI review:\n   google com/document/d/1EJ0dqFIagdOCJZQkrNGgzhnIS-4lSEYi0_GQeUlKJBE/edit\n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113655916\n  
2198,     Add @CheckReturnValue to the following classes: EvictingQueue  FluentIterable  and Ordering \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113653886\n  
2199,     Add @CheckReturnValue to MapMaker \n\nFor more information  see [ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113640939\n  
2200,     Automated g4 rollback of changelist 113583321 \n\n*** Reason for rollback ***\n\nForgot to remove nodes from predecessor/successor sets if we were removing the last connecting edge \n\n*** Original change description ***\n\nRemove  SetView  from all graph implementations  See [  for why it should be killed with fire  In particular  it made the returned Sets have O(N) (in both time and memory) size() and contains() methods  and in one case  O(N^2) iteration!\n\nTo facilitate this change  create  NodeConnections  to replace  IncidentEdges   This class stores not only the incident edges but also the adjacent nodes for each origin node \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113599971\n  
2201,     Remove  SetView  from all graph implementations  See [  for why it should be killed with fire  In particular  it made the returned Sets have O(N) (in both time and memory) size() and contains() methods  and in one case  O(N^2) iteration!\n\nTo facilitate this change  create  NodeConnections  to replace  IncidentEdges   This class stores not only the incident edges but also the adjacent nodes for each origin node \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113583321\n  
2202,     Document which exception is used by catching()/catchingAsync() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113563893\n  
2203,     Remove incorrect javadoc regarding  passing the smaller Set first  from Sets union() \n\nIn Sets intersection() this comment makes sense  since it iterates through set1 as the  main set   and does a contains check against set2 for every element in set1  So iterating through intersection() is O(|set1|) for HashSets  or O(|set1| * log|set2|) for TreeSets  For the union() case though  I don\ t believe this comment is correct  Iterating through the union involves:\n\n-Iterate through set1  No contains checks are performed  This is simply O(|set1|) (assuming the Set has normal iteration performance)\n-Iterate through set2  For every element  a contains check against set1 is performed  Thus we have O(|set2| * C1)  where C1 is the cost of a contains() call to set1 \n\nSo if set1 is a HashSet we have O(|set1|) + O(|set2|)  Order makes no difference  If set1 is a TreeSet we have O(|set1|) + O(|set2| * log|set1|)  This is actually *worse* when set1 is the smaller of the two sets \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113561878\n  
2204,     Add overloads to the Preconditions check(NotNull|State|Argument) varargs\nmethods to avoid varargs and boxing overhead in the case of 1-2 template parameters \n\nIn order to avoid autoboxing and numeric conversions we need to support all primitive types \n\nAPI review:\n   google com/document/d/1EJ0dqFIagdOCJZQkrNGgzhnIS-4lSEYi0_GQeUlKJBE/edit\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113559037\n  
2205,     *GraphTest java: Add @Test annotations to tests marked @Override \n(This is apparently not strictly necessary but makes for better documentation )\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113549694\n  
2206,     Refactor the test classes from the previous hierarchy:\n\n                      AbstractGraphTest\n                        |           |\n                        v           v\n        AbstractMutableGraphTest   AbstractImmutableGraphTest\n         |                    |\n         v                    v\nAbstractDirectedGraphTest   AbstractUndirectedGraphTest\n\nto the following:\n\n                      AbstractGraphTest\n                        |           |\n                        v           v\n      AbstractDirectedGraphTest   AbstractUndirectedGraphTest\n                  |                             |\n                  v                             v\nAbstractImmutableDirectedGraphTest   AbstractImmutableUndirectedGraphTest\n\nUnfortunately the lack of multiple inheritance in Java means we have to choose between whether we want inherit from a base  immutable graph test  or get all the functionality of the base  (un)directed graph  test  Both involve some amount of code duplication for full test coverage  but I think this is the better option of the two given that the (un)directed tests are likely to have more tests added over time  whereas a base immutability test is unlikely to be expanded much (the tests for this are currently repeated between AbstractImmutableDirectedGraphTest and  AbstractImmutableUndirectedGraphTest) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113542823\n  
2207,     Add @CheckReturnValue to the entire c g c hash package \nOpt-out certain APIs using @CanIgnoreReturnValue \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113536377\n  
2208,     Some optimizations to AbstractIteratorTester based on profiling data on MapsCollectionTest \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113299505\n  
2209,     Add @CheckReturnValue to Lists  Maps  Multimaps  Multisets  Queues  Sets  and Tables \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113265870\n  
2210,     Remove APIs to be deleted for Guava 20 0 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113254099\n  
2211,     Some minor improvements to FeatureUtil in the hope of speeding up c g c collect tests \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113178622\n  
2212,     Don t silently swallow Errors \n   com/google/guava/issues/2254\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113152082\n  
2213,     Add ClassPath ResourceInfo asByteSource() and asCharSource(Charset) \n\nFixes    com/google/guava/issues/2228\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113094135\n  
2214,     This change replaces usages of static final fields on CharMatcher  e g  CharMatcher WHITESPACE  with the equivalent static factory method  e g  CharMatcher whitespace() \n\nThe change is being made so that we can remove the static final fields  primarily because they must be eagerly initialized  causing many implementation classes (which may be unnecessary) to be loaded  This is a significant performance problem on Android  Using methods allows implementation classes to only be loaded when actually needed  as well as matching our long-standing preference for factory methods over public fields \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113072117\n  
2215,     Add @CheckReturnValue to the entire c g c graph package (by adding it to package-info java) \nOpt-out certain APIs using @CanIgnoreReturnValue \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=113060183\n  
2216,     Publish j2objc cycle_whitelist txt to the public Guava repo \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112992186\n  
2217,     Add a comment about the use of non-short circuiting logical operators \n\nThis is identical to a comment in IntMath \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112913215\n  
2218,     Move @CheckReturnValue to package-info java so it applies to all of\ncom google common primitives  Annotate some methods with @CanIgnoreReturnValue \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112870925\n  
2219,     Move @CheckReturnValue to package-info java so it applies to all of\ncom google common base  Annotate some methods with @CanIgnoreReturnValue \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112870719\n  
2220,     Improve nullability checking for com google common hash \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112829088\n  
2221,     Some updates to Graph javadoc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112818614\n  
2222,     This change replaces usages of static final fields on CharMatcher  e g  CharMatcher WHITESPACE  with the equivalent static factory method  e g  CharMatcher whitespace() \n\nThe change is being made so that we can remove the static final fields  primarily because they must be eagerly initialized  causing many implementation classes (which may be unnecessary) to be loaded  This is a significant performance problem on Android  Using methods allows implementation classes to only be loaded when actually needed  as well as matching our long-standing preference for factory methods over public fields \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112814971\n  
2223,     Change BaseEncoding toString() to return  withPadChar(\ =\ )  instead of  withPadChar(=)   This is more consistent with how the string literals are printed for the alphabet \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112723381\n  
2224,     Add FluentIterable concat methods  and make Iterable concat methods delegate to them \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112713876\n  
2225,     This change replaces usages of static final fields on CharMatcher  e g  CharMatcher WHITESPACE  with the equivalent static factory method  e g  CharMatcher whitespace() \n\nThe change is being made so that we can remove the static final fields  primarily because they must be eagerly initialized  causing many implementation classes (which may be unnecessary) to be loaded  This is a significant performance problem on Android  Using methods allows implementation classes to only be loaded when actually needed  as well as matching our long-standing preference for factory methods over public fields \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112708491\n  
2226,     Improve performance of nested calls to Iterables concat() and Iterators concat() *without* using any additional memory  This CL brings the runtime from O(D^3) to O(D^2)  where D is the nesting depth of concatenation \n\nIt appears this issue was previously discussed here:\n   google com/p/google-collections/issues/detail?id=151\n\nBut no work was done to fix it other than adding some javadoc to Iterators  While still not as fast as unnested concatenation (which is linear)  this seems fast enough that a javadoc warning is no longer necessary - especially considering the warning was only in Iterators and not in Iterables  even though both exhibited the cubic runtime and there are 13x more calls to Iterables concat() than Iterators concat() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112701959\n  
2227,     Add MediaType L24_AUDIO \n\nSee    com/google/guava/issues/2132\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112650740\n  
2228,     Shuffling from internal-only change \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112626786\n  
2229,     Add new MediaTypes  See    com/google/guava/issues/2132\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112612873\n  
2230,     Fix the tests in primitives for tryParse not to generate their own NPEs \n\n   com/google/guava/issues/2238\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112600511\n  
2231,     Add tests for    com/google/guava/issues/2238\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112410294\n  
2232,     Reduce the memory consumption of undirected graphs by storing the incident nodes explicitly in an  UnirectedIncidentNodes  class  rather than in a Set \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112273670\n  
2233,     Remove stray line \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112271827\n  
2234,     Automated g4 rollback of changelist 112075036 \n\n*** Reason for rollback ***\n\nBroke various tests  may not be handling second-level domains properly \n\n*** Original change description ***\n\nAllow terminal hyphens on domain parts \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112175053\n  
2235,     Document RFC 1123 host label digit prefix mandate\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112163962\n  
2236,     Update Public Suffix List \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112099761\n  
2237,     Add Service-Worker \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112094082\n  
2238,     Graph java: clarifying the requirements around node/edge objects \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112082354\n  
2239,     Allow terminal hyphens on domain parts \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112075036\n  
2240,     Update Public Suffix List \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=112015560\n  
2241,     Bump GWT to a non-snapshot dependency  so Guava is unblocked for release \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111953577\n  
2242,     Remove TODO  which is no longer an issue now that we re committing to GWT 2 8 0 \n\n   com/google/guava/issues/1999\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111852957\n  
2243,     Reformat \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111843256\n  
2244,     Quiesce the continuous integration builds a bit by running maven in batch mode (reducing chatter from download progress logging)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111811091\n  
2245,     Publishes the new StatsAccumulator addAll(Stats) and PairedStatsAccumulator addAll(PairedStats) methods \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111704390\n  
2246,     Add TODO to use ofElementsIn(expected) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111703041\n  
2247,     Simplify the implementation of RemovalNotification by extending AbstractMap SimpleImmutableEntry \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111636230\n  
2248,     Use getBytes(Charset) instead of getBytes(String) now that we require a new enough version of GWT \n(We require 2 8 0 and need at least 2 7 0 for this CL )\n\nAlso  replace our custom array assertion with Truth \n\n   com/google/guava/issues/2124\n   com/google/guava/issues/1999\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111624468\n  
2249,     Stop ignoring    sun com/bugdatabase/view_bug do?bug_id=6533203 in iterators now that the bug has been fixed in GWT for a while and the JDK for even longer \n(This is like CL 57745078 but for a different bug )\nAlso  go a step further  and remove support entirely for ignoring both bugs \n\nThis is safe to submit now that we require a version of GWT with the bug fix (2 8 0  though 2 7 0 would have been good enough) \n   com/google/guava/issues/1999\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111622620\n  
2250,     Go back to avoiding AssertionError(String  Throwable)  which isn t available in Gingerbread \n   android com/reference/java/lang/AssertionError html#AssertionError%28java lang String %20java lang Throwable%29\n\nThis rolls back CL 111609121  which AFAIK didn t break any tests but would have made broken tests run under Gingerbread throw NoSuchMethodError instead of the proper  descriptive AssertionError \n\nI had noted this compatibility issue previously but had dismissed it because we were not running our tests on Android at the time \n   com/google/guava/issues/1999#issuecomment-85579982\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111622300\n  
2251,     Remove unnecessary copy of Arrays copyOf now that we require a new enough version of GWT \n\n(taken over from kak s CL 83767705)\n\n   com/google/guava/issues/1942\n   com/google/guava/issues/1999\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111610384\n  
2252,     Automated g4 rollback of changelist 86212236 \n\n*** Reason for rollback ***\n\nWe now require GWT 2 8 0 \n\n   com/google/guava/issues/1999\n\n*** Original change description ***\n\nAvoid AssertionError(String  Throwable) constructor  which isn t available in version of GWT we use for Guava \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111609121\n  
2253,     Add a test case to GraphEqualsTest to make sure edge direction is handled properly in different graph types  Also  use EqualsTester so that we re additionally verifying that the hashcodes between equal graphs are equal \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111547711\n  
2254,     Use Collections newSetFromMap directly \nIt is available in GWT as of 2 7 0 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111510442\n  
2255,     Optimize PairedStatsAccumulator addAll(PairedStats)  If we update the xStats before we update sumOfProductsOfDeltas  instead of after  so that we use the new value of (values xStats() mean() - xStats mean()) instead of the old value  then we absorb two of the factors in the product  and save ourselves a multiplication and a division \n\nThis seems like a straight win  and also makes the code look more like that in the add(double  double) method \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111495396\n  
2256,     Change StatsAccumulator addAll(Stats) to use a more Knuth-like calculation for the mean  I claim that this is more accurate in the cases we care about \n\nWe know that this method is more accurate when adding a single value to an accumulator which has accumulated a large number of values (see Knuth for the background)  I believe that it is generally more accurate when we are adding a small number of values to a larger number  It may be less accurate when the two datasets are comparable in size  But I claim that we care about the former more than the latter \n\nAs a motivating example  think turning a double into a Stats of a single value  and then merging the Iterator<Stats> into a single Stats using this new method  The aggregation will happen hierarchically: typically  there will be a first phase on the mapper where we combine individual values on a given shard  and a second phase on the reducer where we combine values from the various shards  In the first phase  we\ re combining a lot of Stats each with a single value  so this is actually equivalent to the case where we\ re adding a single value  and the Knuth method is definitely more accurate  In the second phase  we can expect to be combining similarly-sized Stats instances from a large number of shards  so the process will be dominated by the case where we\ re adding one shard\ s values to many shards\  values  which is adding a small number to a larger number \n\nAnything where we\ re combining more than a few similarly-sized Stats instances will benefit from this change \n\nThis CL also makes a tiny tweak to add(double): instead of incrementing count and then branching on count==1  it branches count==0 and increments (or sets to 1) inside both branches  This is probably more readable (because it\ s easier to understand  are we starting from an empty accumulator  than  are we creating an accumulator with one value )  it improves the symmetry between the two methods  and there\ s an outside chance it could be faster (if the compiler/hotspot create better code for comparing to zero) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111495046\n  
2257,     Convert all @GwtIncompatible reason values to implementation comments \n(redo of CL 110542459)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111321187\n  
2258,     Add @GwtIncompatible annotations to top-level classes \n(redo of CL 110542265)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111314988\n  
2259,     Fix a tiny mathematical typo in LongMath \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111156014\n  
2260,     Add @since for RangeSet intersects \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=111072613\n  
2261,     Add @CheckReturnValue to BaseEncoding decode() and decodeChecked() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110989320\n  
2262,     Adds an addAll(Stats) method to add a Stats object to a StatsAccumulator  and corresponding methods for PairedStats and PairedStatsAccumulator \n\nThis is useful for merging statistics accumulated by multiple StatsAccumulators  One application is using a saved Stats object to restore the state of a StatsAccumulator \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110843746\n  
2263,     Add  intersects() to RangeSet \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110802499\n  
2264,     Provide information about which parameter we were passing null for and what values we used for the other parameters -- even if another exception was thrown \n(We already did this if no exception was thrown  thanks to CL 3405048 and CL 48801694) \n\n   com/google/guava/issues/2264\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110793874\n  
2265,     Release Futures whenAllComplete and whenAllSucceed as @Beta \nWe may still develop these further by integrating allAsList/successfulAsList into them \n\nRelated Guava request:\n   com/google/guava/issues/1421\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110712191\n  
2266,     Add deprecation notices to mutation methods on ImmutableRange Set Map  as per    com/google/guava/issues/2258 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110711365\n  
2267,     Automated g4 rollback of changelist 110542265 \n\n*** Original change description ***\n\nAdd @GwtIncompatible annotations to top-level classes \nOur previous policy was:  Look for a @GwtCompatible annotation  If it doesn\ t have one  then it\ s not GWT-compatible  \n\nBut maybe it\ s better to be explicit in both cases?\nIf nothing else  it might let us write tests that everything is annotated one way or the other  so we would have to actively annotate something wrongly to get the wrong outcome \nBut the real motivation is that this gets us a step closer to relying on the GWT compiler\ s @Gw   \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110556733\n  
2268,     Automated g4 rollback of changelist 110542459 \n\n*** Original change description ***\n\nConvert all @GwtIncompatible reason values to implementation comments \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110555733\n  
2269,     Convert all @GwtIncompatible reason values to implementation comments \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110542459\n  
2270,     Add @GwtIncompatible annotations to top-level classes \nOur previous policy was:  Look for a @GwtCompatible annotation  If it doesn\ t have one  then it\ s not GWT-compatible  \n\nBut maybe it\ s better to be explicit in both cases?\nIf nothing else  it might let us write tests that everything is annotated one way or the other  so we would have to actively annotate something wrongly to get the wrong outcome \nBut the real motivation is that this gets us a step closer to relying on the GWT compiler\ s @GwtIncompatible stripping internally (as we already do externally) instead of our own \n\nDo note  though  that I haven\ t fully annotated everything:\n- I\ ve skipped c g c base internal Finalizer  where I\ m not sure it\ s safe to depend on @GwtIncompatible or even to declare a special copy  (It has a test that forbids nested classes  but maybe I could put a copy in the internal package as a top-level class?)\n- I might have just missed stuff that was added since I first created the first version of this CL back in  like  2013  (This is actually part of my motivation for submitting it: I keep having to do enormous syncs with annoying merges  I want to stop carrying these changes around in a client )\n\nI\ ve left all of the reasons (that is  the annotation values) blank \nWe decided that this was OK in API Review \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110542265\n  
2271,     Remove @SuppressWarning for  CheckReturnValue  and  CanIgnoreReturnValue  in\nfavor of unused variables \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110486602\n  
2272,     Make @GwtIncompatible reason optional \nWhile there  redocument and reformat the file \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110482560\n  
2273,     Make AbstractFuture#done protected & rename it #afterDone to decrease chance of collision with existing subclasses \n\nafterDone() provides a more general (and probably overall better) solution than what was originally proposed in    com/google/guava/issues/1905\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110469383\n  
2274,     Add @SafeVarargs to Immutable List Set  of just to suppress the Eclipse warning \n\n(Taken over from lowasser s CL 101977679 )\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110376515\n  
2275,     Increase wait time \n\nI saw a failure with the current value  and I assume that it just didn t wait long enough:\n\n-------------------------------------------------------------------------------\nTest set: com google common util concurrent InterruptibleMonitorTest\n-------------------------------------------------------------------------------\nTests run: 16  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 0 447 sec <<< FAILURE!\ntestTryEnterIf_initiallyTrue(com google common util concurrent InterruptibleMonitorTest)  Time elapsed: 0 067 sec  <<< FAILURE!\njunit framework AssertionFailedError: expected:<true> but was:<false>\n\tat junit framework Assert fail(Assert java:47)\n\tat junit framework Assert failNotEquals(Assert java:283)\n\tat junit framework Assert assertEquals(Assert java:64)\n\tat junit framework Assert assertEquals(Assert java:71)\n\tat com google common util concurrent TestThread callAndAssertBlocks(TestThread java:145)\n\tat com google common util concurrent MonitorTestCase testTryEnterIf_initiallyTrue(MonitorTestCase java:186)\n\nThis is the first time I ve seen this test be flaky \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110375968\n  
2276,     Deprecate DoubleMath mean \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110342322\n  
2277,     A first pass at an optimized canDecode implementation \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110304545\n  
2278,     Add BaseEncoding canDecode(CharSequence) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110289529\n  
2279,     Suppress test under Android \nIt is occasionally slow  making GuavaAndroidTests flaky \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110259603\n  
2280,     Migrate callers of (Long|Int)Math checked(Add|Multiply) to the new saturated math methods if it appears that that is what they wanted \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110255813\n  
2281,     Write compare method in a way that won t look buggy to Error Prone \n\nThis change modifies Java compare methods that are using int casts from longs in\na usually broken way  Int casts in Java will truncate a long value and\nconsequently may alter the sign of the value being cast  Compare methods may be\nimplemented using a subtract  iff values are known not to be near overflowing\nlimits  When the values are longs you can get:\n\nint compare(MyLongHolder other)  \n  return (int)(other x - x);\n \n\nAs the cast won’t preserve the sign of the subtract it is buggy and can lead to\nbroken sort orders \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110206257\n  
2282,     Add LocalCache getOrDefault implementation \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110199123\n  
2283,     Automated g4 rollback of changelist 110160185 \n\n*** Reason for rollback ***\n\nMysteriously breaks tests \n\n*** Original change description ***\n\nMake AbstractFuture#done protected \n\ndone() provides a more general (and probably overall better) solution than what was originally proposed in    com/google/guava/issues/1905\n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110198153\n  
2284,     Warn not to call any default methods on the map returned by Cache asMap() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110193849\n  
2285,     Update deletion date for Sets newSetFromMap to December 2017 \n\nAlso switch all calls to it from other methods in Sets to use Collections newSetFromMap \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110188751\n  
2286,     Add saturated(Add|Subtract|Multiply|Pow) IntMath and LongMath\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110188732\n  
2287,     Document Predicate vs  Java 8 issues \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110185504\n  
2288,     To generate random hashable things  use Random instead of Object hash codes \n\nApparently Object hash codes are not particularly random on Gingerbread  under which we run our tests (though they\ re better by Marshmallow) \nPerhaps the  best  hash functions can deal with this  but we\ ve seen a few hash functions that sometimes generate more collisions than our tests permit \n\nThis made their tests flaky \n\nI couldn\ t identify any particular reason for the use of hash codes over Random \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110171885\n  
2289,     Make AbstractFuture#done protected \n\ndone() provides a more general (and probably overall better) solution than what was originally proposed in    com/google/guava/issues/1905\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110160185\n  
2290,     Make a slight tweak to the way we calculate means in StatsAccumulator  We pull out a variable for (value - mean) instead of computing it twice  This also means that we no longer need the old mean to compute the change in sumOfSquaresOfDeltas  we only need the new mean  so we can update mean directly instead of storing nextMean  We end up with the same number of temporary variables and the same calculation but one subtraction fewer and (perhaps more importantly) we do the computations in a more natural order \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110147656\n  
2291,     Skip JUnit 4 test under Android \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110097819\n  
2292,     Update Guava s package-info java files to point at github instead of googlecode \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110088488\n  
2293,     Add package-info java for com google common graph \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110041898\n  
2294,     Hardcode the expected value to work around Android UTF_16 bug:\n   google com/p/android/issues/detail?id=196848\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110028408\n  
2295,     Adds to PairedStats toByteArray() and fromByteArray() to facilitate (faster) serialization \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110027472\n  
2296,     Prepare Stats et al and Quantiles for beta release in Guava 20 0 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110013555\n  
2297,     Open source com google common graph into Guava \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110008126\n  
2298,     Update README to reference 19 0 as the latest release \n\nAlso update the current snapshot version from 19 0-SNAPSHOT to 20 0-SNAPSHOT \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=110006844\n  
2299,     Skip cases in which checkedMultiply() fails on Gingerbread (because of an Android bug that has since been fixed) \nI would ideally also be unsuppressing the test now  but it s sometimes slow enough to be flaky  so I m leaving it suppressed \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109997357\n  
2300,     Upgrade Guava to use Truth 0 28 for its tests \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109995862\n  
2301,     Re-suppress testDivNonZeroExact  which  like testDivNonZero  is too slow \nIt s been flaky since I turned it back on \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109911520\n  
2302,     Instead of skipping testDivNonZeroExact entirely under Android  skip only the problematic cases \nAndroid bug:    google com/p/android/issues/detail?id=196555\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109800696\n  
2303,     Document that bug affecting LongMathTest testDivNonZeroExact() has been fixed in recent versions of Android \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109800032\n  
2304,     Suppress testGoodFastHash32 under Android  as it is flaky there \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109792217\n  
2305,     Remove type parameters from IterableSubject  MultisetSubject  and MultimapSubject \n\nSee    com/google/truth/issues/192\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109722143\n  
2306,     Document that regex bug has been fixed in recent versions of Android \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109689421\n  
2307,     Better documentation for an Android test suppression \nMatcher probably isn t intended for cases in which the subject string is being mutated \nWe probably don t need to test this case at all  but I ve kept it around for now and just explained why it s kind of unfair to begin with \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109688628\n  
2308,     Shuffling from internal-only change \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109621456\n  
2309,     Preparation for j2cl in com/google/common/collect|math|primitives \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109604218\n  
2310,     Remove support for deprecated GWT Dev Mode (but continue to support Super Dev Mode) \n\nRelated:    com/google/guava/issues/1328\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109588917\n  
2311,     Update README to reference 19 0-rc3 as the latest release candidate \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109442368\n  
2312,     Add @Beta annotation to new subSet/subMap methods \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109435892\n  
2313,     Add subSet and subMap methods to Sets and Maps (respectively) which use Ranges\nto construct the views \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109360209\n  
2314,     Delete InputSupplier and OutputSupplier from Guava \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109306705\n  
2315,     Remove TODO  We re satisfied with the current behavior \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109112840\n  
2316,     Ensure the correct removal notification is published \n\nFixes #2101 \n\nPull request #2122 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=109009756\n  
2317,     Add @CheckReturnValue to more BaseEncoding APIs \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=108994823\n  
2318,     Fix calls to contains(Object) and get(Object) that pass a value of apparently the wrong type \nTighten up some generics in other cases to make the type  which was correct after all  look more correct \n\nBUGS:\n\nAbstractBiMapTester:\n- Fix inv entrySet() contains(   ) check  which was using the forward entry instead of the reverse \n- Fix getMap() get(v) call to be an inv get(v) call \n- Use |reversed| instead of |entry| consistently for clarity \n\nTypeToken:\n- Call map get(K) instead of map get(TypeCollector) \n(Presumably this was just an optimization and not necessary for correctness?)\n\nSIMPLIFICATIONS:\n\nTypeResolver:\n- forLookup always returns a (nullable) TypeVariableKey  Declare that return type instead of plain Object \n(benyu@: I feel like we may have talked about this  with your expressing a preference for the Object type  But I can find no record of the discussion  so I could be making that up  If you do prefer Object  I won t push for the change )\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=108994208\n  
2319,     Restore import for java util Formatter \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=108345794\n  
2320,     Remove import for java util Formatter since it s needed only for the javadoc \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=108184450\n  
2321,     Adds documentation to various Sets and Maps factories to discourage their usage \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=108181363\n  
2322,     Add toString() overloads for all of the singleton enums in c g common primitives\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=108004576\n  
2323,     Some prep for making SleepingStopwatch extensible someday \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107961123\n  
2324,     Add a third AtomicHelper strategy to abstract future\n\nThis should only be used when getDeclaredField(String) fails (used by AtomicReferenceFieldUpdater)   afaik classes are always allowed to reflect on their own private fields so this should never happen   But some Samsung 5 0 x android devices have bugs in the reflection APIs that can cause this to happen   As yet reproducing such failures has proven elusive  it is thought that this failure mode may depend on address layout randomization or possibly a flaky bug in the ART compiler \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107939645\n  
2325,     Update Public Suffix List \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107852605\n  
2326,     Another flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107780748\n  
2327,     Fixes missing parenthesis in javadoc for addCallback in Futures java\n\nThe current example does not compile \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107776271\n  
2328,     Suppress another flaky test \nI ve seen 3 failures in the past 2 weeks \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107682920\n  
2329,     Implement FarmHash s Fingerprint64 in Java \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107440675\n  
2330,     Explain relationship with juf Function \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107409616\n  
2331,     Document the behavior of transform(|Async) if the input fails \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107384495\n  
2332,     Revise CL 103553690 s scaretext  and propagate it to Cache \n\nAlso  reformat to 100 characters where not already done \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107269241\n  
2333,     Suppress another test that s flaky on Android \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107265666\n  
2334,     Start running the tests for guava-testlib under Android \nThis revealed the usual minor problems and also a new test bug in ForwardingWrapperTesterTest: The sample buggy forwarding class was buggy in *two* ways instead of the intended one  Not only did it forward to the wrong method in one case  but it also reversed the order of parameters in all cases  Android happens to test its methods in a different order than the JVM  so it detects the reversed parameters first  I ve fixed this by fixing the parameter order \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107246813\n  
2335,     Remove no-longer-needed suppression method \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107200850\n  
2336,     Implement CharSource asByteSource(Charset) \n\n   google com/document/d/12AiHmmoOuMFposUQI9nyVBUr7-pZcsiKkDj5sm2Qwvo/edit\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107071921\n  
2337,     Add warning/scare text to MD5 and SHA1 hash functions \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107007414\n  
2338,     Make CycleDetectingLockFactory lockStateChanged static \nFixes #2213 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107001430\n  
2339,     Make MultisetNavigationTester totalSize static \nFixes #2214 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=107000422\n  
2340,     Make methods in CycleDetectingLockFactoryBenchmark static\nFixes #2215 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106999688\n  
2341,     Make some methods in guava-tests static \nFixes #2216 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106999599\n  
2342,     Suppress another flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106983717\n  
2343,     Reduce Bloom filter size again to reduce (eliminate?) flakiness \n(In fact  CL 106839287  while it claims to remove a value that\ s  no longer meaningful   seems to have made the flakiness worse  This fits with the comments on the CL that suggest it has effects -- specifically  an increase in wall time  Since that CL  this test has been failing 100% of the time instead of just the vast majority of the time  though it\ s possible that the timing is a coincidence )\nThis test has also been causing problems for our coverage build:\n\n[ \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106949319\n  
2344,     Fix lastIndexOf reference in BooleansTest \n\nSaw this when looking through [  Looks to be a copy/paste error?\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106864923\n  
2345,     Suppress new CollectionIncompatibleType Error Prone check by casting\nincompatibly-typed argument to query methods in generic collection types \nThis will enable us to make this pattern an error in [   preventing\nfuture occurrences of this bug \n\nREVIEWERS TAKE NOTE: We are *not* fixing this bug   Fixing it requires making\na behavioral change  and we need your team to assume any risks associated\nwith that  Please approve this CL  so we can enable the new compiler error\nand prevent future occurrences of this bug \n\nBackground:\n\nVarious generic collection types have methods that take Object rather than the type parameter you would expect  e g  Collection#contains  Consider a\nCollection<String>   If someone invokes contains() on that collection and\npasses in an argument of type Integer  it can never return true because the\nCollection cannot contain any Integers \n\nThis CL changes places where these methods are called with an incompatible\ntype by casting the argument to the declared type of the method  such as\nObject or Collection<?>   **This does not fix the bug **  It is\nsemantically-equivalent code that bypasses the Error Prone check so that the\ncode will continue to compile after we enable the check in the compiler \nFixing the bug mechanically is not feasible because the fixes are too complex \nbut we want to prevent more instances of this bug from entering the codebase \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106759178\n  
2346,     Eliminate some CollectionIncompatibleType errors that were suppressed by CL 106598613 \nThe errors are harmless in this case  but we might as well make sane calls \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106759168\n  
2347,     Suppress new CollectionIncompatibleType Error Prone check by casting\nincompatibly-typed argument to query methods in generic collection types \nThis will enable us to make this pattern an error in [   preventing\nfuture occurrences of this bug \n\nREVIEWERS TAKE NOTE: We are *not* fixing this bug   Fixing it requires making\na behavioral change  and we need your team to assume any risks associated\nwith that  Please approve this CL  so we can enable the new compiler error\nand prevent future occurrences of this bug \n\nBackground:\n\nVarious generic collection types have methods that take Object rather than the type parameter you would expect  e g  Collection#contains  Consider a\nCollection<String>   If someone invokes contains() on that collection and\npasses in an argument of type Integer  it can never return true because the\nCollection cannot contain any Integers \n\nThis CL changes places where these methods are called with an incompatible\ntype by casting the argument to the declared type of the method  such as\nObject or Collection<?>   **This does not fix the bug **  It is\nsemantically-equivalent code that bypasses the Error Prone check so that the\ncode will continue to compile after we enable the check in the compiler \nFixing the bug mechanically is not feasible because the fixes are too complex \nbut we want to prevent more instances of this bug from entering the codebase \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106729548\n  
2348,     Fix buggy test identified by CollectionIncompatibleType \nThe test was calling get(class) instead of get(typeToken) \nThe test still passes  since it was expected a null return value -- exactly what it gets for a key that isn t present \nI ve also added containsKey() and entrySet() contains() checks to verify that the null value really is present \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106703971\n  
2349,     Improve docs \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106684213\n  
2350,     Reduce size of  large bloom filters  test   it\ s causing OOMEs\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106629533\n  
2351,     Suppress new CollectionIncompatibleType Error Prone check by casting\nincompatibly-typed argument to query methods in generic collection types \nThis will enable us to make this pattern an error  preventing\nfuture occurrences of this bug \n\nREVIEWERS TAKE NOTE: We are *not* fixing this bug   Fixing it requires making\na behavioral change  and we need your team to assume any risks associated\nwith that  Please approve this CL  so we can enable the new compiler error\nand prevent future occurrences of this bug \n\nBackground:\n\nVarious generic collection types have methods that take Object rather than the type parameter you would expect  e g  Collection#contains  Consider a\nCollection<String>   If someone invokes contains() on that collection and\npasses in an argument of type Integer  it can never return true because the\nCollection cannot contain any Integers \n\nThis CL changes places where these methods are called with an incompatible\ntype by casting the argument to the declared type of the method  such as\nObject or Collection<?>   **This does not fix the bug **  It is\nsemantically-equivalent code that bypasses the Error Prone check so that the\ncode will continue to compile after we enable the check in the compiler \nFixing the bug mechanically is not feasible because the fixes are too complex \nbut we want to prevent more instances of this bug from entering the codebase \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106628443\n  
2352,     Fix deletion date for Objects APIs to be two years since the release of 18 0 \n\n   github io/guava/releases/18 0/api/diffs/changes/com google common base Objects html\n   com/google/guava/wiki/ReleaseHistory\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106615381\n  
2353,     Flag another flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106606046\n  
2354,     Adding SOAP 1 2 media type \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106586330\n  
2355,     Pick a clearer word to describe |target| \n\nFixes #2211 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106549164\n  
2356,     Another flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106508082\n  
2357,     Suppress more flaky tests  plus a few that I m guessing will also be flaky (because they have nested loops over our integer candidates) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106498617\n  
2358,     Another another flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106438348\n  
2359,     Yet another flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106426307\n  
2360,     Re-apply wildcard translation fix \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106415574\n  
2361,     Suppress the MapMaker equivalent of the Cache test suppressed in CL 106397380 \nThe test is flaky \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106404785\n  
2362,     Revert unintended Objects->MoreObjects migrations \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106403843\n  
2363,     Another flaky test \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106402571\n  
2364,     Migrate users from c g c base Objects to MoreObjects \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106401177\n  
2365,     Suppress the main flaky tests we ve seen since running Guava-Android tests \nThis probably isn t a complete list  but it s a good start \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106397380\n  
2366,     Replace one use of String split() with a Splitter to reduce\nmemory allocations \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106330171\n  
2367,     Rename SuppressUnderAndroid to  AndroidIncompatible   since we treat it just like GwtIncompatible: stripping  not @Suppress-style suppression \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106329942\n  
2368,     Eliminate the hacks that we needed in order to use ClassValue and Unsafe on Android \nNow we tell Proguard to ignore those classes (since Unsafe is actually available and both have fallbacks anyway) \n\n(partial rollback of CL 101034385)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106320897\n  
2369,     Suppress  non-varargs call of varargs method with inexact argument type for last parameter  \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106315392\n  
2370,     Automated g4 rollback of changelist 105235264 \n\n*** Reason for rollback ***\n\nIt turns out this doesn t fix the Guava issue  As such  I think it s probably preferable to keep the count != 0 check as it prevents unnecessary work when there are no entries in the segment  I have another fix in progress that seems to work \n\n*** Original change description ***\n\nAttempt to address    com/google/guava/issues/2131 by removing the if (count != 0) check \n\n***\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106181279\n  
2371,     Port a small optimization made to a copy of ByteStreams upstream \n\nThe small optimization preallocates the ByteArrayOutputStream \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106169239\n  
2372,     Stop stripping Error Prone @ForOverride from Guava \n(We still need to strip @LazyInit  which hasn t yet been released publicly )\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106159338\n  
2373,     Have Cache stats() warn that stats might be untracked (zero)  Addresses Guava\nissue #2178 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106154194\n  
2374,     Fix RegularContiguousSet intersection to handle singleton results \n\nPull request from perceptron8 <perceptron8@gmail com>\n   com/google/guava/pull/2197\n\nFixes    com/google/guava/issues/2196\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106153276\n  
2375,     Warn about stringConverter() s very surprising behavior for Longs  Ints and Shorts \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106139124\n  
2376,     Link to wiki \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=106007357\n  
2377,     Improve Throwables propagate javadoc\n\nThe mention of the type system is misleading  and a word was missing \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105980357\n  
2378,     Fix Iterables removeIfFromRandomAccessList to handle Lists for which set() throws IAE (for example  if the list disallows duplicate elements) \n\nFixes Guava issue #1596\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105826920\n  
2379,     Add a note about finding the first non-null element in an iterable and with varargs \n\nRelated to    com/google/guava/issues/384\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105802942\n  
2380,     Make warning warningy  Fixes Guava issue #2153 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105800506\n  
2381,     Update the comment link for the Apple Passbook media type \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105787155\n  
2382,     Deprecate FluentIterable of(E[ ) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105753905\n  
2383,     For public Guava only  rely on the GWT compiler s built-in @GwtIncompatible stripping instead of our custom stripping \nThe custom stripping dates from the days before GWT 2 6 0 added it to the compiler:    gwtproject org/release-notes html#Release_Notes_2_6_0_RC1\nThis change has been possible for a while  since Guava has required GWT 2 6 1 since Guava 18  but we hadn t had the motivation \nNow we do: This lets us avoid checking the stripped sources into Github  which lets us avoid mixing stripped and handwritten sources  which lets us simplify our MOE inverse mappings \nInternally  we will continue to rely on the custom stripper for now \n\nMechanically  all we re doing is:\n- Remove all the stripped sources from public Guava (by removing the build rules that put them into Guava) \n- In Maven/Ant  copy *all* GWT-compatible sources  whether fully GWT-compatible or not  into our GWT resources  Those that aren t fully GWT-compatible either have supersource emulations (in which case the main sources will be ignored under GWT s usual supersource mechanism  as they are now) or simply require the built-in @GwtIncompatible stripping (in lieu of the previous custom stripping) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105596491\n  
2384,     Add tests that demonstrate the difference between FI from(E[ ) and FI of(E[ ) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105513154\n  
2385,     Reformat much of util concurrent \n\nI squeezed in a few other changes:\n- for (;;) => while (true)  since our formatting rules require(?) weird formatting for the former\n- removal of some  @throws NullPointerException if x is null  clauses  since that is our default policy\n- adding    to some if() statements or loops or something\n- maybe other things I forgot?\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105508573\n  
2386,     Update public suffix list \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105479296\n  
2387,     Don t strip the @GwtIncompatible from Guava \nDoing so will cause problems if we change how we generate GWT supersource \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105328892\n  
2388,     Remove @GoogleInternal from GWT emulation of ForwardingSortedMultiset \nForwardingSortedMultiset itself has been GWT-compatible since CL 43412779 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105327321\n  
2389,     Emphasize the differences between of(E[ ) and from(E[ ) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105322014\n  
2390,     Cache Ordering natural() nulls First Last ()  since those are very commonly used     com/google/guava/issues/1451\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105247018\n  
2391,     Attempt to address    com/google/guava/issues/2131 by removing the if (count != 0) check \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105235264\n  
2392,     Link from SettableFuture to AbstractFuture  and do some more rewriting and reformatting \nMotivation:    com/google/guava/pull/2184\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105234717\n  
2393,     Address    com/google/guava/issues/1543 by explicitly despecifying evaluation order \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105077540\n  
2394,     Rewrite Iterables toArray to work correctly in the presence of concurrent modification (   com/google/guava/issues/1558) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105071914\n  
2395,     1  Omit sun security * methods from our Android tests \nThat package isn t available there (at least at compile time  presumably at all) \n\n2  Accept NPE instead of IAE when given an empty key \nI didn t dig enough to figure out whether this was an Android bug or a spec ambiguity \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105070193\n  
2396,     Whitespace changes from MOE release?\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=105015253\n  
2397,     Make MutableClassToInstanceMap serializable \n\nFixes Guava issue #1437 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104998043\n  
2398,     Remove more possible static-init deadlocks (   com/google/guava/issues/1977) \n\n- ImmutableSortedMultiset: I couldn t figure out a way for this to actually deadlock  but I figure it s best for it to follow the pattern of the others \n- ImmutableSortedSet: This might be able to deadlock if one thread creates a RegularImmutableMap (which then calls into RegularImmutableSortedSet and then ImmutableSet) while another initializes ImmutableSortedSet (which then calls into RegularImmutableSortedSet) \n- ImmutableTable: This might be able to deadlock if one thread GWT-deserializes a SparseImmutableTable (which then calls into ImmutableTable) while another initializes ImmutableTable (which calls into SparseImmutableTable) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104995935\n  
2399,     Upgrade local variables for Iterables filter and Iterators filter to indicate the input predicate keeps the result (not filter out elements from result) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104528163\n  
2400,     Update README to include link to guava-testlib Javadoc and to reference 19 0-rc2 as the latest 19 0 release candidate \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104437358\n  
2401,     Bump version of maven-dependency-plugin \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104298531\n  
2402,     Fixes to FluentIterable:\n-add from(E[  elements) (unmodifiable)\n-open source of()\n-open source of(E  E   )\n-soon-to-deprecate of(E[ ) (modifiable)\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104226690\n  
2403,     Delete AbstractFuture newCancellationCause() \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104201894\n  
2404,     Test rejectionPropagatingExecutor under GWT \nThis would have caught the bug since fixed in CL 104101156 \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104199812\n  
2405,     Update the Public Suffix List \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104153251\n  
2406,     Move many implementations out of Futures java (   com/google/guava/issues/2091) \nMostly I ve moved them to new classes  but I ve also moved rejectionPropagatingExecutor to MoreExecutors (unmodified except for a new null check) \n\nThis also revealed that the GWT copy-pasted catching/catchingAsync code was missing use of rejectionPropagatingExecutor  This is now fixed \n\nAlso  reformat the moved code \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104101156\n  
2407,     Presize the ArrayList/LinkedHashMap to which ListFuture/MapFuture adds its final results  See [  for motivation (ignore the fact that I accidentally used List#newArrayListWithExpectedSize there    oops!) \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=104098308\n  
2408,     Make TreeRangeSet Serializable \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103974562\n  
2409,     Disable cancellation causes by default and make them enableable via a system property \n\nAlso  remove protected from newCancellationCause   I ll eliminate in a followup \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103957793\n  
2410,     Remove unnecessary string literal concatenation \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103863840\n  
2411,     Test the current propagation of cancellation (but non-propagation of interruption) from the input Future to the transformed Future \nArguably we should test this for methods like catching+catchingAsync and perhaps others  Maybe we already do; these tests are kind of a mess:    com/google/guava/issues/2091\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103769878\n  
2412,     Add copy/paste for Gradle projects that want to use Guava \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103556414\n  
2413,     slight error message enhancement requested in Guava bug #2158\n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103386220\n  
2414,     Point users directly to catchingAsync instead of requiring them to read the withFallback deprecation advice  too \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103323620\n  
2415,     Open source the HMAC hashing libraries (@since 20 0) \nClone the underlying Mac instance (if possible) during newHasher() invocations \n-------------\nCreated by MOE:    com/google/moe\nMOE_MIGRATED_REVID=103098597\n  
2416,     Try to uncorrupt the Converter javadoc \n   [  com/5619060859994112\n\nIf I ever interview elsewhere in the future and they ask what the hardest\ntechnical challenge I ever faced was  I plan to say  getting a code example to\nshow up right in Javadoc   Unless they want an example where I was ultimately\nsuccessful \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102877432\n  
2417,     Deprecate Hasher#hashCode()  implementations of this method return a hashCode of the Hasher object itself and not the hashed data  deprecating this would help warn users of making this mistake \n\nSee [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102665096\n  
2418,     Fix two javadoc typos in Forwarding[Loading Cache ( delegete  ->  delegate ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102646747\n  
2419,     Ensure that ByteStreams skipFully/skipUpTo don t skip more bytes than remain in the stream \n\nThis is a horrible thing that is possible with FileInputStream in JDK7  despite that it violates the contract of InputStream skip  The solution (which we were already doing in our method for counting a stream via skip) is to never ask to skip more bytes than the stream reports as available() \n\nThis does unfortunately change skipFully to skip by reading when the InputStream always returns 0 from available() (the default behavior if it isn t overridden)  but as far as I can tell it s necessary to ensure correct behavior \n\nThis issue is causing test failures under JDK7 with the recent change to the behavior of ByteSource slice \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102586216\n  
2420,     Allow slicing a ByteSource starting at an offset that is >= the source s total size \n\nIn this case  the sliced source will be empty  Previously  the call to slice() would succeed but an exception would occur when the user attempted to read the returned source  There is precedent for this behavior: FileChannel/SeekableByteChannel allow setting the channel s position beyond the end of the file  in which case reads return EOF \n\nThis is a change to existing behavior  but I think it s probably a good change to make:\n\n- Previously  it was unspecified what happens if offset is >= source size  Now it s specified \n- Previously  a call to slice could succeed but return an (effectively) invalid ByteSource that would always throw \n- The override of ByteArrayByteSource slice is currently using this behavior  because I thought that was the behavior that the normal slice implementation was already using  I could change that  but I think this is preferable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102276980\n  
2421,     Remove unnecessary  unused  suppressions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102260279\n  
2422,     Escaped instance of symbol  \   within a url so that more apps detect the full URL \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102250495\n  
2423,     Mark ClassPath as compatible with j2objc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=102170255\n  
2424,     Make Splitter on(String) redirect to Splitter on(char) if the String has one character \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101985625\n  
2425,     A few small improvements to ImmutableSet method docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101956976\n  
2426,     Advertise Converter from() a little better  for Java 8 users \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101721565\n  
2427,     Avoid boxing ints in ConcurrentHashMultiset Preconditions checks\n\nThe preconditions checks for occurrences are boxing int values for the format\nstring  This has shown up in profiling as we are using this collection quite\nheavily  Switch from preconditions formatting to basic if statement to avoid boxing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101702798\n  
2428,     Use MultimapBuilder instead of a custom Multimap subclass in ImmutableMultimap builders \n(Retry of CL 100504590  which was rolled back in CL 100578593  The problematic target has been fixed )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101478691\n  
2429,     Roll back most of the rest of CL 100047098 (the javatests/    parts  since I got java/    in 100850485) \n\nLeave a few tests suppressed:\n- the  relies on assumptions about OpenJDK  Maps tests\n- TreeMultisetTest#testElementSetBridgeMethods\n- ForwardingMultisetTest#testElementSet\n- ImmutableTableTest#testOverflowCondition\n\n*** Reason for rollback ***\n\nNested test classes now work under Android: [ \n*** Original change description ***\n\nSpray @SuppressUnderAndroid on everything related to suite builders and nested test classes \nAlso:\n- Work around Android toArray() bug in UnmodifiableCollectionTests \n- Stop referring to NavigableMapTestSuiteBuilder / ListTestSuiteBuilder in comments of ForwardingNavigableMapTest java / ListsTest java  The reference impedes the import stripper \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101455645\n  
2430,     Roll back the eventbus portion of CL 100292134 \n\n*** Reason for rollback ***\n\nNested test classes now work under Android: [ \n*** Original change description ***\n\nSuppress tests under Android \n- ByteStreamsTest testNewDataOutput_writeChars may show a legitimate bug  whether in our code or in the Android library \n- CloserTest testCreate looks up the JDK version  We should update this to look up the Android version if applicable \n- Android seems to have trouble with:\n  - nested test classes\n  - test classes without default constructors (which are necessarily constructed in suite() methods) \n\nI ve also improved some failure messages in ByteStreamsTest \n\n(Not   \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101455589\n  
2431,     Clarify why we re logging a specific failure \n\n   com/google/guava/issues/2134#issuecomment-133094389\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101240012\n  
2432,     (These changes apply ONLY to our Google-internal Android-specific copy of Guava )\n\n- Hackily disable use of Unsafe and ClassValue as a temporary measure \n- Strip comment reference to @ForOverride  which was impeding import stripping \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101034385\n  
2433,     Convert much of Guava to Truth by using Refaster \n\nThe motivation was my wish for a better ThrowablesTest error message in    com/google/guava/issues/2130 (though I m pretty confident that the problem there is \\n vs  \\r\\n) \nI made a lot of changes  but I left a lot undone  In particular  I avoided most of the collection assertions  since we often want to test specific collection methods  e g   we don t necessarily want get() to be rewritten to containsKey() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101020845\n  
2434,     Internally rewrite LexicographicalOrdering to accept a Comparator \n\nThis is just to make it easier  in Java 8  to write a Comparators lexicographical(Comparator) that need not go via Ordering \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=101014892\n  
2435,     Import Animal Sniffer annotation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100960079\n  
2436,     Update public suffix list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100855861\n  
2437,     Automated (partial) g4 rollback of changelist 100047098 \n(only the testlib parts  and excluding UnmodifiableCollectionTests  where we still need a workaround for Android s toArray() bug)\n\n*** Reason for rollback ***\n\nNo longer a problem now that we put test infrastructure in a separate dex (CL 100842219) and suppress searching for tests in that dex (CL 100849889) \n\n*** Original change description ***\n\nSpray @SuppressUnderAndroid on everything related to suite builders and nested test classes \nAlso:\n- Work around Android toArray() bug in UnmodifiableCollectionTests \n- Stop referring to NavigableMapTestSuiteBuilder / ListTestSuiteBuilder in comments of ForwardingNavigableMapTest java / ListsTest java  The reference impedes the import stripper \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100850485\n  
2438,     Test that the Future returned by schedule() returns the correct value \n\n   com/google/guava/issues/2133\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100686478\n  
2439,     Fix SlicedByteSource sizeIfKnown() to work in the case where offset + length > Long MAX_VALUE \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100584971\n  
2440,     Automated g4 rollback of changelist 100504590 \n\n*** Original change description ***\n\nUse MultimapBuilder instead of a custom Multimap subclass in ImmutableMultimap builders \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100578593\n  
2441,     Do intelligent sizing in ImmutableMap Builder put(Iterable<Entry>) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100573858\n  
2442,     Discourage use of CheckedFuture \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100572172\n  
2443,     Fix a typo in an identifier in FreshValueGenerator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100543465\n  
2444,     Use MultimapBuilder instead of a custom Multimap subclass in ImmutableMultimap builders \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100504590\n  
2445,     Fix ByteArrayByteSource slice to handle the case where offset + length > Long MAX_VALUE \n\nFixes    com/google/guava/issues/2127\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100485800\n  
2446,     Loosen up our nefarious Entry tests to permit an exception so long as the nefarious entry can t harm the underlying collection \nIf a nefarious Entry really wants to throw an exception  we can t stop it  since it could also do it from getKey() or getValue() \n\nThis fixes the test under Android \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100300382\n  
2447,     Suppress tests under Android \n- I ve suppressed nearly everything that might be calling Type equals()  At some point  we can try to figure out whether we can interoperate with Android s Type equals() just as we do with JDK7 s  Or we can at least be more surgical in our suppressions; this CL sprays them everywhere \n- I ve suppressed a bunch of URLClassLoader-using tests  I m not sure that custom URLClassLoaders make a lot of sense on Android \n- I ve suppressed some suite() methods  as I haven t managed to get the test-suite builders working under Android \n- ForwardingObjectTesterTest may show limitations of ForwardingObjectTester under Android  or it may a sign that we just need to call setAccessible or something  But since ForwardingObjectTester is just a package-private testing utility  I haven t dug into it \n- I ve commented a test in RateLimiterTest that may fail for similar reasons in newer versions of Android \n\nA general point about c g c reflect: Reflection is slow on Android  so it s unlikely that users will be making significant use of this package  For this reason  I don t see further work on Android testing of the package as a priority \n\n(Note that we don t actually run these tests on Android at HEAD  This will be changing soon )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100300236\n  
2448,     Whoops  FluentIterable cycle() does have a decent Stream equivalent when the source is something with a stream() method \n\nAnd I even tested this \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100298931\n  
2449,     Document why we re using a custom annotation instead of Android s built-in @Suppress \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100295547\n  
2450,     Suppress tests under Android \n- ByteStreamsTest testNewDataOutput_writeChars may show a legitimate bug  whether in our code or in the Android library \n- CloserTest testCreate looks up the JDK version  We should update this to look up the Android version if applicable \n- Android seems to have trouble with:\n  - nested test classes\n  - test classes without default constructors (which are necessarily constructed in suite() methods) \n\nI ve also improved some failure messages in ByteStreamsTest \n\n(Note that we don t actually run these tests on Android at HEAD  This will be changing soon )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100292134\n  
2451,     Fix    com/google/guava/issues/2125 by having all the AbstractService delegate classes forward their toStrings() to their outer impls \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100274992\n  
2452,     - Use newFastestQueue in ConsumingQueueIterator so that we get ArrayDeque instead of LinkedList on the server \n- Use newFastestQueue in BinaryTreeTraverser  bringing it one step closer to GWT compatibility \n- Rename newFastestQueue to newFastestDeque \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100127987\n  
2453,     Remove unneeded  emulated=true  to fix open-source GWT tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100126746\n  
2454,     Fix an ancient bug in Iterators cycle: Once we spawn a second iterator  we shouldn t remove from the first one \nAndroid caught this bug (by returning true from hasNext() rather than by throwing ConcurrentModificationException as the new test does) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100115203\n  
2455,     Make EvictingQueue GWT compatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100063347\n  
2456,     Makes sure guava only uses public GWT APIs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100051360\n  
2457,     Spray @SuppressUnderAndroid on everything related to suite builders and nested test classes \nAlso:\n- Work around Android toArray() bug in UnmodifiableCollectionTests \n- Stop referring to NavigableMapTestSuiteBuilder / ListTestSuiteBuilder in comments of ForwardingNavigableMapTest java / ListsTest java  The reference impedes the import stripper \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100047098\n  
2458,     Give MapMaker the same workaround as Cache for Android s concurrency-unsafe toArray() implementation \nThe fixes the corresponding Android test for MapMaker \nAlso  use that implementation for values() (for which we have no test  but it looks likely to be vulnerable  too) \nFinally  include an android com link in case the shutdown of Google Code invalidates the existing bug link \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=100037556\n  
2459,     Reformat with google-java-format (a few hand corrections necessary) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99979179\n  
2460,     Finish explaining the Stream equivalents \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99831803\n  
2461,     Eliminate our custom emulations of java nio charset Charset and java nio charset StandardCharsets \nThe classes will be including in GWT itself in the next release \nTo get our code to compile  we must change to build against a GWT snapshot \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99780060\n  
2462,     Update FluentIterable to explain its relationship with Stream \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99760803\n  
2463,     Suppress tests on Android \n- BigInteger and BigDecimal appear to be buggy on Android (at least Gingerbread  where I m testing now  since we claim to work with it) \n- Some c g c math utilities appear to be failing there  presumably because of other Android bugs  but I suppose it s conceivable that there s something wrong with our code  Ideally we will investigate further at some point  perhaps after testing on newer versions of Android \n\nAlso  check in some of the failure-message improvements I put together while debugging \n\n(Note that we don t actually run these tests on Android at HEAD  This will be changing soon )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99743836\n  
2464,     Suppress tests under Android:\n- EasyMock  since class extension doesn t work there\n- BloomFilter tests where Android runs out of memory\n- a couple other tests where Android appears to disagree about String format rounding\n\n(These tests don t actually run on Android at HEAD yet  but they will soon )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99728601\n  
2465,     Update public suffix list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99624314\n  
2466,     Loosen the tests around the regex: It s OK for the regex to match something that turns out to be invalid \nThis makes the test pass on Android \n\nAlso  add debugging output for when the test does fail \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99605586\n  
2467,     Migrate from EasyMock to Mockito \nThis lets the test work on Android \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99598924\n  
2468,     Work around Android toArray() bug by doing what we arguably should have done in the first place -- calling containsElementsIn(   ) inOrder() instead of converting both arguments to List \n\n   google com/p/android/issues/detail?id=72073\n   android com/98929\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99598194\n  
2469,     Provide concurrency-safe toArray() implementations for Android VMs (at least Gingerbread  probably others) that need it \nThis fixes LocalCacheTest testExpand_cleanup on Android:\n[ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99595440\n  
2470,     Add notes about circular buffer to EvictingQueue javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99585760\n  
2471,     - Stop manually stripping @MediumTest  MOE has stripped it automatically for a while  Remove end-of-line comments that were interfering with stripping in this particular case \n- Strip @Flaky with strip_line instead of begin_strip/end_strip \n\nBoth of these are minor simplifications  and that\ s nice  But also   \n\nI ran into a bad interaction between (I think) MOE\ s  strip elements with this annotation  stripper\ s heuristics and its comment stripper  I started stripping @MediumTest-annotated attributes from a special internal  Guava for Android   MOE\ s annotation heuristics appear to strip the end_strip comment but not the begin_strip comment  I guess that it\ s stripping everything from the first method annotation -- surely the right thing to do but a pain in this case  This causes MOE to strip everything from there to the end of the file  As it turns out  there\ s not much left to strip  But it strips the closing    so that fouls everything up \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99569931\n  
2472,     Fix for\nTypeToken[Map<?  String>  getSubtype(ClassToInstanceMap class)\n\nto return TypeToken[ClassToInstanceMap<String> \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99527025\n  
2473,     Mark MoreExecutors DirectExecutorService and decorator classes final to prevent Mockito spy usage\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99526523\n  
2474,     Javadoc update to reflect generic type change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99506351\n  
2475,     Noninvasive patch for negative results from size()   See    com/google/guava/issues/2108 for more details \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99503151\n  
2476,     Change the type of ImmutableSortedMultiset naturalOrder to be more liberal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99501054\n  
2477,     Fixes J2ObjC reference cycles in c g c util concurrent \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99482445\n  
2478,     Suppress some Guava tests for c g c base  and update others \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99400844\n  
2479,     Make a private inner class final  Prevents Mockito spy() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99391056\n  
2480,     Remove a stray @Beta annotation on a test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99365620\n  
2481,     remove special Error handling from JdkFutureAdapters   no need to turn Errors into deadlocks \n\nSuch special handling has been removed from other parts of concurrent over the years \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99300567\n  
2482,     Adding a new MediaType for  application/manifest+json   defined in    w3 org/TR/appmanifest/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99289128\n  
2483,     Use Ascii truncate() now that our copy of Guava contains it \nActually  I think we could have done this back in CL 97895305  if not earlier \n\n(partial rollback of CL 74746985)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99270142\n  
2484,     Optimize the GWT TimeUnit library in terms of performance \n\nBackground:\nLong divisions in GWT are expensive because there is no  long  type in Javascript and the GWT emulates them  When the TimeUnit library is used in a hot loop  it causes perfomance issues \n\nSolution:\nThe long divisions are extracted into precomputed constants \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99220786\n  
2485,     Give directExecutor a better toString() (currently it is just  INSTANCE )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99183090\n  
2486,     Fix cycles com google common cache \nAdds @J2ObjCIncompatible to com google common util Debugger \nStop whitelisting other packages that pass the cycle test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99038555\n  
2487,     Add mention of Guava 19 release candidate in README \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=99037572\n  
2488,     Introduce tryParse function to Longs which accepts radix parameter  This makes it consistent to Ints which support this function as well \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98915993\n  
2489,     Work around a type inference change in javac\n\nThe javac compiler\ s behavior when handling wildcards and  capture  type\nvariables has been improved for conformance to the language specification  This\nimproves type checking behavior in certain unusual circumstances  It is also a\nsource-incompatible change: certain uses of wildcards that have compiled in the\npast may fail to compile because of a program\ s reliance on the javac bug \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98889343\n  
2490,     Add maven-central badge to Guava README \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98851664\n  
2491,     Do not require an exception to be thrown on a no-op putIfAbsent if null is unsupported \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98636371\n  
2492,     Dummy change to test something \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98514770\n  
2493,     Use raw types in ImmutableSet copyOf(EnumSet) magic \n\nI haven t been able to find any better way to make this work when I try to build against Java 8 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98448037\n  
2494,     Add missing @throws tags to Verify \n\nPull request from Alberto Goffi <alberto goffi@usi ch>:\n   com/google/guava/pull/2106\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98443748\n  
2495,     Don t require an exception to be thrown on a no-op putIfAbsent if put is unsupported \n\nThis rules out Java 8 s default putIfAbsent implementation  and is really just a pain \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98443465\n  
2496,     Resolves J2ObjC reference cycles in eventbus \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98393529\n  
2497,     Update Guava s README md to add release info \n\nThis includes info on the latest release version as well as on snapshot versions  with links to Javadoc and JDiff for both \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98328630\n  
2498,     Fix guava test breakage due to GWT internal changes \n\nFor some reason Guava tests call into GWT internal implementations \n\nI ported guava to use Arrays copyRange instead of GWT s internal arrays methods  These\nmethods should never be called from any code outside of GWT s core module \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=98113442\n  
2499,     Eagerly check for an appropriate exceptionClass constructor during calls to Futures getChecked \nThis way  callers that pass a bad exceptionClass find out unconditionally instead of only when their Future fails \n\n(Retry of CL 97776570  rolled back in CL 97787294 because of a breakage that has since been addressed  I ve made two tweaks: I ve improved the error message (to minimize confusion  and I ve migrated to the standard J2ObCIncompatible annotation (as done elsewhere already) \n\nWe hope for bad exceptionClass parameters to soon be caught at compile time \n\nTo keep performance acceptable  cache a set of classes with appropriate constructors \nUse ClassValue  which was introduced in JDK7 \nDo the compatibility dance  including making Animal Sniffer happy by annotating the class that uses ClassValue \nThat requires updating Animal Sniffer to a version that respects the annotation in more places  perhaps related to    codehaus org/browse/MANIMALSNIFFER-29\nI ve also updated the Animal Sniffer signatures on the theory that newer is probably better  although there is no apparent no impact on Guava \n\nThe cost of the eager check is performance in the success case: What used to take ~1 6ns will now take ~3 2ns  This is likely to be swamped by the actual work being done and by other overhead (like threads)  (This was discussed and approved in API Review )\nThe ClassValue implementation is faster than the fallback version  particularly in the unlikely case in which users call getChecked() with many different kinds of exception types \n\nFinally  take the opportunity to start on splitting up Futures java and FuturesTest java:    com/google/guava/issues/2091\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97961145\n  
2500,     Stop stripping lowasser s username \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97814212\n  
2501,     Run the tests from the class instead of those from some other class \n\nI seem to recall some weirdness around adding suites to themselves -- like  the tests were getting run even without the self-add call except in some unusual case like when you requested a run of a specific class with --test_arg/--test_filter? I forget  Anyway  I came across this while trying to run the tests under Android  which apparently we don t do \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97801167\n  
2502,     Automated g4 rollback of changelist 97776570 \n\n*** Reason for rollback ***\n\nBroke tests \n\n*** Original change description ***\n\nEagerly check for an appropriate exceptionClass constructor during calls to Futures getChecked \nThis way  callers that pass a bad exceptionClass find out unconditionally instead of only when their Future fails \n\nWe hope for bad exceptionClass parameters to soon be caught at compile time: [ \nAPI Review:    google com/document/d/1hUeO_1OJY_xIAHN089p5d9as1uX4M62MBlbkiLyiJbk/edit\n\nTo keep performance acceptable  cache a set of classes with appropriate constructors \nUse Clas   \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97787294\n  
2503,     Eagerly check for an appropriate exceptionClass constructor during calls to Futures getChecked \nThis way  callers that pass a bad exceptionClass find out unconditionally instead of only when their Future fails \n\nWe hope for bad exceptionClass parameters to soon be caught at compile time: [ \nAPI Review:    google com/document/d/1hUeO_1OJY_xIAHN089p5d9as1uX4M62MBlbkiLyiJbk/edit\n\nTo keep performance acceptable  cache a set of classes with appropriate constructors \nUse ClassValue  which was introduced in JDK7 \nDo the compatibility dance  including making Animal Sniffer happy by annotating the class that uses ClassValue \nThat requires updating Animal Sniffer to a version that respects the annotation in more places  perhaps related to    codehaus org/browse/MANIMALSNIFFER-29\nI ve also updated the Animal Sniffer signatures on the theory that newer is probably better  although there is no apparent no impact on Guava \n\nThe cost of the eager check is performance in the success case: What used to take ~1 6ns will now take ~3 2ns  This is likely to be swamped by the actual work being done and by other overhead (like threads)  (This was discussed and approved in API Review )\nThe ClassValue implementation is faster than the fallback version  particularly in the unlikely case in which users call getChecked() with many different kinds of exception types \n\n[  run --run_under=perflab javatests/com/google/common/util/concurrent:FuturesGetCheckedBenchmark -- -i runtime -DexceptionType=CHECKED -DotherEntriesInDataStructure=0 12 -Dvalidator=NON_CACHING_WITHOUT_CONSTRUCTOR_CHECK CLASS_VALUE WEAK_SET\n   [  com/runs/1b73aa59-83d1-429d-9ff4-e40cd8f4637a#r:scenario benchmarkSpec parameters otherEntriesInDataStructure scenario benchmarkSpec parameters validator&c:scenario benchmarkSpec parameters result\n\nFinally  take the opportunity to start on splitting up Futures java and FuturesTest java:    com/google/guava/issues/2091\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97776570\n  
2504,     Add static factory methods to CharMatcher equivalent to the existing constants \n\nAlso do some significant reorganization  primarily extracting anonymous CharMatcher implementations to named nested classes and grouping them together at the bottom of the file  This makes it easier to look through the various methods in CharMatcher without being swamped by implementation details of individual matchers  It s also needed for the constant implementations to create a place to put a static final INSTANCE field (which will allow the implementations to be effetively constants  but also lazily loaded  once we remove the constant fields \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97727559\n  
2505,     Added missing @throws tag to ConcurrentHashMultiset removeExactly \n\nPull request from Alberto Goffi <alberto goffi@usi ch>:\n   com/google/guava/pull/2099\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97701970\n  
2506,     Use j2objc-annotations instead of local annotations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97671363\n  
2507,     Test Collection clear() to ensure that iteration and size() are consistent with isEmpty() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97347352\n  
2508,     Check that size and iteration are consistent with isEmpty after map clear()   BiMapTestSuiteBuilder failed to catch an error of this type in HashBiMap  though other tests fortunately caught it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97345369\n  
2509,     Explain the relationship with java util Optional  in some detail \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97336621\n  
2510,     Use key insertion order in HashBiMap \n\nThis bumps memory consumption back up to equal a pair of HashMaps; the shared entries in both directions are just enough to pay for the linked list   On the other hand  we re not actually allocating any additional objects  so this shouldn t be a significant loss for Android \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97273863\n  
2511,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97263526\n  
2512,     Suppress FuturesGetCheckedIllegalExceptionType  a forthcoming Error Prone error \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97236165\n  
2513,     @GoogleInternal a helper method that s only used by an @GoogleInternal test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97235390\n  
2514,     Call out MinMaxPriorityQueue failure mode \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=97167980\n  
2515,     Add Apple Passbook media type\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96881592\n  
2516,     Adds (unused) method to Utf8Test as part of internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96817586\n  
2517,     Group annotation dependencies at the top \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96795721\n  
2518,     Resolves reference cycles in com google common collect for J2ObjC translation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96793584\n  
2519,     Minor changes to Utf8 as part of internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96788388\n  
2520,     Recognize that the reason for an early completion might be cancellation rather than exception \nThis fixes the bug  com google common util concurrent AbstractFuture$Cancellation cannot be cast to com google common util concurrent AbstractFuture$Failure \n\nTODO(cpovirk): Write basher tests at some point \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96784416\n  
2521,     Remove usage of Truth from Guava Testlib \n\nThere s a circular dependency issue  This also removes some trailing whitespace \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96639131\n  
2522,     Sort imports \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96604490\n  
2523,     Test EmptyContiguousSet equals() more heavily  specifically with an argument that s a RegularContiguousSet \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96599243\n  
2524,     Replace a couple usages of Iterators emptyIterator() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96356488\n  
2525,     Add ImmutableMap Builder orderEntriesByValue \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96353128\n  
2526,     Use static import for Character char constants \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96348182\n  
2527,     Make some more helper methods static  as suggested \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96347171\n  
2528,     Remove references to SourceCodeEscapers from javadoc \n\nIt s still internal-only \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96345180\n  
2529,     Permits common/ io reflect testing  packages to be transpiled by j2objc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96324276\n  
2530,     Minor readability and coverage improvements to Utf8Test:\n- static import of Character constants\n- more thorough testing of invalid strings\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96321934\n  
2531,     Mark GcFinalization as @J2ObjCIncompatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96311707\n  
2532,     Avoid use of raw types \n\nJDT s rules for raw types do not match javac s  so it issues a compile error \nFixes    com/google/guava/issues/2082\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96216812\n  
2533,     Update  travis yml encrypted username/password for oss sonatype org to use encrypted form of access token  which can be revoked \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96120709\n  
2534,     Fix a lock ordering deadlock in CustomScheduler reported in    com/google/guava/issues/2072\n\nThe issue is that CustomScheduler uses a lock to atomically reschedule after each iteration  unfortunately this lock has inconsistent ordering with respect to the lock used by AbstractService   In particular for a RUNNING service the following can ocurr\n\nT1:\nservice stopAsync()\n  -> AbstractService stopAsync() [ ACQUIRE AbstractService monitor \n     -> AbstractService doStop()\n        -> CustomScheduler cancel() [ ACQUIRE CustomScheduler lock \n\nT2:\nCustomScheduler reschedule() [ ACQUIRE CustomScheduler lock \n   (getNextSchedule throws an exception)\n  -> AbstractService notifyFailed [ACQUIRE AbstractService monitor \n\nBoom deadlock!\n\nIt looks like i introduced this deadlock in    com/google/guava/commit/2c0727049d7e7cbbe1febf5bcf6b7a4b1860dea5 though it is possible it wasn t an issue at the time since the AbstractService implementation was different\n\nThe fix was to simply move the call to notifyFailed outside the lock \n\nI have similar concerns about the other lock in this class  but i believe it actually is safe (though we should probably remove it anyway  as per an ancient TODO)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96113737\n  
2535,     Automatically release snapshots to Maven and Javadoc/JDiff to gh-pages on push \n\n- Based off of the Dagger config\n- The Javadoc/JDiff updates are handled by    com/google/guava/blob/gh-pages/updaterelease sh\n- Encrypted env variables have already been added for google/guava\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96064069\n  
2536,     Override isHashCodeFast() to return true for a couple ImmutableSet implementations for which    well  hashCode() is fast \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96044185\n  
2537,     Google Collections -> Guava\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96022158\n  
2538,     && -> &\nI have no benchmarks  but I d argue that  based on our past benchmarks of similar situations  this should be our default move \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=96014749\n  
2539,     Fix  @code  and  @link  in com google common that are either missing the @ completely or put it before the brace \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95921937\n  
2540,     Scaretext for everyone!\nFollowup to CL 95568320 and CL 95480161 \n\nAlso  tweak and reformat some other docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95914301\n  
2541,     Ignore CacheLoadingTest testExpandDuringRefresh in open-source \n\nIt s extremely flaky  particularly when run in Travis CI  It s pretty much guaranteed to fail in at least one of the 3 different build runs we do there \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95839819\n  
2542,     Update README md to point to new GitHub Javadoc locations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95839673\n  
2543,     Change the order of timeoutFuture setException() and delegate cancel()  which no one seems to depend on anymore \nThis allows us to rely on done() for almost all cleanup \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95839519\n  
2544,     Add missing @since 19 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95790743\n  
2545,     Change link to OrderingExplained to GitHub location \n\nIt got reverted to the Google Code location by the doc change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95780221\n  
2546,     Re-add create() methods with an int expectedInsertions parameter \n\nThese methods should probably live on indefinitely for binary compatibility \n\nAlso add @since 19 0 to the versions with a long parameter  since they re technically newly added methods  and add a paragraph from the 3-param version that was missing to the 2-param version \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95741164\n  
2547,     Add a warning about deadlocks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95636626\n  
2548,     Move cancellation propagation from cancel() to done() \n\nAdvantages:\n- We are no longer a blocker to making AbstractFuture cancel() final  Realistically  that will never happen  but maybe we can make FluentFuture cancel() final when it comes along?\n- cancel() is not the only way to cancel: setFuture(cancelledFuture) also works  bypassing any propagation logic defined in cancel()  This is probably fine in practice: Once setFuture() is called  there\ s generally no need for additional propagation logic  Still  it feels cleaner to me \n- The  read to local  then cancel  then use local  dance is error-prone (<[ Extracting a method happens to simplify things \n\nDisadvantages:\n- The method has to be defined in both copies of AbstractFuture (GWT and non-GWT)  We could work around this by introducing a superclass or by making it static \n\nRelated:    com/google/guava/issues/1905\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95634367\n  
2549,     Javadoc generation fixes\n\nDisable timestamp comments in generated files and restrict the use of our custom javadoc stylesheet to builds under JDK7    using that stylesheet with JDK8 generated files produces bad results \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95584269\n  
2550,     Fix a race:\nIf one input fails at nearly the same time and with the same exception as the *first* failure  we sometimes log the exception  even though it s already propagated into the output \nThe problem is that the first failure lets subsequent failures proceed before it registers itself in seenExceptions \nIt does register itself with setException()  but we don t have full atomicity because we have two sources of truth \n(This is why we have a problem only when the first failure is involved: Other failures atomically manipulate seenExceptions )\nThe solution is for whichever caller initializes seenExceptions to propagate it with the value from setException() \nThis is a little messy but hopefully not too bad \n(It comes with a small bonus: It happens to avoid allocating seenExceptions entirely if there is only one failure )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95568611\n  
2551,     directExecutor() scaretext  take 152 \n\nThis revision consists mostly of being less specific about the circumstances in which bad things happen and more specific about the effects of the bad things \n\nIf we like this  we can decide whether it belongs here or on directExecutor() itself  and we can link to it from Futures transform  etc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95568320\n  
2552,     Try to teach users how to understand complex chained Ordering statements \n\n   com/google/guava/issues/1342\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95475801\n  
2553,     Random collect javadoc improvements  including replicating the pseudo-deprecation information found on Lists newArrayList for Sets newHashSet \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95474959\n  
2554,     Miscellaneous minor doc fixes \n\nincluding:\n   com/google/guava/issues/1725\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95466089\n  
2555,     Rewrite the AbstractFuture Javadoc \nLink to Futures from ListenableFuture \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95464400\n  
2556,     Inline doRun()  which is no longer needed after the combine() rewrite \nMake done() final \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95461156\n  
2557,     Change Guava wiki links to new GitHub locations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95452934\n  
2558,     Add test for the complicated example in Guava issue #1342 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95442782\n  
2559,     Put |final| on a couple methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95325599\n  
2560,     Remove the test code from TypesTest that tries to ensure that Types newTypeVariable functions correctly in the presence of a SecurityManager \n\nIt isn t really possible to test this fully given that the security-sensitive operation happens in a static initializer \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95325181\n  
2561,     Aggressively null out references when invoking the transformation/fallback \n\nThis probably won t matter for the Function overloads  (But in theory the GC could recognize that the remaining references in local variables are unused  And we could null those out if we want  too )\nIt is more likely to help with the AsyncFunction overloads  There we are more likely to let inputFuture (and possibly a chain of its own dependencies) be GCed long before the derived future completes  since the whole doTransform/doFallback stack frame is often destroyed before the setFuture call bears fruit \n\nOne other advantage: If we screw up and try to access the fields instead of the local variables  we get an error always instead of only in rare cases \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95137240\n  
2562,     Rename AbstractCatchingFuture running to  inputFuture  \nThis matches AbstractChainingFuture \nThe  running  name was more appropriate in the days that it used to sometimes contain the fallback future \nThat was necessary for cancellation at the time  but now that\ s handled by our use of setFuture() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95134862\n  
2563,     Strip testNewTypeVariable from Guava \nIt really needs to run in its own VM  and this doesn t seem worth the trouble to set up in Maven \nWe ll continue to run it internally while we decide whether it s worth keeping \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95121754\n  
2564,     Grammar correction in RateLimiter javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95117476\n  
2565,     De-@Beta Stopwatch \n\nSee    com/google/guava/issues/1312 (we were holding off on the\nde-@Beta ing because we wanted to remove the public constructors) \n\nThe only other API change we might want to make is to add toString(TimeUnit)\n(   com/google/guava/issues/2007) but that shouldn t stop us from\nde-@Beta ing it now  right?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=95031929\n  
2566,     Dereference the future stored in the local  not the future stored in the field \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94956002\n  
2567,     Some enhancements for Futures transform and Futures catching\n * extract a template method and 2 subclasses from CatchingFuture and ChainingListenableFuture   This will allow us to eliminate asAsyncFunction() and 2 allocations per transform\n * make CatchingFuture implement Runnable and save a Runnable allocation\n * have CatchingFuture/ChainingListenableFuture clear all their fields on cancel  which should prevent pinning the transformers\n * have rejectionPropagatingRunnable short circuit for directExecutor() which should save 2 allocations for users who prefer to pass directExecutor() explicitly\n * have Futures catching use the rejected execution exception logic when it makes sense\n\n   com/google/guava/issues/1995\n   com/google/guava/issues/2013\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94954378\n  
2568,     Deprecate ComparisonChain#compare(Boolean  Boolean) \n\nSee    com/google/guava/pull/2062\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94949611\n  
2569,     Replicate CL 94485597 s uniqueIndex doc changes to FluentIterable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94930940\n  
2570,     Static import all Feature values (except sizes) when no names in the file are ambiguous \n(Ambiguous names are cases like  SUPPORTS_REMOVE   a name used by both IteratorFeature and CollectionFeature )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94787622\n  
2571,     Add ConcurrentNavigableMapTestSuiteBuilder  which also applies the ConcurrentMap testers to the sub-map views \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94786659\n  
2572,     Add testers for ConcurrentMap replace(K  V  V) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94784595\n  
2573,     Fix a bug where NavigableMapTestSuiteBuilder was not using NavigableMapTestSuiteBuilder on the descending map tests  due to an oversight discussed in [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94779653\n  
2574,     Use ConcurrentMapTestSuiteBuilder to test CacheBuilder and its flavors\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94773095\n  
2575,     Add a tester for ConcurrentMap replace(K  V) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94772513\n  
2576,     Eliminate TestConcurrentMapGenerator  which isn t really buying us anything \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94766887\n  
2577,     Revert hack introduced in [ \n\nError Prone now has its own copy of @GoogleInternal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94720637\n  
2578,     Add a tester for ConcurrentMap remove(key  value) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94711404\n  
2579,     Start ConcurrentMapTestSuiteBuilder  adding a tester for putIfAbsent \n\nBegins work on    com/google/guava/issues/149 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94704830\n  
2580,     In TypesTest  change the check for correct functioning in the presence of a SecurityManager  Previously we had a SecurityManager that refused Method setAccessible except in a few well-known places  the intent being that one of the places it would refuse would be the use in Types TypeVariableInvocationHandler that we wanted to test  But that proved to be fragile  Instead  we explicitly refuse that place  and we check that the refusal happened  This builds more knowledge of the implementation into the test  but should be more robust \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94699561\n  
2581,     Make Stopwatch s constructors package private \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94623624\n  
2582,     Reformat collect [A-I * with google-java-format \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94617505\n  
2583,     google-java-format com google common hash\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94607659\n  
2584,     Automated g4 rollback of changelist 94598995 \n\n*** Original change description ***\n\nAnnotate com google common base Converter reverse field with @LazyInit \nIt\ s safe to lazy init  reverse  field since the object it\ s pointing to is immutable \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94606878\n  
2585,     Reformat common primitives with google-java-format \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94602682\n  
2586,     Reformat common base with google-java-format  to 100 columns  A few changes by hand as discussed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94602205\n  
2587,     Annotate com google common base Converter reverse field with @LazyInit \nIt\ s safe to lazy init  reverse  field since the object it\ s pointing to is immutable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94598995\n  
2588,     Rollforward [  with the missing dep added \n\n*** Original change description ***\n\nAnnotate MediaType toString with @LazyInit and remove volatile (which is\nunnecessary) \n\nMinor followup to [ \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94594440\n  
2589,     Automated g4 rollback of changelist 94571347 \n\n*** Original change description ***\n\nAnnotate MediaType toString with @LazyInit and remove volatile (which is\nunnecessary) \n\nMinor followup to [ \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94574051\n  
2590,     Annotate MediaType toString with @LazyInit and remove volatile (which is\nunnecessary) \n\nMinor followup to [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94571347\n  
2591,     Annotate lazily iniatialized fields of immutable collections with @LazyInit\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94498610\n  
2592,     Deprecate Sets newSetFromMap() \n\nSee    com/google/guava/issues/1001\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94497455\n  
2593,     Suggest Multimaps index from Maps index -- both in its Javadoc and in its failure messages \nRewrite the Javadoc more generally \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94485597\n  
2594,     Add special-file doc to isEmpty() \nThis is similar to what we already have on size/sizeIfKnown/length/lengthIfKnown \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94299611\n  
2595,     Enable tests that are newly runnable under GWT:\n\n- some immediateFailedFuture tests  which we missed when making immediateFailedFuture work under GWT \n- some tests that uses TestLogHandler now that TestLogHandler works under GWT \n\nAlso  rename a logger variable to reflect the recent CombinedFuture->AggregateFuture rename \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94197944\n  
2596,     Make TestLogHandler GWT-compatible \n\nGWT doesn t have synchronizedList  so I switched to |synchronized|  The small performance difference shouldn t matter much \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94193122\n  
2597,     Use Arrays deepToString() to print arrays in MoreObjects toStringHelper() \n\nSee    com/google/guava/issues/1125\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94118840\n  
2598,     Special case Futures immediateFuture(null) to return a static constant since all null immediateFutures are indistinguishable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94118271\n  
2599,     Update travis-ci for new container based infrastructure and maven caching \n\nPull Request:    com/google/guava/pull/2043\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94116813\n  
2600,     Simplify CharStreams skipFully \n\nSkip is documented as blocking until characters are available  so zero should only be returned if EOF \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94099984\n  
2601,     Add usage example to MMPQ s class docs \n\nSee    com/google/guava/issues/1678\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94030468\n  
2602,     Use lazy init (single-check idiom) for MediaType toString() \n\nSee    com/google/guava/issues/1486\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94028416\n  
2603,     Add size-related methods to Byte/CharSource:\n\n- ByteSource: Optional<Long> sizeIfKnown()\n- CharSource: Optional<Long> lengthIfKnown()\n- CharSource: long length() throws IOException\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94027330\n  
2604,     Complete the migration of static analysis annotations to Error Prone\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=94023780\n  
2605,     GWTifies a few more concurrency related things to support delayed execution and futures with timeout \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93930624\n  
2606,     Deprecate MapConstraint and MapConstraints \n\nWe removed Constraint + Constraints back in Guava 16  so these should ultimately go as well \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93750347\n  
2607,     Update public suffix list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93726186\n  
2608,     Add a comment to AbstractStreamingHasher explaining why putString(CharSequence  Charset) is not overridden \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93648231\n  
2609,     Adding javadoc to com google common collect testing Helpers testComparator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93470413\n  
2610,     Add specialized slice support to ByteArrayByteSource \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93334857\n  
2611,     Properly use the expected-size factory methods in MultimapBuilder  instead of conflating capacity with expected size \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93322785\n  
2612,     GWT-related shuffling from internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93144921\n  
2613,     Don t rely on MessageDigest isEqual() for constant-time evaluation in HashCode \n\nAdd benchmarks for the various array equality impls \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=93134222\n  
2614,     Remove some unnecessary checkNotNulls from BaseEncoding \n\n(One instance was reported here    com/google/guava/pull/2045)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92938049\n  
2615,     Finally publish Lists cartesianList to Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92936363\n  
2616,     Give people who have never used UnmodifiableIterator before a hint \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92927557\n  
2617,     Specify constant-time behavior for HashCode equals() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92925537\n  
2618,     Fix typo in Floats max() javadocs \n\nReported here    com/google/guava/pull/2044\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92574147\n  
2619,     Fix LongMath checkedPow to correctly error out on large negative inputs  and fix LongMathTest to test a full range of long inputs   See    com/google/guava/issues/2036  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92571001\n  
2620,     Use getBytesInternal in HashCode  hashCode  toString  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92395681\n  
2621,     Fixed typo in comment \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92388286\n  
2622,     Add RangeSet asDescendingSetOfRanges() and RangeMap asDescendingMapOfRanges() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92378397\n  
2623,     Suppress log output from tests in guava-testlib by redirecting it to files \n\nWe made this same change a while back for guava-tests ([  guava-testlib s tests also have some log output we d rather not see \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92277616\n  
2624,     Minor changes from internal addition \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=92186970\n  
2625,     Migrate users calling new LinkedHashMap(int) to\nMaps newLinkedHashMapWithExpectedSize when it appears that that is what they\nactually want \n\nnew LinkedHashMap(int) sets the size of the internal hashtable to the given\nsize  but usually callers really just want a hash table that is large enough\nfor a given number of elements   newLinkedHashMapWithExpectedSize does exactly\nthat \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91990827\n  
2626,     Remove duplicate Stopwatch tests \n\nSee    com/google/guava/issues/2039\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91890774\n  
2627,     Fix a few warnings in ThrowablesTest\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91884994\n  
2628,     Add Maps newLinkedHashMapWithExpectedSize\n\nRerolling the dice\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91788123\n  
2629,     Make Optional absent() hashCode() different from Optional of(0) hashCode()\n\nFixes    com/google/guava/issues/2037\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91595440\n  
2630,     Fix typo - Trutested is tru and tested  but not a word \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91420403\n  
2631,     Remove unneeded and unavailable inherits from testModule gwt xml files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91328781\n  
2632,     Refactored Scanner onJarEntry() and onResourceFile() to scanJarFile() and scanDirectory() \n\nAdvantages discussed sofar:\n\n1  scanJarFile(JarFile) and scanDirectory(File) leaves no room for ambiguity  Questions like  are manifest files  directory resources filtered out?  won\ t be asked because it\ s up to subclasses \n\n2  scanDirectory() can potentially be more efficient when searching for a particular package for example  You wouldn\ t even need to recurse into c/g/common if you are only interested in c/g/foo \n\n3  scanJarFile() can use JarFile entries() and loop over  It\ s an existing API that we don\ t need to provide an alternative way to traverse through Jar file entries \n\n4  scanDirectory() can use either Files fileTreeTraverser() or java nio file Files newDirectoryStream()  So we shouldn\ t expect too much boilerplate duplication \n\n5  If a client doesn\ t like to silently ignore unreadable sub directory  it doesn\ t have to \n\nDisadvantages include inconvenience for the subclass compared to implementing the bare-bone onJarEntry() and onResourceFile() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91324193\n  
2633,     Add @CheckReturnValue to MultimapBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91101255\n  
2634,     Two minor changes to the new Scanner support\n* Pass the JarFile to onJarEntry  this way we can read the jar entry without having to open the Jar a second time\n* add  throws IOException  to the callback methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91020019\n  
2635,     Add a method that tells how many permits are stored and can be used without blocking future tryAcquire calls \n\nSuccessfully acquiring permits when the rate is set to near zero causes all subsequent tryAcquire calls to fail even after setting the rate really really high  For our use-case we don t want to ever incur this penalty and would instead want to only acquire if we ve stored up enough \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=91004719\n  
2636,     Fixed a line-wrapping I missed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90934632\n  
2637,     Fix ClassPath by exposing Scanner for internal clients to customize \n\nThis change slows down CodeInspectionTest  But it exposes Scanner for it to extend and memorize the urls \n\nBasically  the test should create its own ClassInfo class (name + url) \n\nAnd subclass ClassPath Scanner as:\n\nclass MemorizingScanner extends ClassPath Scanner  \n\n  private final ListMultimap<String  ClassInfo> classes =    ;\n\n  @Override void onResourceFile(ClassLoader loader  String packagePath  File file)  \n    if (file getName() endsWith(  class ))  \n      classUrls put(packagePath + file getName()  new ClassInfo(resourceName  url));\n     \n   \n  //  same for jar entry\n \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90897375\n  
2638,     Just cleaning up old @since tags \n\nI finally couldn\ t stand seeing this stupid phrase  imported from Google Collections Library \nall over the place  It\ s long since irrelevant information now that there have been 17 Guava\nreleases since then \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90732444\n  
2639,     Update public suffix patterns \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90558429\n  
2640,     Pull out a subclass of ImmutableSet for indexed implementations  which are common enough that it saves code overall \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90549526\n  
2641,     Remove all of common cache from @Beta \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90542356\n  
2642,     Make CacheLoader UnsupportedLoadingOperationException and RemovalNotification s constructor public \n\nBoth may be needed for custom Cache implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90540168\n  
2643,     Address    com/google/guava/issues/2008 by discarding references to iterators in Iterators concat after they have been iterated over \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90525172\n  
2644,     Update AsyncFunction javadoc to point to a non-deprecated method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90438335\n  
2645,     Delete redundant performance overloads from SingletonImmutableList \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90196002\n  
2646,     Add RandomAccess implementations for Lists  equals indexOf lastIndexOf Impl  to eliminate allocation of the iterator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90193421\n  
2647,     Trim overrides from SingletonImmutableSet that are just for tiny performance wins \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90191174\n  
2648,     Fix minor bug in setValue method of HashBiMap inverse() entrySet() entries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90104250\n  
2649,     Minor simplifications to HashBiMap using the  key value OrNull utilities from Maps \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90100234\n  
2650,     Reuse the passed-in entry array in RegularImmutableMap and RegularImmutableBiMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=90082508\n  
2651,     Minor tweak: ImmutableList subList can return the original list instead of a view if the range is the whole list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89893003\n  
2652,     Fold RegularImmutableSortedMap into ImmutableSortedMap  since that is now the only implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89888434\n  
2653,     Fold EmptyImmutableSortedMultiset into RegularImmutableSortedMultiset \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89740927\n  
2654,     Fold EmptyImmutableSortedMap into RegularImmutableSortedMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89737176\n  
2655,     Demonstrate a race that can result in excessive logging \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89722067\n  
2656,     Woops - seenExceptions should only be released when the future is done  not on failure!\n\nUnfortunately  difficult to write a test because it requires 2 failed futures to complete at almost the exact\nsame time  with the first future setting seenExceptions=null immediately after the other future does a compareAndSet\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89721761\n  
2657,     Tiny simplification in CharMatcher to define indexIn(CharSequence) as indexIn(CharSequence  0) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89718886\n  
2658,     Eliminate EmptyImmutableSortedSet  while we re at it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89712042\n  
2659,     Remove replaceFrom overrides from CharMatcher NONE \n\nThe default implementation short-circuits if indexIn == -1  which is always the case \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89711093\n  
2660,     Reduce memory consumption of ImmutableSortedMultiset by eliminating the count array \n\nIt can be inferred indirectly from the cumulative sums of the counts \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89710934\n  
2661,     Tiny simplification to CharMatcher \n\nmatchesNoneOf is already defined in terms of indexIn; ANY and NONE don t need to override it for performance  since they already optimize indexIn \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89709447\n  
2662,     Delete EmptyImmutableBiMap  instead using a RegularImmutableBiMap with null hash tables \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89629248\n  
2663,     Eliminate EmptyImmutableSet  replacing it with a RegularImmutableSet with a null hash table \n\nRelated:    com/google/guava/issues/1268\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89625833\n  
2664,     Don t execute AsyncFunction in ChainingListenableFuture if the future has been canceled \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89613683\n  
2665,     Remove the version of getChecked() with the old parameter ordering \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89606673\n  
2666,     Add @CheckReturnValue to many APIs in c g common util concurrent Futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89553140\n  
2667,     Microoptimization: presize builder when deserializing ImmutableMap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89527038\n  
2668,     Add @CheckReturnValue to filter*() methods in Collections2  Iterables  Maps  and Multimaps \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89522301\n  
2669,     Deprecate the version of getChecked() with the old parameter ordering \n\nThis is to discourage backsliding while I test the CL to remove the method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89508952\n  
2670,     Add @CheckReturnValue to all methods in FluentIterable (except copyInto(Collection)) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89461679\n  
2671,     Round 3 of the immutable collections classdocs rewrite \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89434768\n  
2672,     Add a new overload of getChecked() with a different parameter order \n\nWe will migrate callers to the new version \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89434462\n  
2673,     Alternative way to get AssertionError instance in com google common util concurrent GeneratedMonitorTest  since public AssertionError(String message  Throwable cause) does not exist in Java 6 yet \n\nPull request from Pingsan:    com/google/guava/pull/2012\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89416149\n  
2674,     Wrap the Method setAccessible call in Types TypeVariableInvocationHandler in try/catch so that it is not an error for it to fail \n\nUsually setAccessible won t be necessary: we only added it because of App Engine s unusual execution environment  TypesTest now runs with a SecurityManager so we can detect this and similar problems \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89368532\n  
2675,     Simplify the ImmutableMapEntry shared code by making the base ImmutableMapEntry class terminal and sharing the subclasses for non-terminal nodes in the hash table \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89319446\n  
2676,     Prevent rare disastrous classloading in first call to LockSupport park \nSee:    openjdk java net/browse/JDK-8074773\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89317155\n  
2677,     Eliminate boxing in RegularImmutableMultiset by inlining the hash table implementation \n\nThis is primarily intended as an optimization for Android s sake  but is expected to have net performance benefit in all environments  just at the expense of code complexity \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89315361\n  
2678,     Round 2 in the great ImmutableCollection javadoc rewrite  Try to make it a little tighter  and widen the circle to a few more classes \n\nI m still trying to avoid getting into rewriting any *method* javadocs  though\nI couldn t help tackling a few obvious problems \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89309215\n  
2679,     When a new entry exceeds the segment\ s maxWeight all by itself  don\ t bother evicting anything else  only the new one  Still go through all the motions of actually adding and evicting it; otherwise I fear the code complexity will skyrocket \n\nIn a sense this starts us down a path of trying to make weight-based eviction  smart   and it\ s not clear where that should end up  but I think this seems like a logical special case no matter what \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89308526\n  
2680,     Apply some simplifications and improvements \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89149129\n  
2681,     Use Hashing smearedHash directly in HashBiMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=89066886\n  
2682,     Make implicit narrowing compound assignments explicit \n\nCompound assignments to variables with type byte  char  short  or float hide\ndangerous narrowing conversions  This change makes implicit narrowing\nconversions explicit in preparation for enabling a new compiler error that will\nprevent narrowing compound assignments \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88986348\n  
2683,     Make it explicit that a memoized Supplier s get() method is invoked at most once \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88974060\n  
2684,     Improve the implementation of Multisets ElementSet remove to do only one operation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88968217\n  
2685,     Document that callers of catching() should prefer more specific exception types \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88864139\n  
2686,     Migrate calls of to-be-deprecated Futures get to equivalent Futures getChecked \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88830649\n  
2687,     In com google common reflect Types  make the Method objects that are used as part of Java compatibility accessible \n\nMaking them accessible should not be necessary  since they are being used to access package-private methods from elsewhere in the same package  But having them not accessible trips over an unfixable race condition in App Engine  There  the security layer intercepts reflective operation and ultimately ends up invoking the Method from another package  To make this work it has to do Method setAccessible(true) in a try/finally  But if two threads end up doing this at the same time then one may set the Method back to inaccessible just after the other has set it accessible  Making the Method always accessible avoids this problem  It is not any kind of security problem since the methods in question are harmless and the only reason they are not public is to avoid polluting the API \n\n   artima com/weblogs/viewpost jsp?thread=164042\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88573029\n  
2688,     Add FluentIterable toMultiset() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88522314\n  
2689,     Deprecate get()  which is being replaced by getChecked() \n\nNearly all callers have been migrated  Callers who use guava_jdk5 will be stuck on the deprecated method for now  We ll migrate them when getChecked() becomes available in guava_jdk5 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88468127\n  
2690,     Migrate calls of to-be-deprecated Futures get to equivalent Futures getChecked \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88435725\n  
2691,     Add Futures getChecked  the new name of Futures get \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88397579\n  
2692,     Remove warnings from Futures java \n\nSafeVarargs is an especially painful one  as it ll produce warnings in any users of the methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88345700\n  
2693,     Optimize BaseEncoding by removing GwtWorkarounds and using an implementation without streams\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88332628\n  
2694,     Add tests for current transformAsync/catchingAsync interruption behavior  namely  It doesn\ t do anything  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88255363\n  
2695,     Refactorings in util concurrent so more code can be shared \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88247030\n  
2696,     ImmutableRangeMap is now serializable \nCopy/paste javadoc fixed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88227012\n  
2697,     Collections coming from ImmutableRangeSet asSet() and ImmutableRangeMap asMapOfRanges() can now be correctly serialized \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88224961\n  
2698,     Re-enable compilation of benchmarks in Guava now that caliper 1 0-beta-2 is out \n\nFix some things this turned up:\n\n- Remove a couple benchmarks for APIs that aren t public in Guava \n- Remove LoadingCache benchmarks that compare a LoadingCache to MapMaker makeComputingMap  which is package-private now \n- Fix a usage of diamond operator that snuck in \n- Remove CombinedFuture from Futures  since the methods that use it are internal-only \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88142834\n  
2699,     Move EMPTY to RegularImmutableList \nThis was requested in    com/google/guava/issues/1977 to avoid circular static-init dependencies \nI fear that we have other such problems  We should consider adding a test for them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88131198\n  
2700,     Add the piece of information that I really wanted last time \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=88115213\n  
2701,     Improve failure message from testUrls to help us figure out why it\ s failing on Travis  e g  \n   org/google/guava/jobs/53222839\n testUrls(com google common reflect ClassPathTest): expected:<3> but was:<1> \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87967592\n  
2702,     Remove com google common labs reflect Signature  It has not gained any uses in\nthree years of existence \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87751075\n  
2703,     Remove @Beta from Maps asMap and Maps toMap \n\nUpdate the Javadoc of Maps toMap and FluentIterable toMap to specify that it s unspecified what value you get for a key when it appears multiple times in the iterable and your function isn t well-behaved \n\nCloses Guava issue #1963 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87740790\n  
2704,     *Close* our blocks  now in our moment of triumph?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87644978\n  
2705,     Fix    com/google/guava/issues/1982 by adding some preconditions\n\nThe error behavior isn t really changing  since it would still fail  it is just\nthat now it will fail slightly sooner and the stack trace when it does will\npoint to the users buggy scheduler() method  which i believe is all the bug was\nasking for \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87567830\n  
2706,     Remove APIs scheduled for deletion in March 2015 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87511933\n  
2707,     Add missing @Nullable annotations to Table and BiMap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87297784\n  
2708,     Fix a signaling bug in newDirectExecutorService()  Also switch to implicit\nmonitors to take advantage of biased locking \n\nIf thread A calls awaitTermination while there are no running tasks  then\nThread B calls shutdown()  Thread A will never be woken up \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87280837\n  
2709,     Enable j2objc compilation of common/util/concurrent \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87259269\n  
2710,     Deprecate AsyncFunction transform() and withFallback() \nDeprecate FutureFallback \n\nMore information:\n   google com[ document/d/1FJxzf-e-jez00-_cWqEzdJNnZzhIQ-9ezmHt77gM8_I/edit\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87154647\n  
2711,     Expose Hashing concatenating() in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87106619\n  
2712,     Change exception messages; part of internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87085064\n  
2713,     Migrate calls of to-be-deprecated Futures java APIs to their equivalents:\n- Migrate calls from transform(   AsyncFunction   ) to transformAsync() \n- Migrate calls from withFallback(future  new FutureFallback<V>) to catching(future  Throwable class  new AsyncFunction<Throwable  V>()) (or occasionally a slight variant of that) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87071526\n  
2714,     Shuffling from internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87059596\n  
2715,     Update publix suffix data \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=87012581\n  
2716,     Rewrite javadocs for immutable collections \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86995462\n  
2717,     Sort and remove unused imports \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86993473\n  
2718,     Call file toURI() toURL() outside of the entry iteration loop   It turns out\nthat this sequence may end up stat ing the jar  which can significantly slow\nthings down \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86990876\n  
2719,     Add @CheckReturnValue to Stopwatch\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86977616\n  
2720,     One more @GoogleInternal I missed last time \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86977055\n  
2721,     Add @CheckReturnValue to c g c hash APIs\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86973520\n  
2722,     Remove ClassPathTest tests from Guava for the moment \nThey re failing there \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86968210\n  
2723,     Add @CheckReturnValue to BinaryPredicates and Defaults \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86847333\n  
2724,     Change a while to an if in AbstractFuture   #TIL you can break <label> out of an if \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86842992\n  
2725,     Suppress future Error Prone error for AsyncFunction that returns a _null Future_  rather than the intended _Future whose value is null_ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86830267\n  
2726,     Add @CheckReturnValue to more classes in common base \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86794958\n  
2727,     Add @CheckReturnValue to Predicates \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86794808\n  
2728,     Add @CheckReturnValue to Functions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86791183\n  
2729,     Collect all resource URLs in the ResourceInfo objects \n\nEssentially ResourceInfo url() is analogous to Class getResource() and now\nResourceInfo urls() provides analogous support for Class getResources() with the benefit that it is significantly faster (ClassPath was already calculating these as part of scanning) \n\nThis is yet another attempt at trying to add a way to see alternate resources to classpath \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86761898\n  
2730,     Make Files use transferTo  which can copy files without bringing the bytes into userspace \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86744917\n  
2731,     Migrate calls of to-be-deprecated Futures java APIs to their equivalents:\n\n- Migrate calls from transform(   AsyncFunction   ) to transformAsync() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86703224\n  
2732,     Add @CheckReturnValue to Joiner  Objects  and Splitter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86646027\n  
2733,     Migrate from Truth s deprecated  is(expected) to  isEqualTo(expected) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86642578\n  
2734,     Avoid boxing in newDataOutput s checkArgument invocations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86638527\n  
2735,     Refer to the old names of transformAsync and catchingAsync from their @since tags \n\nWe have done this elsewhere  e g    @since 9 0 (in 1 0 as  @code compose ) \nIt should make migration easier for anyone who skips over the version of Guava in which the old method was deprecated \nIt should also help both internal and external users who go looking for the old name \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86593983\n  
2736,     Rollback of change to immediateFailedFuture and immediateCancelledFuture \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86516778\n  
2737,     Make immediateFailedFuture and immediateCancelledFuture trusted futures \n\n   com/google/guava/issues/1961\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86499614\n  
2738,     Migrate from assertContentsAnyOrder() to Truth \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86498851\n  
2739,     Rollback of BaseEncoding change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86442772\n  
2740,     Optimize BaseEncoding s encode method by using an implementation without streams\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86425194\n  
2741,     Optimize LongMath isPrime \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86298499\n  
2742,     Add @CheckReturnValue to ComparisonChain \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86282152\n  
2743,     Avoid AssertionError(String  Throwable) constructor  which isn t available in version of GWT we use for Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86212236\n  
2744,     Add newCancellationCause() again \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86206373\n  
2745,     Add Futures transformAsync() to replace the AsyncFunction overloads of transform() \nThis will make the methods work better with Java 8 lambdas \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86188098\n  
2746,     Warn about immutability \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86185367\n  
2747,     Add Futures catching  Async  to replace Futures withFallback \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86180055\n  
2748,     - More carefully guard all of loadFuture s functionality inside the try block\n- Prioritize calling setException when exceptions occur\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86118912\n  
2749,     Avoid generating calls to GWT-incompatible setUp or tearDown methods \n\nPrior to this CL  such methods would generate compile errors:\n\n[ERROR  Line 24: The method setUp() from the type TestCase is not visible\n[ERROR  Line 32: The method tearDown() from the type TestCase is not visible\n\n[ \n\nAlso  remove the workaround I added to com google common \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86112432\n  
2750,     Inline the implementation of DoubleMath mean rather than using a helper class  This is called inside loops often enough that I think it s worth avoiding the object assignment  Also improve the javadoc \n\nThis code is basically all copied from Stats meanOf  where it was reviewed  so hopefully it shouldn t be too controversial \n\n(For background  we accidentally --- it was my fault --- ended up with DoubleMath mean and Stats meanOf duplicating the same functionality  One of them needs to go  and it seems clear this one should survive  since it s already in guava and it s not even @Beta  But I want to make sure this one has the improvements from the other )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86081434\n  
2751,     Roll back addition of newCancellationCause \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86068136\n  
2752,     Add Hashing sha384()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86055528\n  
2753,     Add newCancellationCause \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86054805\n  
2754,     Hide setSampleInstances internally \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86015706\n  
2755,     Add @CheckReturnValue to entire Optional class \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=86014536\n  
2756,     Fix several mistakes in how iteration order is documented for ImmutableMultimap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85990417\n  
2757,     Migrate from Truth s deprecated  is(expected) to  isEqualTo(expected) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85986665\n  
2758,     Hide GoogleInternal*EscapersTest files completely  rather than leaving a test with no methods behind for Maven to complain about \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85899334\n  
2759,     Re-remove Google-internal getAllEntries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85767223\n  
2760,     Re-add Google-internal getAllEntries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85742568\n  
2761,     GWTify Futures#withFallback and its tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85631779\n  
2762,     Migrate from deprecated isAssignableFrom to identical isSupertypeOf \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85539357\n  
2763,     Seperate tests for GoogleInternal methods into their own class\n\nSome of the tests in javatests/com/google/common are run not\njust against the java/com/google/common code but also against\nGuava  This is fine as long as the tests do not test any\ncode marked as @GoogleInternal because they break as the\ncode to test does not exist in Guava \n\nThis change breaks up test classes that break when run against\nGuava into separate classes  one for running against internal\nand Guava and one just to run against internal \n\nThis is part of the work to upgrade guava_jdk5 to v17 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85501856\n  
2764,     Add missing removal dates/releases for deprecated APIs \nAdd a horrible test to catch future missing info \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85463445\n  
2765,     Re-add Multisets removeOccurrences(Multiset  Multiset) \n\nThis non-@Beta method was removed in 18 0 and replaced with removeOccurrences(Multiset  Iterable)  We need to have both for backward compatibility \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85456166\n  
2766,     Roll back addition of getAllEntries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85379241\n  
2767,     Add Google-internal getAllEntries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85375065\n  
2768,     Give the removal date for isAssignableFrom \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85333830\n  
2769,     Add isSupertypeOf and isSubtypeOf  deprecating isAssignableFrom \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85327607\n  
2770,     GWTifies Futures#allAsList and friend \nEnables some but not all FuturesTests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85168289\n  
2771,     Stop scrubbing some more usernames (MOE update?) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85156857\n  
2772,     Fix after rollback changelist 84974387 \n\nAdded documentation and test that SerializingExecutor ignores interrupts \nsince javatests/com/google/apps/framework/concurrent/ListenableStreamTest java assumes\nthat should be the case \n\nI am not convinced that this is correct because it effectively disables the normal mechanism for shutting down an executor \n\n*** Original change description ***\n\nAdd some functionality to SerializingExecutor and rework its code \n\nAdd functionality to suspend the execution  Intended primarily for cases where we want to wait\nfor an rpc before continuing execution    \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85137867\n  
2773,     Rollback of: Add @CheckReturnValue to Optional\n\nBreaks lots of tests who aren t using the results of Optionals \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85104606\n  
2774,     Add lazyStackTrace \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85099500\n  
2775,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85089450\n  
2776,     Add @CheckReturnValue to Optional\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85088656\n  
2777,     GWTifies Futures#combine() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85081294\n  
2778,     Add @CheckReturnValue to UnsignedBytes  UnsignedInts  and UnsignedLongs (except for parse methods and methods that throw exceptions that people may reasonably want to catch) \n\nRelated:\n   com/google/guava/issues/1956\n   com/google/guava/issues/1957\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85081061\n  
2779,     Run dereference() tests under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85079832\n  
2780,     Add a few final(?) tests \n\nMost are tests of null handling  since our automated null tests don\ t run under GWT \nI\ ve added checkNotNull() calls where appropriate \n\nOne is to verify that a failing listener doesn\ t interfere with other added listeners \n\nI also added a test of get() with a negative value  as concurrency classes generally permit:\n All methods that accept timeout parameters treat values less than or equal to zero to mean not to wait at all  \n   oracle com/javase/7/docs/api/java/util/concurrent/package-summary html\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85076704\n  
2781,     Add and use helper methods like assertDone() in tests \nThis found no bugs -- well  maybe one if you count the inconsistent propagation of interruption from the delegate  though I had suspected as much already \n\nAdd another  misbehaving listener  test  this one for the case in which the Future is already done \nThis found a bug  which I\ ve fixed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85074586\n  
2782,     Add @CheckReturnValue to c g common primitives \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85074273\n  
2783,     Test no-arg get() on pending Futures  even in a non-GWT setting \nTo prevent from hanging forever  of course  we need to spin up another thread to make the call \nConveniently  we already have the code for this lying around  The main thing I did to it was change it to call getUninterruptibly  since we handling interrupts isn t worth the trouble here \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85072429\n  
2784,     Short-circuit future setFuture(TrustedFuture) in GWT  too \n\nIf anything  I would expect the gains of avoiding  new ExecutionException(   )  to be greater than GWT than in  normal Java  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85071658\n  
2785,     Run many tests for addCallback and transform under GWT \nMake the no-Executor overload of addCallback available under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=85070996\n  
2786,     GWTifies Futures#dereference() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84985065\n  
2787,     Rollback of: Add some functionality to SerializingExecutor and rework its code \n\nAdd functionality to suspend the execution  Intended primarily for cases where we want to wait\nfor an rpc before continuing execution \n\nAdd functionality to prepend a task to the queue  intended primarily for cases where\na continuation of the current task is needed to run immediately afterwards  This\nmay happen if we need to send an rpc and suspend the queue before retrying the current task \n\nUse case: [  there named Ex   \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84974387\n  
2788,     Release withTimeout as @Beta\n\nFixes    com/google/guava/issues/1146\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84900032\n  
2789,     Add BaseEncoding benchmarks for decode and stream methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84860248\n  
2790,     Add some functionality to SerializingExecutor and rework its code \n\nAdd functionality to suspend the execution  Intended primarily for cases where we want to wait\nfor an rpc before continuing execution \n\nAdd functionality to prepend a task to the queue  intended primarily for cases where\na continuation of the current task is needed to run immediately afterwards  This\nmay happen if we need to send an rpc and suspend the queue before retrying the current task \n\nUse case: [  there named ExecutionQueue\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84859082\n  
2791,     Add @CheckReturnValue to CaseFormat  Enums  Equivalence  Joiner  MoreObjects  Strings and Suppliers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84797925\n  
2792,     More doc tweaks based on martinrb@s comments on [  (sorry  submitted too fast!)\n\nAnd  now that I at least have decided that we should just deal with it via a few extra null checks  introduce those null checks in the appropriate places \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84664256\n  
2793,     An update on write visibility \n\nClarify the data race issue in a comment and link to the concurrency-interest thread \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84637827\n  
2794,     Move LabsFutures makeTimeoutFuture to Futures withTimeout in prep for releasing in guava   This changes the signature to avoid joda time Duration and also eliminates the AtomicReferences which i believe are unnecessary \n\nCurrently it not public in guava  pending api review \n\n   com/google/guava/issues/1146\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84575437\n  
2795,     Clarify the error message when an AsyncFunction returns null (*not* a Future that contains null) \nAdd a similar message for FutureFallback \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84565778\n  
2796,     Suppress log output from tests in the console by redirecting it to files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84561967\n  
2797,     Address lint identified by    com/lewisd32/lint-maven-plugin\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84559622\n  
2798,     Fix Travis build (hopefully) by setting max heap in the same <argLine> that sets the user language/country \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84553475\n  
2799,     Annotate AsyncFunction parameter as @Nullable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84545868\n  
2800,     Add documentation of the happens-before guarantees of ListenableFuture addListener \n\nThis is essentially the same documentation that is on Executor execute \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84463792\n  
2801,     Add more info to README md \n\nGuava pull request #1950\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84455104\n  
2802,     Add @CheckReturnValue to Collections2\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84437574\n  
2803,     Add @CheckReturnValue to Ascii \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84437572\n  
2804,     Improve invalid character exceptions from BaseEncoding\n\nFixes    com/google/guava/issues/1947\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84345586\n  
2805,     Simplify a boolean return \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84337684\n  
2806,     Implement wasInterrupted() under GWT  and use that API to verify that cancel+setFuture passes the correct mayInterruptIfRunning value to the delegate \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84154982\n  
2807,     Fail setFuture(null) immediately under GWT (as it already does under plain Java) to avoid going into an inconsistent state \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84154017\n  
2808,     Take advantage of new GWT AbstractFuture tests to enhance overall AbstractFuture testing:\n- Run the tests not just under GWT but also under  normal Java  \n- Run the test as part of our open-source build (which happens mostly  automatically  as part of the above change) \n- Expand the tests to run with a TrustedFuture input and a non-TrustedFuture input  Currently this matters only in non-GWT mode  but I expect that to change in time \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84152832\n  
2809,     Depend on Truth 0 25 \nI m about to introduce some assertThat(throwable) hasMessage(message) calls \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84134145\n  
2810,     GWTifies Futures#transform() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84084635\n  
2811,     Fix typo in InetAddresses  Javadoc \n\nGuava pull request #1943\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84052980\n  
2812,     Add toString to DeadEvent \n\nGuava pull request #1948\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84051921\n  
2813,     Increase heap \n\nWe\ ve been running out of heap since    com/google/guava/commit/651774d3734a0f72dd7bccab9e57bd9579cfff0e yesterday:\n testLargeNumberOfInsertions(com google common hash BloomFilterTest): Java heap space \n   org/google/guava/jobs/47023222\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=84048185\n  
2814,     GWT emulation for some of util concurrent \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83996751\n  
2815,     Fallout from MOE update:\nWe now preserve some more usernames in comments \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83975277\n  
2816,     Clear FallbackFuture running  this used to be the behavior but it was lost when updating this method to use setFuture \n\nThis fixes:    com/google/guava/issues/1937\n\nIn addition to not pinning the input future  i also changed it so that a call to cancel() prior to the input completing  does not trigger a CancellationException in the listener \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83951020\n  
2817,     Fix comment typo in Maps: 0 75 -> 0 75 \n\nThis may have been correct in the original author s locale  but it s at\nodds with the standard Java syntax \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83948565\n  
2818,     Pass a Locale to String format calls \nThen  run Guava tests in locale hi-IN to catch future dependencies on the default locale \nFinally  as a convenience in debugging problems  write Maven logs in UTF-8 rather than ASCII  (This is likely already the case in  normal  Maven runs  but our guava_moe_test target was stuck on ASCII )\n\nThis CL covers all the String format calls in Guava  fixing <   com/google/guava/issues/1567>  There are many other calls in internal com google common code  We may want to consider additional testing and avoidance strategies  e g   a RootLocale format convenience method and an error-prone check for no-Locale calls \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83859950\n  
2819,     adding MediaType for Dart files\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83819730\n  
2820,     Up the buffer size used in copies to the JDK 7 default buffer size \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83625926\n  
2821,     Optimize containsAll and equals for ImmutableEnum* when compared to another ImmutableEnum*\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83622617\n  
2822,     Adds a small clarifying comment to the Javadoc of common cache RemovalListener \n\nMy team was previously assuming that calls to CacheLoader load and RemovalListener onRemoval would always be paired  but we found out this is not the case \n\nIn retrospect  the existing Javadoc already hints at this  but I think it can be made a bit more explicit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83610070\n  
2823,     Standardize that Functions foo() toString() returns  Functions foo()   (I\ ve preserved two existing exceptions: compose(b  a) (which returns  b(a) ) and forMap(map  default) (which returns  Functions forMap(map  defaultValue=default) )  I don\ t know whether that\ s ideal  but it doesn\ t feel worth spending too much time worrying about )\nThis matches what Predicates foo() toString() and Ordering foo() toString() return \n\n(Also  remove some unnecessary toString() calls from Predicates java  Those changes would have been made in CL 58115976 (successor to CL 56242188) except that that change was made concurrently with a CL just like the one you\ re reading but for Predicates (CL 59050444) )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83539256\n  
2824,     setFuture documentation tweaks:\n- Describe cancellation propagation \n- Stop referring to setFuture as though it *always*  sets asynchronously  \n- Small tweak that I\ m not sure actually helps: change  previously been set or cancelled  to  already been set or cancelled   Somehow I feel like this is marginally clearer that it refers to  done at the time of the setFuture call  rather than  done at the time the supplied Future completes   Am I crazy? Maybe I should just say  done at the time the supplied Future completes? \n- Maybe other stuff I\ ve forgotten \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83537510\n  
2825,     Update public-suffix list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83479451\n  
2826,     Add @CheckReturnValue to Strings nullToEmpty()  For more information  see attached bug \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83453191\n  
2827,     Add @CheckReturnValue to Iterables elementsEqual()  For more information  see attached bug \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83453102\n  
2828,     Set default GWT log level to WARN \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83447444\n  
2829,     Add @CheckReturnValue to Collections2 transform()  Iterables transform() and Lists transform() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83443729\n  
2830,     Add @CheckReturnValue to Futures successfulAsList() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83431953\n  
2831,     Add @CheckReturnValue to Lists reverse() \n\nSee    com/google/guava/issues/1931\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83347495\n  
2832,     Add @CheckReturnValue to * filter() methods in c g c collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83340841\n  
2833,     Add @CheckReturnValue to Futures immediate*Future() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83340815\n  
2834,     Shuffling from internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=83280657\n  
2835,     Hide Utf8Benchmark  which has taken on some internal-only code \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82987350\n  
2836,     Create TrustedListenableFutureTask so that our listener executor services can produce futures compatible with the new setFuture optimization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82743827\n  
2837,     Create TrustedFuture (name TBD) a trusted  less abstract  subclass of AbstractFuture that we can use to optimize setFuture and try to use it everywhere in util concurrent \n\nAlso  introduce AbstractFuture done() a template method to aid in clearing state after a future completes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82683934\n  
2838,     Add oraclejdk8 to the build matrix for Guava on Travis CI \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82532082\n  
2839,     Specify source level 1 6 for GWT \n\nThis fixes failures in guava-gwt when building/testing under JDK8 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82526985\n  
2840,     Removed test on url()  It s partially testing ClassLoader  and it sometimes fails \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82525887\n  
2841,     Disable doclint when building under JDK8 \n\nBecause it complains about everything and fails the build \n\nAlso fix something that my IDE was marking as an error: the <overWrite> element from the configuration for the maven-dependency-plugin isn t valid for the unpack-dependencies goal (there s <overWriteIfNewer>  but it s true by default)  so I removed it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82468188\n  
2842,     (1) Don t use a lock for seen exceptions field; should help speed a little (saves space in the non-error state)\n(2) Track not only seen exceptions  but also the causal chain \n\nGood example of unnecessary logging from this is a CancellationException  which is wrapped in another CancellationException on list futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82368457\n  
2843,     Make implicit narrowing compound assignments explicit \n\nCompound assignments to variables with type byte  char  short  or float hide\ndangerous narrowing conversions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82265189\n  
2844,     Add a more efficient implementation of Sets symmetricDifference \n\nBackground: was looking through the Guava code and came upon a TODO \n\nAn even more efficient implementation could involve using a special consuming iterator to first return the items that are in set 1 but not in set 2  and then add the items from set 2 that weren t consumed (because they aren t in set 1); however  that would either modify the original set or have to use more space \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82161404\n  
2845,     Mention splitToList explicitly in the doc comment for Splitter limit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82160580\n  
2846,     Fix typo in Splitter limit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82158244\n  
2847,     Fix example description which is no longer accurate \n\nAlso  adjust sample code  Let s assume activeInLastMonth is a predicate  rather than a call that returns a predicate \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=82153708\n  
2848,     Fix the reference to Utf8#encodedLength \nGratuitous reformatting \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81819384\n  
2849,     In com google common reflect Types  implement the TypeVariable interface using a dynamic proxy rather than an explicit implementation \n\nThis is to work around a compatibility problem introduced by Java 8  See    com/google/guava/issues/1738 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81817139\n  
2850,     Fix a class loading ordering bug on android \n\nApparently in some android versions (and/or testing environments  maybe?) Unsafe getFieldOffset(Field) will trigger initialization (not just loading) of the class that declares the field   This causes an ordering bug where when the Waiter class is initialized ATOMIC_HELPER is null \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81812260\n  
2851,     Fix extendsFromClass() \n\nChecking only the primary upper bound isn t sufficient for purposes like <A extends Foo&Bar> getSuperType(Bar class)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81782225\n  
2852,     Fix some bugs related to calling Preconditions checkNotNull on expressions\nthat are definitely non-null \n\nCreated via a work-in-progress error-prone check for unnecessary null checks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81594383\n  
2853,     Optimize UriParameterMap parse() by making fewer passes when parsing and by checking requiresByteLevelDecoding() more efficiently \n\nThe new code is ~25-42% faster in caliper \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81584621\n  
2854,     Rollforward the previously rolled back AbstractFuture change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81501035\n  
2855,     Do not propagate cancellations to children if it was a result of a child being cancelled\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81457128\n  
2856,     Rollback previous change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81455024\n  
2857,     Increase the guarantees about what happens when you call setFuture with a completed future \n\nPreviously it was possible to have setFuture return true and for the future to not be completed with the future due to a racing cancel \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81446929\n  
2858,     Skip unnecessary presizing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81367572\n  
2859,     Refactored the overloads of isAssignable*() methods to instance methods with simpler signature\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81364016\n  
2860,     use Map<File  ResourceInfo> instead of Map<URI  ResourceInfo> to work around the problem mentioned in    com/google/guava/issues/1899\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81339582\n  
2861,     Rewrite nonCancellationPropagating to take advantage of setFuture\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81244943\n  
2862,     Delete AsyncSettableFuture \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81197333\n  
2863,     Fixed isAssignableFrom() for <? super T> wildcard types  as pointed out by Guava issue 1898 \n\nIn a nutshell  here\ s what we have in the current implementation:\n\nList<? super String> isAssignableFrom(List<Object>) == true // Correct\n<? super CharSequence> isAssignableFrom(String) == false // Wrong!\n<? super String> isAssignableFrom(<Object>) == true // Wrong! Not assignable\n\nTo show why they are wrong  consider the following three code snippets where the first two compile and the third doesn\ t compile:\n\nvoid okay(Receiver<List<? super String>> receiver  List<Object> objects)  \nreceiver accept(objects);\n \n\nvoid okay2(Receiver<? super CharSequence> receiver)  \nreceiver accept( 1 );\n \n\nvoid notOkay(Receiver<? super String> receiver  Object obj)  \nreceiver accept(obj);\n \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81180102\n  
2864,     Steer some consistentHash users to WeightedConsistentHash \nSteer all weightedConsistentHash users to WeightedConsistentHash \n\n(WeightedConsistentHash is internal only at this point )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81155544\n  
2865,     Add benchmark for BaseEncoding \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81099316\n  
2866,     Strip some internal-only GWT modules \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=81083376\n  
2867,     fix potential npe in ChainingListenableFuture cancel\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80832292\n  
2868,     Shuffling from internal-only change  Will be reverted soon \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80831887\n  
2869,     Handle addListener throwing\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80787198\n  
2870,     Shuffling from internal-only change  Will be reverted soon \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80747845\n  
2871,     Two quick followups to take (minor) advantage of the new setFuture implementation\n\nDeleting AsyncSettableFuture should be pretty easy after this\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80658233\n  
2872,     Rewrite AbstractFuture to fix the following issues\n\n1  set setException and cancel are all potentially blocking methods\n2  using AbstractQueuedSynchronizer is overkill for a future\n3  the lack of a setFuture method leads to a lot of repetitive code\n4  abstract future is fat\n5  timed get() calls will always succeed if the future is done when the blocked thread wakes up  even if the deadline has passed \n\nThe approach is to directly implement the interface using Unsafe and LockSupport \n\nExecutionListBenchmark is written to essentially generate as much thread contention as possible    im not sure how useful it is   Also  the more i try to run multithreaded (micro) caliper benchmarks the less confident i am that any of the data is reliable   The main point is that the future is definitely much smaller and also faster in most scenarios \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80505365\n  
2873,     Migrate from Truth s deprecated iteratesAs(   ) to containsExactly(   ) inOrder() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80491240\n  
2874,     Migrate from Truth s deprecated iteratesAs(   ) to containsExactly(   ) inOrder() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80490101\n  
2875,     Remove AUTHORS file \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80416702\n  
2876,     Fix shutdown issue in AbstractScheduledService \n\nThe issue is that if stopAsync() was called after an interation had been\nexecuted (but before it had actually run) then we would fail to unlock\nour lock and then shutdown would hang forever \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80236732\n  
2877,     Remove unnecessary null checks \n\nGuava pull request #1892\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80232609\n  
2878,     Remove references to AsyncLoadingCache from CacheBuilder docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80227076\n  
2879,     Add a constructor to VerifyException to permit a cause to provided alongside a message \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=80128106\n  
2880,     Remove the rethrow on failure behavior from all the threaded service implementations \n\nguava-discuss thread:    google com/d/msg/guava-discuss/k_69XGQFPuk/jqTwIRlyP0wJ\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79991294\n  
2881,     Link to one templating system as an example \nOn issue 1887  I said that we try to steer people to templating systems  but that s kind of a weak claim at present \n\n   com/google/guava/issues/1887\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79954411\n  
2882,     Add AsyncLoadingCache internally \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79901718\n  
2883,     Test that far-future scheduling means  effectively never  rather than overflowing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79870651\n  
2884,     Use TransformedIterator instead of ForwardingIterator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79673799\n  
2885,     [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79611585\n  
2886,     Add CONTRIBUTING md file to tell users how they can contribute and what to expect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79583464\n  
2887,     Remove references to on-demand computation of values \n\nGuava issue #1885\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79582498\n  
2888,     Use features from GWT 2 6 0:\n- Use Class getSimpleName() instead of our custom implementations \n- Mark test that uses StringBuilder appendCodePoint() as working under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79579791\n  
2889,     Remove AsyncSettableFuture isSet\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79569901\n  
2890,     Make GWT logging even quieter for Travis build \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79441097\n  
2891,     Set explicit -Xmx for Guava tests in pom xml \n\nAlso remove attempt to set the heap size in the Travis configuration\nand change it around a little so Javadoc is generated in the install\nstep and not in the testing step \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79437983\n  
2892,     Attempt to increase max heap space for Travis builds  since the new test for BloomFilters with a large number of insertions is currently running out of space \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79372034\n  
2893,     Remove openjdk6 as a platform to build Guava on  It fails due to a weird generics issue \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79358423\n  
2894,     Allow expectedInsertions to be up to Long MAX_VALUE \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79352147\n  
2895,     Make GWT less spammy for Travis CI builds by changing its log level to INFO \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79291520\n  
2896,     Make log level for GWT configurable for Maven builds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79283169\n  
2897,     Add support for Travis CI \n\nGitHub pull request #1877 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79275478\n  
2898,     Replace Google Code URLs with corresponding GitHub URLs \n\nGitHub pull request #1876 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79275279\n  
2899,     Add a  gitattributes file to control line ending normalization  which is otherwise a mess that depends on each git client s settings  (See    github io/git/gitattributes html and    com/2012/03/01/mind-the-end-of-your-line/ for more about that )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79186519\n  
2900,     Remove mvn-deploy sh and jdiff jar  which aren t really needed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79183142\n  
2901,     Fix ByteArrayDataInput javadoc (GitHub pull request #1874) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79122254\n  
2902,     Use Truth for isNotInstanceOf \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79090103\n  
2903,     Make GWT s LocalCache values() not be a Set  since it may contain duplicate values \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=79088720\n  
2904,     Change README to README md and make it reference GitHub locations rather than Google Code \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78948385\n  
2905,     Migrate from Truth s deprecated iteratesAs(   ) to containsExactly(   ) inOrder() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78848834\n  
2906,     Add an IteratorBasedAbstractMap class to simplify map implementations in common collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78776528\n  
2907,     Introduce Multimap convenience methods (k0  v0  etc )  and migrate to them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78763814\n  
2908,     Use Map convenience methods in a few more places \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78763717\n  
2909,     Replace instances of CollectionSubject with IterableSubject (the former has\nbeen deprecated and will be removed soon) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78759479\n  
2910,     Add convenience methods for e0() getKey()  etc   and migrate to them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78756685\n  
2911,     Add convenience methods for samples e0()  etc   and migrate to them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78756024\n  
2912,     Migrate off of deprecated CollectionSubject has() exactly(   ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78755738\n  
2913,     Hide samples e0  etc  behind methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78677562\n  
2914,     Clean up usages of deprecated Truth has() Collection methods:\n-has() item(   ) -> contains(   )\n-has() allOf(   ) -> containsAllOf(   )\n-has() exactly(   ) -> containsExactly(   )\n-has() exactlyAs(   ) -> containsExactlyElementsIn(   )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78667656\n  
2915,     Clean up usages of deprecated Truth has() Collection methods:\n-has() item(   ) -> contains(   )\n-has() allOf(   ) -> containsAllOf(   )\n-has() exactly(   ) -> containsExactly(   )\n-has() exactlyAs(   ) -> containsExactlyElementsIn(   )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78667341\n  
2916,     Clean up usages of deprecated Truth has() Collection methods:\n-has() item(   ) -> contains(   )\n-has() allOf(   ) -> containsAllOf(   )\n-has() exactly(   ) -> containsExactly(   )\n-has() exactlyAs(   ) -> containsExactlyElementsIn(   )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78667251\n  
2917,     Clean up usages of deprecated Truth has() Collection methods:\n-has() item(   ) -> contains(   )\n-has() allOf(   ) -> containsAllOf(   )\n-has() exactly(   ) -> containsExactly(   )\n-has() exactlyAs(   ) -> containsExactlyElementsIn(   )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78666537\n  
2918,     Clean up usages of deprecated Truth has() Collection methods:\n-has() item(   ) -> contains(   )\n-has() allOf(   ) -> containsAllOf(   )\n-has() exactly(   ) -> containsExactly(   )\n-has() exactlyAs(   ) -> containsExactlyElementsIn(   )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78664552\n  
2919,     Add comment to apparently unused line in LongAddables \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78588590\n  
2920,     Migrate off of deprecated Truth methods (created using Refaster)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78472045\n  
2921,     Migrate off of deprecated Truth methods (created using Refaster)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78471461\n  
2922,     Migrate off of deprecated Truth methods (created using Refaster)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78471417\n  
2923,     Migrate off of deprecated Truth methods (created using Refaster)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78470770\n  
2924,     Added Ping-From and Ping-To headers associated with <a ping> \n\nThe spec for <a ping> adds two new HTTP headers that may be sent with\na ping request  See\n   spec whatwg org/multipage/semantics html#hyperlink-auditing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78456250\n  
2925,     Remove the array copy from Fingerprint2011 hashBytes(byte[   int  int) method \n\nConclusion: for hashFunctionWithOffset the improvements are visible in terms of bytes used  but also in terms of execution speed (before: 297 340; after: 173 506)  Interestingly enough  there are small improvements for the hashBytes without offset version (before: 184 860; after: 164 804) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78433787\n  
2926,     Roll-forward of: Change CountingInputStream and CountingOutputStream to require a non-null delegate stream  as reported in   \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78358518\n  
2927,     Rollback of: Change CountingInputStream and CountingOutputStream to require a non-null delegate stream  as reported in Guava issue #1869 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78356364\n  
2928,     Change CountingInputStream and CountingOutputStream to require a non-null delegate stream  as reported in Guava issue #1869 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78355152\n  
2929,     Improve error message \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78174362\n  
2930,     Update public suffix patterns \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78130620\n  
2931,     Update Guava to Truth 0 24\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78118999\n  
2932,     Fix @since documentation tags \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=78101179\n  
2933,     Avoid importing BitSet for Javadoc-only usage \nWe ve gotten reports that this breaks things in GWT:    google com/p/guava-libraries/issues/detail?id=1824\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=77957959\n  
2934,     This CL fixes null annotations in com google common primitives\n\nThe annotations on the tryParse() methods are inconsistent  Many of them don t have @Nullable annotations  This is problematic  because: a) the method can return null; and b) the package itself is annotated with @ParametersAreNonnullByDefault  This causes Eclipse to display dead code warnings when checking the return value from these methods \n\nI ve included the @CheckForNull annotation  since I saw you guys using it already  Technically  this isn t required and @Nullable by itself should be fine  But it doesn t hurt to have both  Also Eclipse doesn t understand @CheckForNull \n\nI also threw in a few @Nullable on equals() methods that were missing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=77896210\n  
2935,     Ensure that using a rate of Double MIN_VALUE (the smallest positive double value) results in an effectively zero rate  It currently seems unlimited \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=77276457\n  
2936,     Small step first: rename and clarify the meaning of ImprovedAbstractMap  now ViewCachingAbstractMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76723220\n  
2937,     Add copyOf(Iterable<Entry>) to ImmutableMap  ImmutableMultimap  and their subtypes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76459632\n  
2938,     Move indexMap to a more logical location \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76448806\n  
2939,     Dedup logic in ImmutableEnumMap that is available elsewhere \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76375623\n  
2940,     In ImmutableMap keySet() iterator()  transform the entrySet iterator rather than transforming its asList view  for the cases where that is not efficient \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76351252\n  
2941,     Inline Maps valueIterator(UnmodifiableIterator<Entry>) into its one call site\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76350780\n  
2942,     Add a common superclass for ImmutableMap implementations that create a custom Iterator to iterate  reducing the total number of nested classes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76350704\n  
2943,     Establish RangeMap iteration order  as per Guava issue 1842 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76272760\n  
2944,     Reuse ImmutableMap EMPTY_ENTRY_ARRAY in other ImmutableMap types\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76267320\n  
2945,     Eliminate varargs-accepting create() method  which was never called with multiple arguments \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76264541\n  
2946,     Return to scrubbing cgdecker s username  which we temporarily stopped doing in 69045357f5b4 \nWe will finally stop scrubbing it again when the standard MOE binary is rebuilt with CL 75843182 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76253324\n  
2947,     Simplify ImmutableMap asMultimap() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76196628\n  
2948,     Dedup conflict checks and get(Object) implementation between RegularImmutableMap and RegularImmutableBiMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76194662\n  
2949,     copyOfEnumMap only gets called with an EnumMap  so narrow its parameter type from Map to EnumMap \n\nThis also makes it clearer that copyOf on an empty EnumMap will succeed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76190743\n  
2950,     TerminalEntry s constructor already calls checkEntryNotNull; no need to do it again \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76188203\n  
2951,     Factor out an array-backed ImmutableMapEntrySet to use in RegularImmutableMap and RegularImmutableBiMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76182964\n  
2952,     Investigate possible deduplication between RegularImmutableMap and RegularImmutableBiMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76176371\n  
2953,     Delete unused SingletonImmutableBiMap(Entry) constructor \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76173755\n  
2954,     One last (?) round of presizing builders where possible in common collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=76105103\n  
2955,     Refactor the three places in common collect that we convert a List<E> to an ImmutableMap<E  Integer> \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75926603\n  
2956,     Refactor ImmutableSortedMap construction paths   The previous implementation did some redundant copying \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75853973\n  
2957,     Presize the ImmutableMap Builder used in ImmutableMultiset construction \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75851783\n  
2958,     Make ImmutableCollection contains abstract  and fix some embarrassing oversights of where it should have been overridden \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75849013\n  
2959,     Add ImmutableBiMap Builder put(Entry) overload  which had previously not been overridden from ImmutableMap Builder   Now  it correctly returns ImmutableBiMap Builder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75833810\n  
2960,     Expand and improve uses of Ordering immutableSortedCopy in common collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75744632\n  
2961,     Don t frontload CharMatcher toString() computation  that s silly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75555670\n  
2962,     Actually  LocalCache getIfPresent _does_ increment the hits counter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75546548\n  
2963,     Fixed a FreshValueGenerator bug that causes failure in generating fresh values recursively when there are finite number of distinct values provided by user \n\nThe fix is to make sure the  freshness  AtomicInteger is only incremented at the end of generating a fresh value for user code  Recursive generation of values for nested types (such as generating the K and V for a Map<K  V>) doesn\ t increment the freshness \n\nThis ensures that for finite set of distinct values  we don\ t ever skip distinct value \n\nAlong the way  the special casing for Optional had to be changed  So I just spent extra effort supporting an @Empty annotation that can be used to generate  empty  value for any arbitrary type \n\nOriginally  I tried to return empty collections  But some existing tests failed because the classes don\ t always like being injected with empty collections or maps (they may have a precondition check to reject empty collection) \n\nSo @Empty is only applied to Optional  Range and ConcurrentMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75542159\n  
2964,     Modify SmoothRateLimiter so that the ratio between maximum-permits-per-second and minimum-permits-per-seconds can be specified -- currently this ratio is hard coded to 3 \n\nThis makes it much more flexible as  ramp up limiter  aka  acceleration limiter  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75381543\n  
2965,     Use presized ImmutableList Builder in ImmutableSortedMap creation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75327745\n  
2966,     Fix @GuardedBy annotations with invalid lock expressions \n\n- fix typos\n- qualified  this  accesses can only be used for enclosing classes: the\ndeclaring class is accessed as  this   enclosing classes are accessed as\n OuterClass this \n- replace annotations being used for general documentation with comments\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75324114\n  
2967,     Fix @GuardedBy annotations with invalid lock expressions \n\n- fix typos\n- qualified  this  accesses can only be used for enclosing classes: the\ndeclaring class is accessed as  this   enclosing classes are accessed as\n OuterClass this \n- replace annotations being used for general documentation with comments\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75302901\n  
2968,     Stop using MapSubject hasKey() and  lacksKey() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=75211614\n  
2969,     use getAvailableCurrencies() under Java 7 to get fresh currency instance\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74986782\n  
2970,     Temporarily avoid scrubbing cgdecker s username \nThis change will be reverted when we stop using my custom-build MOE binary  which already contains CL 75843182 \nLater  it will come back when the standard binary is updated \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74887544\n  
2971,     GWT: Better error checking  logging  and documentation \n- Error checking: I had been trying to enable compilation with -strict (<   github com/Abdennebi/2828230>)  However  while the GWT compiler parameter is  -strict  and the Maven system property is  gwt compiler strict   the Maven parameter is  failOnError:  <   codehaus org/gwt-maven-plugin/compile-mojo html#failOnError>  Additionally  while the compilation goal supports failOnError  the test goal does not: <   codehaus org/gwt-maven-plugin/test-mojo html>  Maven had been ignoring the unrecognized names \n- Logging: Turn up the logLevel to make any future problems easier to diagnose \n- Documentation: Explain the presence of some scary  Ignored 53 units with compilation errors  warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74868684\n  
2972,     Integration of Justin Sampson s fixes to Monitor and addition of extensive tests \n\nJustin is original author of Monitor and heroic volunteer xoogler \n\nThere was significant additional work by myself (martinrb) while preparing this CL \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74829983\n  
2973,     Add of() factories for ImmutableClassToInstanceMap for n=0 1 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74815130\n  
2974,     Fix hash map ordering bug \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74779605\n  
2975,     Temporarily duplicate Ascii truncate() for internal build-system reasons \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74746985\n  
2976,     Strip <resource> lines from  gwt xml  They are not yet supported by a release version of GWT  (Support was added in internal CL 62367280  which imported <   googlesource com/gwt/+/f39e11150ef0ea635a7f7d30154221907775efc6>  I m not sure when our build was changed to generate the new elements )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74705447\n  
2977,     Delayed fallout from build-system changes of CL 74684238  which adds <resource> elements to some  gwt xml files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74686661\n  
2978,     Changes AtomicLongMap#removeAllZeros to use iterator for removals \n\nAlthough ConcurrentHashMap doesn t throw ConcurrentModificaitonException  the GWT emulation in gwt/corp/emul uses HashMap and we are submitting a change that will start making GWT s HashMap to throw ConcurrentModificationException which breaks this code \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74631176\n  
2979,     Fix javadoc typo: wrapTask\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=74092956\n  
2980,     Generalize the javadocs on CacheBuilder ticker()\n\nSee    google com/p/guava-libraries/issues/detail?id=1836\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73901400\n  
2981,     Stop using now-internally-deprecated Truth APIs (which are not yet pushed to open-source Truth)  and leave a todo to migrate to the newer Truth apis once they are released to maven  or after Guava 18 is released and we can rely on snapshots \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73722570\n  
2982,     Update tests to cope with the fact that  google  is now a public suffix  This fixes today\ s test failures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73721981\n  
2983,     Update public suffix patterns\n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73686076\n  
2984,     Stop using isBetween and isInclusivelyInRange in preparation for the (not yet released to open-source) assertThat(4) isIn(Range open(2  5)); etc \nCleanup the stragglers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73545684\n  
2985,     Incorporate Justin Sampson s wording improvement in\n   google com/r/jsampson-guava/source/diff?spec=svn965c15345482203be7f4af3ce2c44488bc0ff9ec&name=jsampson/monitor-fixes&r=965c15345482203be7f4af3ce2c44488bc0ff9ec&format=side&path=/guava/src/com/google/common/util/concurrent/Monitor java\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73540789\n  
2986,     Add more tests for Futures immediateCancelledFuture() to essentially document\nwhy two chained CancellationExceptions are thrown \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73186288\n  
2987,     Rewrite ServiceManager to use MultimapBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73173782\n  
2988,     Add AbstractPackageSanityTests UNDERSCORE_IN_NAME to make it easy to exclude generated classes like AutoValue_Foo from testing  The issue is that these classes typically do not apply @Nullable to the argument of equals(Object)  so that they will work when Nullable is not on the classpath  But NullPointerTester requires @Nullable on this argument because otherwise it will fail when equals(null) follows its contract and does not throw an exception \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73169035\n  
2989,     Update Truth dep to 0 23  (   google com/p/guava-libraries/issues/detail?id=1830)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73072462\n  
2990,     Update Iterators emptyIterator() @deprecated Javadoc to specify the replacement as ImmutableList <T>of() iterator() rather than just ImmutableList of() iterator()  The latter will basically never compile \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=73064832\n  
2991,     Update Javadoc in Futures and other classes to reference directExecutor or newDirectExecutorService rather than sameThreadExecutor  Also change the references to inline execution or an inline executor to use the term  direct  instead \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72669239\n  
2992,     Fix documentation error in DoubleMath \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72665652\n  
2993,     Remove system property control for the default strategy to use for BloomFilters  This was only supposed to work for Guava 17 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72664539\n  
2994,     Update Guava versions to 19 0-SNAPSHOT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72661640\n  
2995,     Major refactoring of EventBus  in preparation for further changes \n\n- Make an Executor a property of all EventBuses  not just AsyncEventBus  A normal EventBus uses a direct Executor by default  Executors are stored per-subscriber \n- Pull out the event dispatch strategy into a Dispatcher class  This handles how events are queued (or not) as they re posted  EventBus and AsyncEventBus each use strategies that should match their old behavior exactly \n- Pull out the subscriber registration code into a SubscriberRegistry class  At the same time  switch back to using a ConcurrentMap<Class<?>  CopyOnWriteArraySet<Subscriber>> to store subscribers in order to allow lightweight  copy-free immutable snapshots of all subscribers to an event \n- Rename EventSubscriber to Subscriber and make some changes to it  Move most code related to actually invoking a subscriber method to it \n- Expose the EventBus s identifier \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72652483\n  
2996,     Fix Maps newHashMapWithExpectedSize for JDK8 \n\nTwo changes to HashMap in JDK8 have affected this test:\n- First  the table field is set lazily  so it is null until you add\nelements to the Map \n- Second  the resize() calculations have changed in JDK8  so we adjust\nthe predicted size accordingly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72650895\n  
2997,     Open source Hashing crc32c() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72569582\n  
2998,     Finish open-sourcing tests for Monitor \n\nA previous CL open-sourced MonitorTestCase  but this class is abstract\nand its two subclasses also need open-sourcing!\n\nOur release processes didn t notice that we had tests that were never\nrun  but original author and Xoogler Justin noticed!\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72519095\n  
2999,     Update Truth location from org truth0 to com google common truth \n(internal CL 72431224)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72437171\n  
3000,     Migrate usages of Truth s Subject is(Object) to isEqualTo(Object)  The former is being removed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72319735\n  
3001,     Fix generic types in BloomFilter public API \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=72265659\n  
3002,     Migrate guava to directExecutor now that it will be in the next release \n\nMostly trivial  the only possibly interesting one was in LocalCache \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71753284\n  
3003,     Open source directExecutor and newDirectExecutorService  deprecate sameThreadExecutor\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71699710\n  
3004,     Fix CollectionFeature ALLOWS_NULL_QUERIES to MapFeature ALLOWS_NULL_KEY_QUERIES \n\nFrom leventov ru:    google com/p/guava-libraries/issues/detail?id=1649#c10\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71683488\n  
3005,     Allow overriding of entrySet() and values() derived suites  This is similar to the existing support for keySet() \n\nFrom leventov ru:    google com/p/guava-libraries/issues/detail?id=1801\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71670585\n  
3006,     Make the timing assertions more forgiving \n\nOriginally I just changed it to be within 50ms of 203ms and that was still too\ntight (flaked at least 0 001%) so I abandoned that and just asserted that we have a timing for service\nb \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71662833\n  
3007,     Add failure causes as supressed exceptions for each failed service in the exception thrown by\nawaitHealthy \n\nTechnically these supressed exceptions are already logged  but putting the\nexceptions in the exception that is actually thrown is slightly more useful\nsince it will get picked up properly by some tools which expect to\ninterrogate causes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71661495\n  
3008,     Denigrate Lists newLinkedList() following examples set for newArrayList \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71382856\n  
3009,     Add decrement function to InetAddresses\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71368911\n  
3010,     Fix timing race in ServiceManagerTest testServiceStartupTimes and add another\ntest for the actual behavior \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71364623\n  
3011,     Inline some test logic to support some torturous internal build cases \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71364170\n  
3012,     Update to new Truth package \nUse assertThat() instead of ASSERT that()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71286559\n  
3013,     Upgrade truth s gwt library to a more recent snapshot and upgrade OptionalTest to verify \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71278153\n  
3014,     Update the public suffix list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71219810\n  
3015,     Remove specification of behavior when the number of arguments does not match the number of  %s  in the format string from Preconditions javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71201390\n  
3016,     Rename SameThreadExecutorService to DirectExecutorService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=71178008\n  
3017,     Fix errors in @GuardedBy annotations \n\n@GuardedBy( Segment this ) refers to an enclosing class named \ Segment\ ;\n@GuardedBy( this ) refers to the current class \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70991665\n  
3018,     Fixed a java 8 compatibility issue in ForwardingWrapperTest  Can t use isDefault() because this code needs to compile under Java 7\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70779175\n  
3019,     Add @Beta to methods we just open sourced in FluentIterable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70732653\n  
3020,     Fix: NullPointerException in getAllPresent() \n\nCurrently when some of the keys aren t cached  getIfPresent() returns null and ImmutableMap throws an exception as it doesn t allow neither null keys nor null values \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70704051\n  
3021,     Upgrade Truth to 0 22\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70679145\n  
3022,     Open-source tests for Monitor (which is already open-sourced as part\nof guava) by removing @GoogleInternal  removing the dependence on\nTearDownTestCase  and also open-sourcing the helper class TestThread \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70653606\n  
3023,     Remove javax inject from OSGi package imports and from dependencyManagement in guava-parent \n\nGuava issue:    google com/p/guava-libraries/issues/detail?id=1798\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70642363\n  
3024,     Expand contract for Futures makeChecked() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70433012\n  
3025,     Reenable EnumMap tests  which work as of JDK7:    java com/view_bug do?bug_id=6312706\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70423146\n  
3026,     Release FluentIterable methods for Guava 18 and remove @Beta from toSortedList \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70420650\n  
3027,     Suppress ConcurrentHashMap entrySet() add() tests  which fail now that JDK8 permits those calls \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70418657\n  
3028,     Add x-apple-aspen-config mediatype for Apple  mobileconfig file serving \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70333950\n  
3029,     Benchmark should build in JDK 6 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70264278\n  
3030,     Add  unless noted otherwise  to the README section about the serialized forms of objects \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70263802\n  
3031,     Update the Guava README \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70258669\n  
3032,     Crude hack to make ForwardingMapTest pass in JDK8 \n\nThe proxy idea is probably fine  but I m using very suspect logic to\nmake it work \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70251894\n  
3033,     Prevent bursty RateLimiters from getting stuck at an infinite rate if they spent any time with one \n   google com/p/guava-libraries/issues/detail?id=1791\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70235429\n  
3034,     Use @Nullable on public *methods* consistently for Guava classes of common base\n(plus StringUtil  given how erratic its null-friendliness is)  Of course \nnothing is *proving* that these are correct or complete (and probably nothing\nshort of moving to full JSR308ness can?) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70026461\n  
3035,     Update the suffix patterns \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=70001122\n  
3036,     Call size() once \n\nSee    google com/p/guava-libraries/issues/detail?id=1790\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69946558\n  
3037,     Make doHash() protected in Equals Equivalence \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69899412\n  
3038,     More strictly restrict when fields are added to the set of relevant fields  only supporting non-synthetic String fields \n\nRollback of a rollback  reverting changelist 69845543\n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69877432\n  
3039,     Remove methods scheduled for removal in Guava 18 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69856875\n  
3040,     Automated g4 rollback of changelist 69842250 \n\n*** Reason for rollback ***\n\nBreaks tests\n\n*** Original change description ***\n\nMore strictly restrict when fields are added to the set of relevant fields  only supporting non-synthetic String fields \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69845543\n  
3041,     More strictly restrict when fields are added to the set of relevant fields  only supporting non-synthetic String fields \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69842250\n  
3042,     Move implementations from Objects methods into MoreObjects \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69783878\n  
3043,     Add scheduled deletion date of June 2016 to deprecated methods in Objects \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69770246\n  
3044,     Replace usages of deprecated Objects toStringHelper() with\nMoreObjects toStringHelper() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69572761\n  
3045,     Use MoreObjects firstNonNull instead of Objects firstNonNull \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69552363\n  
3046,     Make Converter andThen() final \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69490364\n  
3047,     Guava issue 1768: FilteredEntryNavigableMap should short-circuit isEmpty() queries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69479092\n  
3048,     In HashCode#equals implementation  avoid creating new byte arrays when it can be avoided:\n- first  check that the 2 hash codes have the same number of bits\n- if the number of bits is 4 or 8  compare the results of #asInt() or #asLong()\n- otherwise  use HashCode#getBytesInternal() instead of HashCode#asBytes()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69395204\n  
3049,     Disable incorrect @GuardedBy annotations \n\nThe @GuardedBy annotations in this CL did not follow the JCIP semantics: either\nthey referred to locks that did not exist  or they were being used for general\ndocumentation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69311266\n  
3050,     Open source base MoreObjects and add appropriate @since tags \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69310042\n  
3051,     Update to Truth 0 20 to match the internal version and to eliminate non-fatal compile errors  (AbstractArraySubject used Pattern and Matcher from java util regex )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69308900\n  
3052,     Document that the allAsList Future fails immediately when an input fails \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69300816\n  
3053,     Fix BloomFilter optimalNumOfHashFunctions calculation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69297820\n  
3054,     Avoid using a constructor that is available only in JDK6+ \nThis lets the mainline code work for the Guava backport \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69296675\n  
3055,     Update tests broken by CL 69197766 s update to the public-suffix list \nThose tests used nic uk as an example of an exclusion  and it no longer is one \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69295926\n  
3056,     Update PSL to pick up * uk changes:  uk TLD is now available for public\nregistration    nominet org uk/uk-domain-names/introducing-uk\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69197766\n  
3057,     Release BloomFilter#writeTo and #readFrom  which provide custom serialization that is more compact than standard Java serialization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69172238\n  
3058,     Graduate Queues synchronized Que Deq ue from @Beta \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69169032\n  
3059,     Update the Public Suffix files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69140019\n  
3060,     Disable incorrect @GuardedBy annotations \n\nThe @GuardedBy annotations in this CL did not follow the JCIP semantics: either\nthey referred to locks that did not exist  or they were being used for general\ndocumentation \n\nThe annotations are being replaced with comments in preparation for enabling\nstatic analysis of @GuardedBy annotations \n\nTested:\nTAP presubmits for global presubmit queue\n[ Some tests failed; test failures are believed to be unrelated to this CL\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69093384\n  
3061,     Withdraw application/x-protobuf from Guava  and document it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69015118\n  
3062,     Update @since to reflect the change in parameter types \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69014933\n  
3063,     Replace meaningful Javadoc with GWT-emulation boilerplate \n\nI have two main reasons for this:\n1  Meaningful Javadoc is sure to get out of sync between the two versions \n2  Boilerplate helps to distinguish the two in searches  e g      [ /search?jq=immutablecollection\n\nThere\ s also the implicit third reason  We do it this way in the other classes   If we instead want to include real Javadoc  it would be nice to do so consistently \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69014555\n  
3064,     Strip isPrime benchmarks from Guava  since isPrime itself is @GoogleInternal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69012929\n  
3065,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=69004612\n  
3066,     Add application/x-protobuf \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68866844\n  
3067,     Add a benchmark for [Google-internal -- this CL will be rolled back in Guava  isPrime on positive inputs   The input distribution is logarithmic \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68733770\n  
3068,     Make ImmutableCollection Builder public in the GWT emulation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68729337\n  
3069,     Fix EventBus to not include bridge methods when registering subscribers under Java 8  Annotations are included on bridge methods in Java 8 where they weren t before \n\n(Guava issue 1549 )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68654467\n  
3070,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68641973\n  
3071,     Updating comments to fix statements that MoreExecutors sameThreadExecutor is used if an Executor is not supplied  which is no longer actually the case since we switched the defaults to the internal INLINE_EXECUTOR \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68506380\n  
3072,     Add default instances of ByteSource  ByteSink  CharSource and CharSink to ArbitraryInstances  (Guava issue 1770 )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68417594\n  
3073,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68416232\n  
3074,     Add  et  as an effective TLD \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68415393\n  
3075,     Widen Multisets removeOccurrences to accept Iterables \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68409485\n  
3076,     Increase the symmetry of the Javadoc changes to Multimap hashCode() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68397956\n  
3077,     java/com/google/common: CL generated with data from dead-code analysis\nusing //devtools/scythe:remove_dead_code\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68103937\n  
3078,     Expand Javadoc of Multimap to clarify unusual hashCode implementations  as per Guava issue 1722 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68093584\n  
3079,     Fix overflow issues in LocalCache  as per Guava issue 1761\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=68007129\n  
3080,     Shuffling from internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=67842017\n  
3081,     Test that it s possible to attach a callback to a ListenableFuture<?> \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=67713851\n  
3082,     Release FutureCallbackTest to Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=67707789\n  
3083,     Update Truth version to 0 18 \n\nThis version includes primitive type arrays  improved String support  renaming of the object under test  as well as custom error messages \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=67639126\n  
3084,     Add OSGi Bundle-DocURL to Guava MANIFEST file \n\nDespite the name  it doesn t seem like it should point to the Javadoc (based on what    osgi org/wiki/Bundle-DocURL says)  so I just pointed it to the Guava project page \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=67036360\n  
3085,     Split RateLimiter implementations off into separate files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=67034085\n  
3086,     Extend mocking tests to cover EasyMock \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66920336\n  
3087,     Fix Guava issue 1751\n\n   google com/p/guava-libraries/issues/detail?id=1751\n\nThe bug is that this test depends on listener ordering  I believe that this race was technically introduced by [   since our strategy for invoking listener callbacks was sufficiently serialized prior to that cl  such that this was safe even though it violated the spec \n\nAs it is  it takes some seriously bad luck to observe the race (thanks cpovirk!)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66902563\n  
3088,     Add Google-internal ManualRateLimiter and (as part of that work) public Uninterruptibles tryAcquireUninterruptibly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66895167\n  
3089,     Reduce differences between  when is the next permit available?  and  request a permit :\n- Standardize the method name format \n- Standardize on returning the next available time (rather than the wait time that one of the two currently returns) \n- Standardize on allowing the return value to indicate a time in the past (rather than requiring it to be a present/future time as one of the two currently does) \n\nAlso  improve tests and documentation around all this  particularly the  in the past  part \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66891133\n  
3090,     Revert base Objects -> j u Objects deprecations until we do the bulk of the migrations ourselves (blocked: see bug) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66815987\n  
3091,     The example is below  not above \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66659338\n  
3092,     Add documentation to all versions of Lists newArrayList methods to discourage their usage; all the other collection factory methods to follow (Sets newHashSet  etc )  Tweak verbiage of other obsoleted-by-Java7 methods to match \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66644002\n  
3093,     Remove buggy future workarounds from ChainingListenableFuture (a k a  the future returned by Futures transform)\n\nThis should only affect users who are passing buggy future implementations to Futures transform  the most likely culprit is com google net rpc util  RpcListenableFuture RpcCheckedFuture  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66523545\n  
3094,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66426194\n  
3095,     Add David E  Wheeler to Guava AUTHORS\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66319030\n  
3096,     Give date-based deletions a stay of execution (24 months  not 18) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66299916\n  
3097,     Deprecate Iterators emptyIterator() in Guava  because it always has a decent replacement even when not on Java 7 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66299891\n  
3098,     Add more tests for known BF false positives when using UTF8 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66295364\n  
3099,     Disable PackageSanityTests null-pointer testing for LongAdder  as we don t want to patch Striped64 to include @Nullable annotations \nAlso  remove that annotation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66293925\n  
3100,     Sync with latest upstream jsr166e changes \nFixes  classloader leak  \n   google com/p/guava-libraries/issues/detail?id=1553\n   gmane org/gmane comp java jsr 166-concurrency/12659\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66247344\n  
3101,     Use a MatchResult created by a successful match  as required by Harmony (used on Android):\n   gl/5VQFmC\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=66096434\n  
3102,     Beef up documentation and validation of parameters \nAlso  fully hide/remove some unusable methods  and fix up a return type \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65883612\n  
3103,     Test mocking of RateLimiter to avoid regressions like that of CL 65383672 \nIdeally we will make all non-final methods mockable  but for now  I ll settle for not breaking any new ones \n(The real fix may be a bigger project  e g   converting RateLimiter to an interface  I don t know yet )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65821400\n  
3104,     Migrate calls to Annotation getClass() to Annotation annotationType() \n\nAnnotation getClass() returns a proxy class generated at runtime that is not particularly useful -- it returns false for isAnnotation()  for example -- where annotationType() actually returns the type associated with the annotation (e g  MyAnnotation class for @MyAnnotation) \n\nTested:\nTAP --sample for global presubmit queue\n[ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65806476\n  
3105,     Make Ints tryParse available under GWT \n\nIt already works  thanks to careful avoidance of overflow in checks against |cap| and MIN_VALUE \n(Contrast the previous (Android) version  which may or may not have worked under GWT because GWT integers don t wrap when they overflow  (I think that our workaround for this was successful  but it s hard to be confident ))\n\nAlso  enable the tests for *Longs* tryParse under GWT \n(I also added a few more tests to both versions just to be paranoid )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65806393\n  
3106,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65733547\n  
3107,     Remove the callAllGets  feature  of CombinedFuture \n\nThis should only be necessary for buggy future implementation\n\nThis is a rollfoward \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65725521\n  
3108,     Automated g4 rollback of changelist 65602026 \n\n*** Reason for rollback ***\n\nThis commit caused several test failures  so rollback until a forward-fix can be integrated \n\n*** Original change description ***\n\nRemove the callAllGets  feature  of CombinedFuture \n\nThis should only be necessary for buggy future implementation \n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65624847\n  
3109,     Reimplement Throttle as a passthrough to its reimplementation under the new RateLimiter API \nI ve attempted to leave the behavior untouched (aside from fixing an unsynchronized access to maxTime) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65604449\n  
3110,     Remove the callAllGets  feature  of CombinedFuture \n\nThis should only be necessary for buggy future implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65602026\n  
3111,     Change the implementation of Futures combine to be faster!\n\nAlso  replace all uses of sameThreadExecutor with a cheaper implementation  (IMHO  this should be _the_ implementation of sameThreadExecutor with a new sameThreadExecutorService for those who want it  but since that wouldn t be backwards compatible     sadness)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65564280\n  
3112,     Handle overflow and negative timeouts:\n   google com/p/guava-libraries/issues/detail?id=1622\n\nSome discussion of each:\n- Overflow is of course impossible to prevent entirely with fixed-size number types  but we\ re less likely to see overflow with the new  available - timeout  than with the old  now + timeout\ : The latter can overflow almost immediately if given MAX_VALUE timeout  (Compare the advice at <   oracle com/javase/7/docs/api/java/lang/System html#nanoTime%28%29> )\n- Negative timeouts are supported by java util concurrent APIs  For similar behavior in RateLimiter  we need to be sure that a request to  wait up to -1 seconds  is treated identically to  wait up to 0 seconds  -- specifically  that it works right if the permit has become available within the last second  (Another potential problem  albeit one much less likely  is overflow when subtracting an input of MIN_VALUE )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65540333\n  
3113,     Reimplement legacy RateLimiter as a passthrough to its reimplementation under the new RateLimiter API \nI ve mostly attempted to leave the behavior untouched  but there are a few changes:\n- Fixed a bug that would arise with a negative nanoTime() (probably unlikely  but it could happen) \n- Removed logging \n- Stop swallowing interrupts \n\n(Retry of CL 65383672  which was rolled back in CL 65402625 because of breakages in mocks  fixed by lazily initializing the mutex field )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65446945\n  
3114,     Propagate RejectedExecutionException to transformed/combined futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65412634\n  
3115,     Rollback of changelist 65383672  which broke a test that mocks RateLimiter \n\n*** Original change description ***\n\nReimplement legacy RateLimiter as a passthrough to its reimplementation under the new RateLimiter API \nI ve mostly attempted to leave the behavior untouched  but there are a few changes:\n- Fixed a bug that would arise with a negative nanoTime() (probably unlikely  but it could happen) \n- Removed logging \n- Stop swallowing interrupts \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65402625\n  
3116,     When \\FFFE  \\FFFF  or ASCII control characters are found in the input  replace them with \\FFFD \nThe behavior prior to this CL is to include them in the output (for \\FFFE and \\FFFF) or to strip them (for ASCII control characters) \nThe characters are not valid in XML:    w3 org/TR/2008/REC-xml-20081126/#charsets\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65400047\n  
3117,     Reimplement legacy RateLimiter as a passthrough to its reimplementation under the new RateLimiter API \nI ve mostly attempted to leave the behavior untouched  but there are a few changes:\n- Fixed a bug that would arise with a negative nanoTime() (probably unlikely  but it could happen) \n- Removed logging \n- Stop swallowing interrupts \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65383672\n  
3118,     Remove Platform classGetSimpleName() in favor of calling class getSimpleName() directly \nThe method isn t used under GWT  so it doesn t make sense for it to be emulated in Platform \n(Coincindentally  it turns out that getSimpleName() is available under GWT nowadays  anyway )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65377305\n  
3119,     Tweaks necessary to make common collect build in Java 8 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65201740\n  
3120,     Fix test that will fail in an upcoming patch to GWT \n\nThe semantics for String toUpperCase() are that of the JavaScript browser implementation and might not conform to their JRE specification \n\nIn FF  pa\\u00dfword  toUpperCase() is not  PASSWORD ; however the test was succeeding in GWT due to a pass of static evaluation that was done in the GWT compiler  The GWT compiler is removing all optimizations from -draftCompile and in that scenario the test fails \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65192347\n  
3121,     Change @since on some methods in reflect Parameter to 18 0 since the changes didn t make it in to 17 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65147685\n  
3122,     Add notes for external Guava users re  JDK 7 APIs \nDeprecate obsoleted Objects APIs \nReplace <b>Note</b>: with <b>Note:</b> in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65135062\n  
3123,     Push current RateLimiter implementation down into a subclass \nThis will make it easier to provide alternative RateLimiter implementations to replace our legacy rate-limiting APIs \nAlso  random cleanup:\n- Static import stuff \n- Use Stopwatch instead of reimplementing it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65119596\n  
3124,     Use ImmutableSet of() iterator() instead of Iterators emptyIterator() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65059838\n  
3125,     Use ImmutableSet of() iterator() instead of Iterators emptyIterator() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65046437\n  
3126,     Replace usages of deprecated IterableSubject iteratesOverSequence(   ) with iteratesAs(   )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=65045496\n  
3127,     Use Double compare() instead of Doubles compare() \nUse Float compare() instead of Floats compare() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64999716\n  
3128,     Remove workaround that was required by the <T extends Object & Iterable<?> & Iterator<?>> method \nThat method was removed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64996669\n  
3129,     Use ImmutableSet of() iterator() instead of Iterators emptyIterator() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64993582\n  
3130,     Allow disabling of guava gwt tests from command line \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64929463\n  
3131,     Roll-forward:\n\n*** Original change description ***\n\nMake common reflect build and pass tests against both Java 7 and Java 8 \n\nIn particular  Java 7 had both the TypeVariable and AnnotatedElement interfaces  which were unrelated   In Java 8  TypeVariable extends AnnotatedElement  and gained a method getAnnotatedBounds()  returning an AnnotatedType[   where AnnotatedType was an interface introduced in Java 8   \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64921461\n  
3132,     Update Guava versions to 18 0-SNAPSHOT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64904324\n  
3133,     Fix busted code tag in @return for MoreExecutors shutdownAndAwaitTermination\nUpdated javadoc in response to    google com/p/guava-libraries/issues/detail?id=1725\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64893877\n  
3134,     Add @since 13 0 to Ordering allEqual() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64777126\n  
3135,     Remove entrySet() redundancy between AbstractMultiset and ConcurrentHashMultiset \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64720096\n  
3136,     Shuffling from internal-only change \nTo be used for a temporary migration aid only!\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64716281\n  
3137,     Rollback of changelist 64659484 ( Make common reflect build and pass tests against both Java 7 and Java 8 ) \n\nOur internal build changes seem to be causing problems \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64665073\n  
3138,     - For a Collection<T> parameter that we don t know how to generate  fail the test  Previously  we would sometimes generate a Collection<String>  since the value is usually used only for equals() and hashCode() testing  (All this also applies to most other JDK and Guava collection types )    google com/p/guava-libraries/issues/detail?id=1665\n- For Optional parameters  generate Optional absent() before generating any Optional of(   ) instances \n- Deprecate setSampleInstances in favor of setDistinctValues \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64661899\n  
3139,     Make common reflect build and pass tests against both Java 7 and Java 8 \n\nIn particular  Java 7 had both the TypeVariable and AnnotatedElement interfaces  which were unrelated   In Java 8  TypeVariable extends AnnotatedElement  and gained a method getAnnotatedBounds()  returning an AnnotatedType[   where AnnotatedType was an interface introduced in Java 8 \n\nWe now have TypeVariableImpl extend a class NotAnnotatedElement  which provides an implementation for AnnotatedElement where no annotations are present  and throw UnsupportedOperationException on TypeVariableImpl getAnnotatedBounds() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64659484\n  
3140,     Change default BloomFilter strategy to be controllable by a system property for Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64657125\n  
3141,     This CL is to fix EnumMultisetTest that would otherwise break with the new FreshValueGenerator that doesn t generate raw Iterable for Iterable<T> \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64631310\n  
3142,     Temporary fix to ClassSantityTester \nWe cannot remove the fallback to Iterable class generation yet  because doing that would break some teams  tests  They need to be fixed with extra setDistinctValues() before we remove the fallback \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64603381\n  
3143,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64574375\n  
3144,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64573579\n  
3145,     Fix flaky ServiceManager test\n\nGuava issue 1715:\n   google com/p/guava-libraries/issues/detail?id=1715\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64565848\n  
3146,     Generates fresh value for Range  It was an oversight not adding it in the first place \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64481937\n  
3147,     Migrate to setDistinctValues() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64399927\n  
3148,     Added setDistinctValues() to ClassSanityTester and AbstractPackageSanityTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64398568\n  
3149,     Change default BF strategy for Guava to MURMUR128_MITZ_64 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64156827\n  
3150,     Fix minor Javadoc error in CharStreams \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64151790\n  
3151,     Improve BF serialization documentation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64144815\n  
3152,     Rollback of changelist 63979311  which changed the default BloomFilter strategy \n\nThe caused problems for teams that sent BloomFilters from new binaries to old binaries  as the old binaries could not read the new binaries  BloomFilters \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64114639\n  
3153,     Add koeln TLD \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64111945\n  
3154,     Don t allow repeated calls to hash() on a MessageDigest-based hasher \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64080687\n  
3155,     Add tests to make sure classes don t get exported to JS by accident/mistake \n\nThis happened once with SafeHtmlBuilder and I nearly did it again recently  We can export classes that make use of @CompileTimeConstant if we make sure we export only specific methods  but for now it s simpler to blank disallow any class with @CompileTimeConstant \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=64052070\n  
3156,     Switch default BloomFilter strategy from the broken MURMUR128_MITZ_32 to the\nnew MURMUR128_MITZ_64 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63979311\n  
3157,     Clean up misuses of Truth where proposition values are passed into ASSERT that() instead of the object under test   This leads to patterns like:\n\nASSERT that(myMap values() isEmpty());\n\nThe above will do exactly nothing  because Truth is a fluent API and expects a value and returns an object with custom proposition methods on it  i e \n\nASSERT that(myMap values()) isEmpty(); is the appropriate fix \n\nThis is in preparation for an upgrade to Truth which includes @CheckReturnValue on methods like  that() in order to let error-prone flag these as a compile-error \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63974750\n  
3158,     Init combinedHash to hash1 as per  Less Hashing  Same Performance:\nBuilding a Better Bloom Filter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63973319\n  
3159,     Add a new BF strategy  The old one is subtly broken  For more information  see:    google com/p/guava-libraries/issues/detail?id=1119\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63970075\n  
3160,     Fix a typo in CacheBuilder s docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63969189\n  
3161,     Add HashCode getBytesInternal() for package-private direct access to the\nunderlying  mutable byte array (for byte-based HashCodes) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63906429\n  
3162,     Change the behavior of Service Listener and ServiceManager Listener such that we guarantee that listener callbacks (for a single listener) will never be called concurrently   Previously  the only semantics we guaranteed was about the order in which callbacks were submitted to executor execute   This significantly strengthens those guarantees \n\nThis is being done to resolve the flake that cpovirk@ identified here:\n   [ /target?id=58fc52ba-a5f8-4619-83d3-ea0a28b9ee72&target=//javatests/com/google/common/util/concurrent:MediumTests\n\nThe flaky test could be fixed either by using a SerializingExecutor in the test\nor by changing the semantics of Service/SeriveManager addListener to guarantee\nserial callback execution   I ve opted for the latter since this is a very rare\nand confusing race and it is unlikely that any user would actually want their\ncallbacks to execute concurrently \n\nTo implement this I ve deleted ExecutionQueue and introduced a new object\ncalled SerialListenerQueue that is essentially\nExecutionQueue+SerializingExecutor   I ve implemented it this way rather than\nby combining ExecutionQueue with SerializingExecutor since:\n1  ExecutionQueue\trelies on poorly documented features of ConcurrentLinkedQueue\n2  ExecutionQueue is itself quite complicated\n3  that would introduce an extra queue operation per callback execution\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63836415\n  
3163,     Fix up  gwt xml file as a part of some internal changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63544353\n  
3164,     Pick up a whole lot of TLD changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63499305\n  
3165,     Change bitCount from int to long \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63498264\n  
3166,     Remove redundant  public  modifier from StatsCounter interface methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63486708\n  
3167,     Make Enums getIfPresent ~16 times faster for 80% hit rate  ~72 times faster for 20% hit rate \n\nSee:    google com/benchmark:enums getifpresent\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63478563\n  
3168,     Add missing <inherits> to modules \nThe result is that we don t have to manually include User in our compilation tests  and other users won t have to include it  either \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63444626\n  
3169,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63436180\n  
3170,     Make AtomicLongMap tests work under GWT \nSee the comments added to the  gwt xml files for the sordid details \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63401251\n  
3171,     Add missing modules \nThis ensures that the open-source build compiles all packages and has everything it needs to run all tests (or so I will claim until I find my *next* oversight :))\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63359056\n  
3172,     Prevent our rollup modules from including any  real  source files from c g c subpackages \nThis should make no difference unless we forget to list a module  in which case it will prevent us from seeing the module\ s  java files without its  gwt xml \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63357986\n  
3173,     Guava publicsuffix  gwt xml fixes:\n- Use the Guava-munged  gwt xml files rather than the Google-internal versions  (The versions are currently identical  but this will change in CL 63334981 )\n- Put the  gwt xml files under guava-gwt instead of guava  (I m not 100% sure whether this fixes any concrete problems or just removes the  gwt xml files from the main guava jar  where they clearly don t belong )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63357956\n  
3174,     Mark DoubleMath as @GwtCompatible  allowing these methods to be used from GWT code:\n- log2(double x)\n- factorial(int n)\n- fuzzyEquals(double a  double b  double tolerance)\n- fuzzyCompare(double a  double b  double tolerance)\nThe other methods are marked as @GwtIncompatible due to aspects of their implementations not being GWT-compatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63356280\n  
3175,     Override close() in all subclasses of FilterOutputStream to ensure they do not swallow exceptions thrown when flushing the delegate stream \n\n   google com/p/guava-libraries/issues/detail?id=1651\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63289125\n  
3176,     Remove inaccurate claim of GWT compatibility \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63262539\n  
3177,     Run some common collect testing tests under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63261660\n  
3178,     Remove GWT copy of ImmutableSortedSet of(E[ ) from Guava \nThe non-GWT version has been gone since CL 24279246 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63077177\n  
3179,     Release Converter from(Function  Function) for Guava 17 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63073973\n  
3180,     Fix Maven warning from duplicate Animal Sniffer reference:\n\n[WARNING  Some problems were encountered while building the effective model for com google guava:guava:bundle:17 0-SNAPSHOT\n[WARNING   build pluginManagement plugins plugin (groupId:artifactId)  must be unique but found duplicate declaration of plugin org codehaus mojo:animal-sniffer-maven-plugin @ com google guava:guava-parent:17 0-SNAPSHOT  /usr/local/google/home/cpovirk/clients/guava-white/guava-libraries/pom xml  line 184  column 17\n[WARNING \n[WARNING  Some problems were encountered while building the effective model for com google guava:guava-parent:pom:17 0-SNAPSHOT\n[WARNING   build pluginManagement plugins plugin (groupId:artifactId)  must be unique but found duplicate declaration of plugin org codehaus mojo:animal-sniffer-maven-plugin @ line 184  column 17\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63030073\n  
3181,     Adding stream based factory methods for ByteArrayDataInput/Output and tidying up to minimize actual constructors \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=63021371\n  
3182,     Add Futures inCompletionOrder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62970544\n  
3183,     Open source base Verify in Guava 17 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62936772\n  
3184,     Add a test case to EnumsTest that ensures that the Enums getIfPresent method doesn t cause a reference to the Enum class parameter to be held indefinitely \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62564526\n  
3185,     Remove  <add-linker name=\ std\ />  workaround  which is no longer necessary \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62490843\n  
3186,     Automatically add <inherits> for java * emulations to Guava \nRemove the manually added <inherits> \n\nThis change applies only to java * emulations: Normally <inherits> are added automatically as part of the build \nThe problem here was that the java * <inherits> added were for internal-only modules that only transitively pulled in the public modules \nThis change rewrites the internal-only module names to match the public module names \n\nThe result is mostly a no-op  but  in addition to some theoretically irrelevant reordering  the automation also produces a few <inherit> fixes:\n- Remove net -> util \n- Remove collect/testing -> util \n- Add collect/testing -> truth \n- Add collect/testing/google -> truth \n\nAdditionally  the automation identifies that cache was missing a BUILD dependency on util \n(It got away with it because the dependency was pulled in transitively through base  (This worked because strict Java deps doesn t fully apply to GWT ))\nI have added the appropriate dependency \n\n(This CL redoes *most* of CL 62235637 (which was rolled back in CL 62240733)  and it also touches other packages that that CL did not )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62345986\n  
3187,     *** Reason for rollback ***\n\nRemoving the rest of the  gwt xml references to java * breaks open-source compilation of files like Suppliers  so Suppliers probably needs the java * references; it just happens to be getting them now from other targets also on the classpath \n\n*** Original change description ***\n\nCleanup unnecessary gwt xml s from c/g/common/base and c/g/common/collect \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62240733\n  
3188,     Cleanup unnecessary gwt xml s from c/g/common/base and c/g/common/collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62235637\n  
3189,     Changed ArbitraryInstances to use public constant instance if present \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62232146\n  
3190,     Adding precise control over types of null queries allowed by MapFeatures \nAlso  propagate ALLOWS_NULL_VALUES to Multimap values() features \nFrom leventov ru:    appspot com/58760044/    appspot com/65730044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62226066\n  
3191,     Override toString() in Iterables consumingIterable() and\nIterators consumingIterator() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=62154162\n  
3192,     Remove javacomp_package\n\nLeaves a couple of empty builddefs files in place to avoid breaking\nprojects that still subinclude them   Those files will be removed\nonce the subincludes are all cleaned up \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61607971\n  
3193,     Add a new HostAndPort fromHost() factory  which behaves like fromParts()\nwithout the port number   This is useful for converting a host into\npossibly-bracketed form  so that a port may be appended afterward \n\nAlso  the correct buffer size is  length + 8   due to the 5-digit port \ntwo brackets  and a colon \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61830506\n  
3194,     Fix a minor nit in Futures dereference() documentation: the listener runs in either the thread that called dereference() OR the thread the completes the input future \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61801821\n  
3195,     Deprecate the primitive compare() methods internally \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61755619\n  
3196,     Minor docfix in Iterators java \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61749084\n  
3197,     Increase timeouts that are expected never to expire \nUnder current timeouts  the test is flaky \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61742992\n  
3198,     Improve the error message thrown from MediaType parse() \n\nReport as    google com/p/guava-libraries/issues/detail?id=1667\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61538444\n  
3199,     Clarify javadoc of Files move; it doesn t work just like mv \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61519547\n  
3200,     Mark ImmutableMultiset toArray() tests as flaky \nThe best way I know to do that for our suite-generated tests is to mark all ImmutableMultiset/ImmutableSortedMultiset tests as flaky \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61395617\n  
3201,     grow the destination buffer more aggressively to avoid excessive array copying in escapeSlow\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61330434\n  
3202,     Add Follow-OnlyWhenPrerender-Shown http header constant \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61312752\n  
3203,     Method to shut down an ExecutorService in two phases included in j/c/g/common/util/MoreExecutors \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61230873\n  
3204,     Add a more descriptive error message when AsyncFunction apply returns null \n\nAs it currently is  the NPE gets thrown several lines later in a very confusing function which  at first glance  should not be able to produce an NPE (since outputFuture is not @Nullable)   And since outputFuture looks like (but isn t) a field  one has to search the entire class to determine how it was set to null in the first place   This adds a very clear message to the NPE saying that AsyncFunction may not return null \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61228632\n  
3205,     Correct code example in Funnel Javadoc  that uses the old deprecated-then-removed PrimitiveSink#putString(String) method \n\n   guava-libraries googlecode com/git-history/release/javadoc/com/google/common/hash/Funnel html\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61134562\n  
3206,     Deprecate the constants in com google common base Charsets for internal users  Internal users should prefer the constants in java nio charset StandardCharsets \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61098351\n  
3207,     Add closeQuietly(InputStream) and closeQuietly(Reader) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61085980\n  
3208,     Delete AndroidInteger \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61067964\n  
3209,     Mozilla TLD update \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61013135\n  
3210,     Run Animal Sniffer on guava-testlib and guava-test in addition to guava itself \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=61001284\n  
3211,     Reshuffling from internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60993826\n  
3212,     Belated nitpicking and comment revisions for TypeResolver change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60944582\n  
3213,     Change TypeResolver to not construct new TypeResolver when all the bounds remain the same  This is to work round the change in JDK TypeVariableImpl equals() \n\nIn summary:\n\n1) When <A> resolves to itself <A> (i e  all bounds resolve equal to themselves)  uses the original TypeVariable instead of the Guava artificial TypeVariableImpl  which doesn t compare equal with JDK TypeVariableImpl \n\n2) In order to do 1)  we need TypeVariableImpl equals() to compare bounds too \n\n3) Uses TypeVariableKey as key in the map from TypeVariable to Type  during resolution  This ensures that during type resolution  despite the change of equals() in 2)  the same type variable with or without partially resolved bounds is always mapped to the same resolved type \n\n4) Since JDK s TypeVariableImpl no longer compares equal with our custom TypeVariableImpl  We need to change equals() to do the same to ensure symmetry \n\n5) All of the above are done conditionally only under the new JDK \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60778041\n  
3214,     Promise at least weakly consistent iteration for asMap() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60762175\n  
3215,     Fix tests that break when Stopwatch constructors are hidden \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60761955\n  
3216,     Hide deprecated Stopwatch constructors in Guava \nThe constructors are scheduled for deletion in Guava 17 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60668113\n  
3217,     Rewrite Ints tryParse(int) with a copy of the Longs tryParse implementation  which accepts only ASCII digits \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60660931\n  
3218,     Added Media types for the following font formats: EOT  SFNT  WOFF \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60484333\n  
3219,     Fix a call to checkArgument in SimpleTimeLimiter newProxy to use string substitution \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60440806\n  
3220,     Also benchmark creating SortedSets  which predictably fare worst  but at least\nwe can observe by how much \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60385622\n  
3221,     Stop using assertSeededHashFunctionEquals for goodFastHash \nThe problem is that goodFastHash(n) is sometimes equal to goodFastHash(m) even when n and m are different \nBasically  the value is rounded up to a multiple of 128 \n(It\ s a size  not a seed as it is for the other Hashing methods )\n\nCurrently the test passes because of the specific values that the test Random generates \nHowever  which specific numbers are used for goodFastHash is dependent on the order in which the Hashing methods are tested  which is dependent on the JVM \nThe methods are reordered with the latest JDK7 build  breaking the test (at least in Guava  which has a slightly different set of methods than internally) \n\nWe could  fix  this by sorting the methods before testing them  but the fundamental problem is that assertSeededHashFunctionEquals makes sense for seeds but not sizes \n(This basic fact is hinted at by a comment that already existed in the test )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60202745\n  
3222,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60101894\n  
3223,     Use string substitution for MapMaker checkNotNull \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=60034674\n  
3224,     Remove the deprecated Service methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59981888\n  
3225,     Update Guava version to 17 0-SNAPSHOT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59979307\n  
3226,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59954427\n  
3227,     Add some performance enhancements to Striped:\n\n1  Enhance bulkGet to not call getAt() for runs of identical stripes\n2  Introduce a new Striped implementation for LazyWeak Striped instances with\nsmall numbers of stripes\n\nTo justify this I also added a caliper benchmark \n\nIt is a minor runtime improvement in all but cases where there are a small\nnumber of stripes where it is a major improvement\n\nThe LAZY_SMALL appears to be superior in all cases until the stripes size gets very large where the large array size becomes a potential issue   Due to this i have introduced a static integer LARGE_LAZY_CUTOFF at 1024 so that lazyWeak striped instances with more than that many stripes use the legacy implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59821299\n  
3228,     Fix LocalCache asMap() values() to not implement Set \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59806114\n  
3229,     Allow for the possibility of the CacheLoader load not taking enough time for the system clock to tick in LocalLoadingCacheTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59799155\n  
3230,     Change SortedMapTestSuiteBuilder and DerivedCollectionGenerators to correctly handle SortedMaps whose keySet()s are not SortedSets--the spec of SortedMap keySet() doesn t require that it return a SortedSet  and it apparently didn t at least for TreeMap in JDK5 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59756355\n  
3231,     Remove deprecated  unused  Google-internal Futures transform overload that accepts a plain Future \nThe ListenableFuture overloads appear to be serving users well \nFor those users who are stuck with a plain Future  we still provide Futures lazyTransform  which has similar but not identical behavior to Futures transform  Specifically  lazyTransform does not cache the result of the transformation  This could in principle result in Futures whose value changes over time  This  along with the potential costs of repeated function application  is a reason to prefer Futures transform when possible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59754254\n  
3232,     Fix a number of test failures running the backport under JDK5 \n\n- Sets testPowerSetIteration seemed to be relying on the order of elements in a HashSet \n- ImmutableSortedSetTest testDifferentComparator_serialization was relying on Collections reverseOrder() deserializing to the singleton instance of it \n- ImmutableSortedMultisetTest testCopyOfDefensiveCopy and testCopyOfSortedDefensiveCopy were relying on the JDK calling toArray()  while JDK5 is calling toArray(T[ ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59749873\n  
3233,     Cache the reverse Converter view to avoid allocating every time reverse() is\ncalled \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59697492\n  
3234,     Add SortedCopyBenchmark and document its findings in the Ordering javadoc \nFirst rename away the existing benchmark for measuring comparator delegation\noverhead \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59694095\n  
3235,     Fix up ExecutionQueue docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59677053\n  
3236,     Clarify the relationship between Iterables toString(collection) and collection toString() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59586049\n  
3237,     Javadoc tweaking \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59531412\n  
3238,     Add tests for inserting null values into a Multimap \nI was unable to reproduce the behavior reported at    com/questions/21078379/guava-null-pointer-on-multimap-with-multiple-null-values\nMaybe it depends on the JRE version  since  as you noted  old JREs had a TreeSet bug \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59522383\n  
3239,     Change a couple of usages of Deque push() and pop() to addFirst()/removeFirst()  reducing the delta for the JDK5 backport slightly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59415987\n  
3240,     Add iteration order discussion to SortedMultiset doc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59412449\n  
3241,     Some changes to CharMatcher WHITESPACE implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59409460\n  
3242,     Remove use of JDK7 API in ServiceManagerTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59402724\n  
3243,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59362873\n  
3244,     Functions forMap and Maps asConverter should have cross-references in their documentation  as well as the two forms of Functions forMap with each other \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59349470\n  
3245,     Replace  fail(   ); return x;  with  throw new AssertionFailedError(   ); \nThis eliminates some unreachable code that the compiler couldn\ t prove was unreachable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59341803\n  
3246,     Remove unused private nested class from SortedMapInterfaceTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59335399\n  
3247,     Add @CheckReturnValue annotation to Objects equal() so that error-prone\nenforces that the return value is used \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59280111\n  
3248,     Create a Google-internal RateLimitingExecutorService \n\nThe only thing needed from RateLimiter was a pair of methods to get a permit without sleeping \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59264619\n  
3249,     Cleanup from rename of asyncReload() to asyncReloading() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59229767\n  
3250,     Rename CacheLoader asyncReload to asyncReloading \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59214974\n  
3251,     Update Converter javadocs:\n-added a link to Maps asConverter()\n-added a note saying do not call the SPI methods directly\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59155849\n  
3252,     Change CharSource wrap(   ) toString() to use Ascii truncate and increase the maximum number of characters to truncate at  Also change ByteSource wrap(   ) toString() to truncate the hexadecimal representation of the byte array \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59155734\n  
3253,     Release CacheLoader asyncReload() in Guava 17 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59050926\n  
3254,     Change toString() methods of returned Predicate instances to consistently use the  code-like  style \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59050444\n  
3255,     Move configuration to the constructor \nThat s where we do it in other packages \nPlus  it s ever so slightly less code \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59041814\n  
3256,     Optimize BigIntegerMath sqrt(BigInteger  CEILING)  which needs to test if the square root is exactly an integer  by doing a quick check in int arithmetic first \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59039597\n  
3257,     Clarify the relationship between the two wrapTask methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59003211\n  
3258,     Miscellaneous cleanups:\n- Remove unused ImmutableSortedMultiset Builder comparator \n- Change @link to @linkplain where appropriate  and fix a couple busted @link tags seen along the way (based on a search for \  @link\\b[^  *([ * +[^ *  *[^ *  *[^ *   ) 3 \ )  (Change one @link in ServiceManager to @code ) In a couple cases (TimeUtil  ServiceModule)  the text ought to be *partially* code font  but I haven\ t taken further action\n- Strip Converter from implementation from Guava  since Converter from itself is stripped \n- Run trivial RunnablesTest under GWT \n- Remove a few instances of  $inheritDoc   which should have been  @inheritDoc  and wasn\ t necessary anyway \n- Remove per-method @GwtIncompatible annotations from SmallCharMatcher  which is entirely @GwtIncompatible \n- Remove stray blank line in AbstractMapBasedMultimap \n- Insert missing space in UninterruptiblesTest failure message \n- Remove extra space in WrappingExecutorService wrapTask Javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=59001342\n  
3259,     Make some minor simplifications in common base \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58996623\n  
3260,     Remove use of JDK 7 language feature from a Guava benchmark  Guava hasn t\ndesupported JDK 6  and even when it does we may still want benchmarks to be\nrunnable against older vms \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58938655\n  
3261,     Mark isSmall as @GwtIncompatible \nIt references the @GwtIncompatible type SmallCharMatcher \nThis works fine in prod mode  but it breaks in dev mode \nSee    google com/p/google-web-toolkit/issues/detail?id=8510 and the discussion on linked CL 39931458 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58906855\n  
3262,     Add benchmark methods to determine efficiency of map iteration using both entry set and key set \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58904951\n  
3263,     Remove Platform charBufferFromThreadLocal layer of indirection  which existed for GWT purposes \nIt hasn t been used from GWT code since the escapers were moved from common base to common escape \nIts one remaining (Google-internal) caller was never GWT compatible  so the caller didn t actually need to use the method (though it has done so since its creation back in CL 24637091) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58904453\n  
3264,     Small Converter cleanups:\n-move all @annotations to individual lines\n-fix some @Nullable annotations\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58824450\n  
3265,     Remove null boilerplate from Converter subclasses \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58787043\n  
3266,     Converter from(forwardFunction  backwardFunction)  This will be essential in\nJDK 8  It s probably not that useful before then  but    why not?\n\n(Converter from is Google-internal currently  but we ve accidentally released the implementation  We ll strip it out later )\n\nSneak in a few javadoc tweaks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58786360\n  
3267,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58655362\n  
3268,     Update common io package-info java to refer to Sources and Sinks rather than Input/OutputSuppliers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58567579\n  
3269,     Slightly adjust Ordering from() doc to be more amenable to the jdk 8 future \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58558868\n  
3270,     Remove doc references to the deprecated service methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58500316\n  
3271,     Compile Guava GWT tests with -strict \nWe already compile the prod code with -strict \nI assume that I just didn t realize that -strict was valid for the test goal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58499115\n  
3272,     Make some changes to MultimapBuilderTest to make it build in GWT (2 5 0-rc1  which Guava is using currently) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58497528\n  
3273,     Fix arrayListValues(int) in MultimapBuilder to actually throw IAE when expectedValuesPerKey is negative \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58491662\n  
3274,     Open source HashingInputStream and HashingOutputStream \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58485637\n  
3275,     Open source Runnables doNothing() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58481831\n  
3276,     Open source MultimapBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58480935\n  
3277,     Open source tests for ByteSource read(ByteProcessor) and CharSource readLines(LineProcessor) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58426058\n  
3278,     Remove Closeables closeQuietly in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58425087\n  
3279,     Deprecate InputSupplier  OutputSupplier and all public methods in common io that use either type  Also release methods on Byte/CharSource that take ByteProcessor and LineProcessor so that the equivalent methods in Byte/CharStreams can be deprecated reasonably \n\nSchedule InputSupplier and OutputSupplier to be removed in June 2015 (they weren t @Beta apparently) and schedule the deprecated methods to be removed in 18 0  to give plenty of time for conversion \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58420238\n  
3280,     Make CaseFormat converterTo()  Enums stringConverter()  and Maps asConverter()\nreturn serializable converters with reasonable equals()  hashCode()  and\ntoString() representations \n\nWeakly deprecate Enums valueOfFunction() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58359600\n  
3281,     Import publicsuffix org s test data \nRun the tests as part of the tests of InternetDomainName topPrivateDomain()  suppressing those that fail \n(Plus miscellaneous no-op changes to the test )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58354304\n  
3282,     Open source Converter and friends in Guava 16 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58300985\n  
3283,     Improve some javadoc in Preconditions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58300765\n  
3284,     Rewrite type conversion to be acceptable to not only JDK8 but also Eclipse \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58300702\n  
3285,     Remove DI annotations from ServiceManager \n\nIf this breaks your server due to a missing @Inject constructor on ServiceManager  please install a com google common util concurrent ServiceModule in your injector to provide an identical binding \n\nTap global presubmit has been run with this change multiple times to try to identify all servers that would break when this constructor is deleted  all those injectors/servers have been fixed   However  if your injector does not have a tap test that would expose this issue  this cl may break your server   The fix is simple  please let me know and i can send advice/followup cls \n\nThis is the final step of a Large Scale Change ([ across [    See    google com[ document/d/1HxavPxi9152BGIhWhfpwXhrj2Roagq4rgj5f-PiBGl0/edit?usp=sharing for more information \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58291439\n  
3286,     Reformat file to 100 columns  except the class docs which will be completely\nreplaced by [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58284754\n  
3287,     Link to JDK7 Javadoc instead of JDK6 \nI m not sure where the JDK6 default is coming from  but this is sufficient to override it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58277660\n  
3288,     Simplify EqualsTester/EquivalenceTester/RelationshipTester by pulling the common assertions up into RelationshipTester \nThis reduces duplication and removes the need to rewrite exception messages \n\nWhile there  tweak a few other things  notably making itemReporter a final field \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58110002\n  
3289,     Stabilize the UncaughtExceptionHandlers against exceptions thrown in\nlogging  Quoting from the Java manual:  Any exception thrown by this\nmethod [uncaughtException  will be ignored by the Java Virtual Machine  \nThis seems slightly paranoid  but doesn\ t cost us much and avoids stupid\nnon-terminations in OOM situations or other logging failures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58086612\n  
3290,     Fix tiny javadoc syntax mistake \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58069740\n  
3291,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58069096\n  
3292,     Temporarily strip testCleanupOnReferenceCollection from Guava \nIt fails when run under Maven in a 64-bit JVM  probably because it tries to fill up the presumably larger heap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58051028\n  
3293,     Improve the example in FinalizableReferenceQueue  Previously it would always  log a message about how nobody called close  even if somebody did in fact call close \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=58001245\n  
3294,     Add an example to the javadoc for FinalizableReferenceQueue \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57993804\n  
3295,     Change TypeToken method() and TypeToken constructor() equals implementation such that List<Integer> get() is unequal to List<String> get() and List get()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57989174\n  
3296,     Clarify the performance improvements of Ordering sortedCopy over alternative implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57924772\n  
3297,     Attempt to fix AbstractInvocationHandler s equals implementation that may fail for JDK type proxies  after reserialization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57918440\n  
3298,     Ensure that Lists transform preserves IndexOutOfBoundsExceptions thrown by the transform function \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57916083\n  
3299,     the the -> the\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57915223\n  
3300,     Deprecate implementations of Predicate apply that should never be invoked directly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57908208\n  
3301,     Include the key in the recursive load exception  to make debugging easier \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57905649\n  
3302,     Multimap method javadocs: a few improvements  This doesn t by any means complete the job of perfecting all the docs in this interface \n\nI ve removed @param and @return clauses that add no value (which was all of them in the former case) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57822103\n  
3303,     Automated g4 rollback of changelist 57771110 \n\n*** Reason for rollback ***\n\nBreaks some tests who are depending on a specific toString() implementation \n\n*** Original change description ***\n\nChange toString() methods of returned Predicate instances to consistently use the  code-like  style \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57776968\n  
3304,     Change toString() methods of returned Predicate instances to consistently use the  code-like  style \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57771110\n  
3305,     Stop ignoring    sun com/bugdatabase/view_bug do?bug_id=6529795 in iterators now that the bug has been fixed in the JDK for a while \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57745078\n  
3306,     Make CombinedFuture stop logging identical exceptions multiple times\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57675851\n  
3307,     Rename common collect methods named removeIf  to prevent shadowing in JDK8 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57673689\n  
3308,     Rename Splitter spliterator to splittingIterator  to proactively prevent name shadowing with Java 8 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57671698\n  
3309,     Move GenerateTldPatterns to a new directory \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57607554\n  
3310,     Adding equalsIgnoreCase for ASCII only  This exists because there\ s generally no good reason to use String equalsIgnoreCase() with non-ASCII data (you should be using proper unicode normalization) \n\nIdeally we would migrate anyone calling\nequalsIgnoreCase( <ascii only>   x)\nequalsIgnoreCase(x   <ascii only> )\nto use this and provide an error prone check for things like:\nstring toLowerCase() equals( <lower case ascii> )\nstring toUpperCase() equals( <upper case ascii> )\n\nAlso provide benchmark (4x-5x faster than String equalsIgnoreCase()) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57357299\n  
3311,     Javac 8 clean-up \n\nJavac 8 places additional restrictions on generic type inference  and will\noccasionally report an inference error in situations where javac 7 would have\nbeen more permissive  This change allows compilation with javac 8 to succeed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57309921\n  
3312,     Deprecate implementations of Function apply that should never be invoked directly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57308600\n  
3313,     Rewrite the Tld Pattern generator  take 2 \nThis CL adds the possibility to reuse the pattern generator for other template files  Also now the generator keeps track about which tld patterns are from the official ICANN list  and which patterns are private \n(Roll forward of CL 56906311  which was rolled back in CL 56996630  with a fix for the multiple internal-only GWT modules in com google common net )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57258531\n  
3314,     Remove the ServiceManager constructor that used to be annotated with @Inject \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57132730\n  
3315,     Removed unnecessary static imports as they are pulled in through\njunit framework TestCase \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57073259\n  
3316,     Some documentation improvements for Ascii truncate \n\nAlso remove the overload that used       as a default truncation indicator because:\n- Some people might assume that it used no truncation indicator (  )\n- It\ s easier to understand when reading if the indicator is passed explicitly\n- No need to warn people about       not being what they want to use for some locales\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57067405\n  
3317,     Make the constructors on Source/Sink classes protected \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57057612\n  
3318,     Retrying changelist 56687027  RateLimiter: make the acquire() methods return the time slept (instead of void) \nRationale: allow clients to keep track of whether they are rate-limited; useful to update e g  Varz/Streamz \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57014398\n  
3319,     Inline checkNotNull call \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57011958\n  
3320,     Remove ByteBuffer usage in ConcatenatedHashFunction makeHash() method and use HashCode writeBytesTo instead \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=57005557\n  
3321,     Minor improvement to Ascii truncate implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56999832\n  
3322,     Add Ascii truncate methods  which truncate a string to a maximum length  appending a string such as       as an indicator if the resulting string was truncated \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56998047\n  
3323,     Rollback of changelist 56906311 \n\n*** Original change description ***\n\nRewrite the Tld Pattern generator \n\nThis CL adds the possibility to reuse the pattern generator for other template files  Also now the generator keeps track about which tld patterns are from the official ICANN list  and which patterns are private \n\n***\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56996630\n  
3324,     Don t use Preconditions checkArgument in primitives checkedCast methods  as it boxes for what should be a very fast method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56995761\n  
3325,     Minor changes to TearDownStack:\n- Changed logger to be private and removed explicit static reference \n- Removed t getMessage() in logging statement as this is duplicated\nwhen t is printed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56992155\n  
3326,     Belatedly add Justin s comments from an old email exchange \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56987273\n  
3327,     Specify that behavior is undefined for non-ASCII input \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56954960\n  
3328,     Remove checkNotNulls in MapJoiner that existed to satisfy NullPointerTester before it accepted UnsupportedOperationException\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56953505\n  
3329,     Add warning to CharMatcher DIGIT\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56937982\n  
3330,     Remove Stopwatch elapsedTime and elaspedMillis\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56909797\n  
3331,     Fix some typos in Equivalence \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56907469\n  
3332,     Rewrite the Tld Pattern generator \n\nThis CL adds the possibility to reuse the pattern generator for other template files  Also now the generator keeps track about which tld patterns are from the official ICANN list  and which patterns are private \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56906311\n  
3333,     Shuffling from internal-only changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56868933\n  
3334,     Update Mozilla public suffix list from 2013-06-06 to 2013-11-07 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56847666\n  
3335,     Mark a test that uses StringBuilder appendCodePoint as GwtIncompatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56553406\n  
3336,     Optimize Utf8 encodedLength even more  at the cost of increased complexity \nI continue to be surprised by the size of the branch-mispredict penalty \n\nI added tricky overflow logic to remove the need to use longs \n\nDiscussion on guava-discuss\n   google com/forum/#!msg/guava-discuss/cMMsMJ8SGD4/vjmklk0kenIJ\n\nBenchmark notes:\n\n(for client in vanilla Utf8 Utf-3; do g4d $client && g4 sync && [  run --java_cpu=k8 -- javatests/com/google/common/base:Utf8Benchmark -DmaxCodePoint=0x80 0x90 0x100 0x800 0x10000 --trials=2 --benchmark=lengthOfString lengthOfStringBuilder; done)\n   googleplex com/runs/607baae7-a24a-40b7-a3d0-6892c129f1fe # vanilla\n   googleplex com/runs/71ac4495-1d70-4265-ab58-23e61095ff27 # Utf8\n   googleplex com/runs/124a69f7-d87b-48c6-95d4-22cbbafe774d # Utf-3\n\n5x faster for 0x100 !\n\nSee [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56498817\n  
3337,     Add EvictingQueue remainingCapacity() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56474670\n  
3338,     Lots of minor cleanups and simplifications \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56467585\n  
3339,     Lazy-initialize all the things (in Hashing)  For some of these this may be overkill but we have reports of major <clinit> slowness on Android \n\n   google com/p/guava-libraries/issues/detail?id=1574\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56406847\n  
3340,     Make ImmutableClassToInstanceMap serializable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56232403\n  
3341,     Use CollectPreconditions checkNonnegative more widely in common collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=56097311\n  
3342,     Fix incorrect reference to in javadoc  Iterator should be iterable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55950925\n  
3343,     Remove beans xml from Guava \n\nIt no longer serves any purpose now that there are no JSR-330 annotations in\nGuava  and it was a problem to begin with \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55883109\n  
3344,     Remove the jsr-330 annotations from ServiceManager and remove javax inject from\nthe guava pom xml since this was the only use \n\nSee    google com/p/guava-libraries/issues/detail?id=1433 for the\nhilariously depressing rationale \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55868332\n  
3345,     Fixed incorrect placement of   in Iterables contains method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55810948\n  
3346,     Remove deprecated methods that had been hanging around without specified removal dates / Guava versions:\n- ImmutableSet of(E[ )  which has been replaced by copyOf(E[ ) and which was removed from the  plain Java  code long ago but has hung around in the GWT version \n- InternetDomainName fromLenient() and name()  which have been replaced by from() and toString() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55803460\n  
3347,     s/delimeter/separator/  We converged on  separator  a while ago  but missed fixing this one because it\ s misspelled \n\nA  delimeter  is a unit measuring one\ s current distance from sandwiches  I am hereby not allowed to use that joke again for at least five years \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55638928\n  
3348,     Warnings-related cleanup to c g c base and its tests  Ruthlessly standardizing the comment we use so these can potentially be replaced with string constants one day  In some cases I have actually removed unjustified suppressions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55637082\n  
3349,     Migrate from deprecated InternetDomainName name() to equivalent toString() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55556636\n  
3350,     Ensure that failures get logged before transitionService is called \n\nSee the bug for context  but the tldr is that a server was exiting in response to startup failure and this happened before the root cause was logged \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55509012\n  
3351,     Fix Equivalence#wrap documentation to match the appropriate usage of the method (and the javadoc on the Wrapper class)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55467018\n  
3352,     Explicitly test that BREAKING_WHITESPACE is a subset of WHITESPACE \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55422871\n  
3353,     Improve mod javadoc even more \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55375877\n  
3354,     Improve the javadoc for mod \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55370624\n  
3355,     Fix a flaky test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55362090\n  
3356,     Add benchmarks for Utf8 length \n\nThe biggest surprise for me was seeing how much performance of\nthis micro-benchmark is dominated by branch-prediction\npenalty - 0x100 is twice as slow as either 0x90 or 0x800 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55358109\n  
3357,     Micro-optimize  especially for runs of ASCII \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=55130107\n  
3358,     Mark CartesianList as RandomAccess \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=54897081\n  
3359,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=54791037\n  
3360,     Remove the use of deprecated Service methods from the Abstract*Service test cases \n\nThere are hardly any callers left! In fact i think these tests account for >50% of remaining callers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=54784808\n  
3361,     Fixed the javadoc of RangeSet \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=54694622\n  
3362,     Instead of just tracking our state via 2 integers in ServiceManager State track all current service states via a Multimap<State  Service> \n\nThis enables some features \n\n1  servicesByState() returns a consistent snapshot\n2  TimeoutExceptions report on the services that caused the timeout\n3  IllegalStateExceptions from awaitHealthy report on the services that are not running\n\nAlso  this slightly simplifies the relationships between our 3 objects (ServiceListener  ServiceManager State and ServiceManager) since ServiceManager no longer holds a reference to the Listeners directly \n\nThis should also fix b/10734437 because it simplifies the way that the stopwatches are handled and we also use a weak reference between the Listeners and ServiceManagerState to ensure that if the service manager is only partially constructed the listeners will become no-ops \n\nI am not super tied to using the weak reference to solve this problem but it seems weird to keep updating this state object when there are no references to it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=54239479\n  
3363,     And let s rename Utf8 length() one more time  this time to Utf8 encodedLength() \nFrom here on out we really should rename this method no more than once a week \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=54213513\n  
3364,     Port protobuf s UtfDecodingBenchmark for Utf8 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=54140446\n  
3365,     Document compare() methods to point out their JDK equivalents \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53930986\n  
3366,     Rename methods in the new Utf8 class  rewrite some javadoc  and a few very small code improvements \n\nutf8Length -> length\nisValidUtf8 -> isWellFormed\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53921068\n  
3367,     Delete ForwardingService   it has been deprecated for two guava releases now so i think it is time to drive the stake through the heart of this beast \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53861773\n  
3368,     Fix failure in MapsTest with coming-soon jdk \nI couldn t restrain myself from renaming sizeOf \n\njdk_into_perforce /auto/buildstaticnorep/projects/java/sun-jdk/linux-i586/jdk7-google-trunk-latest\n[  test --host_javabase=//testjdk --javabase=//testjdk --java_langtools=//testjdk:langtools --javac_bootclasspath=//testjdk:langtools-bootclasspath //javatests/com/google/common/collect:SmallTests\n[ \n1) testNewHashMapWithExpectedSize_wontGrow(com google common collect MapsTest)junit framework AssertionFailedError: expected:<0> but was:<1>\nat com google common collect MapsTest testNewHashMapWithExpectedSize_wontGrow(MapsTest java:124)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53835727\n  
3369,     Added more javadoc to AbstractPackageSanityTests for Guava bug 1535\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53743498\n  
3370,     Fix low-hanging rawtypes warnings in javatests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53733108\n  
3371,     Remove or hide APIs scheduled for deletion in Guava 16 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53732502\n  
3372,     Clone c g protobuf Utf8 to c g common io Utf8 and add new utf8Length(String) static method  Callers will be migrated in future changes  It is currently unknown whether protobuf itself will be able to depend on Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53696008\n  
3373,     Add a couple @since tags for recent additions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53671037\n  
3374,     Add function to return the number of boolean values that are true from a variable length boolean input \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53643457\n  
3375,     Include common xml s package-info in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53568852\n  
3376,     Update ChainingListenableFuture docs to explain why the UndeclaredThrowableException special case exists and why it is no longer necessary \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53489160\n  
3377,     Move htmlEscaper to the top \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53344665\n  
3378,     Followup javadoc changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53298273\n  
3379,     Make it possible to use class path to retrieve non-top level classes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53297583\n  
3380,     Ensure that AbstractIterator does not hold onto its next reference after it has been returned by next() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53283705\n  
3381,     Verify that listeningDecorator does not decorate simple tasks submitted with execute():\n   com/a/19009309/28465\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53264107\n  
3382,     Optimize Ascii#toUpperCase and Ascii#toLowerCase  Don t recreate a String if the input String is already upper-cased/lower-cased \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=53066382\n  
3383,     Fix argument order in Futures sample code \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52670595\n  
3384,     Make EvictingQueue serializable \nSee    google com/p/guava-libraries/issues/detail?id=1537\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52532527\n  
3385,     Change all the reference to event handler to event subscriber \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52404442\n  
3386,     Fix medium-hanging rawtypes warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52391647\n  
3387,     Add @since tags and nitpick Javadoc formatting from CL 52250001 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52286822\n  
3388,     Introduce the SubscriberExceptionHandler \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52250001\n  
3389,     Change PathByteSource in MoreFiles to not use Files readAllBytes() for its read() method  as Files readAllBytes() creates 2 unnecessary copies of the byte array the file is read into in the normal case where the file doesn t change size \n\nIn the process of doing that  a few other changes:\n- Change both PathByteSource and FileByteSource to delegate to a new package-private method ByteStreams toByteArray(InputStream  int) which handles reading to a byte array when you have an expected size \n- Also change both implementations to get the expected size for the file from the size() method on FileChannel/SeekableByteChannel instead of reading the size attribute before opening the stream \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52120076\n  
3390,     Use @link and @linkplain in Objects firstNonNull() javadocs \n\nSee    google com/p/guava-libraries/issues/detail?id=1526\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=52109962\n  
3391,     Update Guava pom xml files to version 16 0-SNAPSHOT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51967518\n  
3392,     Make it obvious that RateLimiter can handle < 1 qps \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51961102\n  
3393,     Remove compare(boolean  boolean)  which has been renamed to compareFalseFirst \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51892007\n  
3394,     Avoid array allocation in HashCode writeToBytes() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51848312\n  
3395,     Second guess CL 43477677 s de-@Beta-fication of allAsList and successfulAsList \nThere are still issues to settle:    google com/p/guava-libraries/issues/detail?id=1519\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51620880\n  
3396,     Change ByteSource concat and CharSource concat to not blow up on infinite Iterables  This also helps users whose Iterables actually eagerly load data to create sources when iterated  though ideally they shouldn\ t be doing that \n\nAlso fix some javadoc formatting and suppress a couple  possible heap pollution  warnings \n\nSee Guava issue:    google com/p/guava-libraries/issues/detail?id=1516\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51552427\n  
3397,     Bring @GwtCompatible annotations into line with reality \nFuture CL 51540044 will add tests to verify this automatically \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51547670\n  
3398,     Miscellaneous cleanups:\n- Add spaces between keywords and parentheses (e g    for(  ->  for ( )  fixing up some indentation and missing braces along the way \n- Declare Platform classes as |final|  and add private constructors \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51540900\n  
3399,     Adding missing dependency \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51434507\n  
3400,     Replace CharMatcher WHITESPACE by a much faster implementation as it doesn t deserve to be slowed down by division \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51342342\n  
3401,     mark AbstractService startAndWait()/stopAndWait() as non-final due to test breakages\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51323441\n  
3402,     Fix broken test name that prevents test from running \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51318709\n  
3403,     Mark the new Service methods as final in AbstractService \nAbstractExecutionThreadService  AbstractIdleService and\nAbstractScheduledService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51305735\n  
3404,     Make WrappingScheduledExecutorService s constructor protected  rather than package-private  (This is consistent with WrappingExecutorService )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51273229\n  
3405,     Make the supersource for GWT version of com google common collect Java 7 compatible \n\nThe non GWT version of the collection classes were made Java 7 compatible in CL 13495337 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51266213\n  
3406,     Fix documentation for c g common collect Maps transform Values Entries  \n\nIt used to refer to methods that no longer exist \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51253115\n  
3407,     This CL fixes usage of equality operators for subclasses of java lang Number  Comparing numeric objects using  ==  tests for reference equality  when most likely value equality is intended  This an automated fix using error-prone \n\nWe intend to make this a compilation error in Google\ s Java compiler  so it is necessary to fix existing occurrences first to avoid breaking builds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51251971\n  
3408,     Add DoubleMath mean  (Includes a few drive-by lint fixes on DoubleMathTest )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51173415\n  
3409,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51147719\n  
3410,     Fix TreeTraverser s class javadoc to the correct result for a breadth-first traversal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51145407\n  
3411,     In the FinalizableReferenceQueue code  remove the unnecessary nested exception\nclass Finalizer ShutDown  which could cause problems if the URL for the\nclassfile of Finalizer was not related in the obvious way to the URL for the\nclassfile of Finalizer ShutDown  This is Guava issue 1505\n<   google com/p/guava-libraries/issues/detail?id=1505> reported by\nJesse Glick <jglick@cloudbees com>  and the fix is based on the patch he linked\nto there \n\nAlso add a test to ensure that Finalizer doesn t acquire other nested classes\nin the future \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51090847\n  
3412,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=51059733\n  
3413,     Update Mozilla PSL \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50980142\n  
3414,     Add  text/tab-separated-values; charset=utf-8  as constant MediaType TSV_UTF_8\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50964188\n  
3415,     Ensure that CharMatcher precomputed() doesn t change description \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50957795\n  
3416,     Fix a wrong description in CharMatcher \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50956932\n  
3417,     Add documentation that SetMultimap and mutable values don t get along  as per Guava issue 357      google com/p/guava-libraries/issues/detail?id=357\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50924610\n  
3418,     Small simplifications to LocalCache to extend AbstractReferenceEntry where possible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50778090\n  
3419,     Actually fix tearDown handling that was made worse in CL 50062431 \n- The behavior before that CL was to ignore exceptions thrown by tearDown \n- The behavior currently is to exceptions thrown by tearDown unless there was another exception thrown by the test itself  in which case we overwrite the test s exception with the tearDown s exception \n- The new behavior is to respect the exception from tearDown unless an exception from the test itself exists to override it  This matches the JUnit behavior  Really \n\nThis time  I ve added (internal-only) tests \nI also improved some error logging in the tests while I was debugging \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50778046\n  
3420,     This CL fixes invalid self-referential collection operations (c addAll(c)  c removeAll(c)  c retainAll(c)  and c containsAll(c))  Such cases are either no-ops  undefined behavior  or unnecessarily complicated  and often reveal bugs  This an automated fix using error-prone \n\nWe intend to make this a compilation error in Google s Java compiler  so it is necessary to fix existing occurrences first to avoid breaking builds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50739321\n  
3421,     Fix a race condition in\nAbstractServiceTest#testListenerDoesntDeadlockOnStopAndWaitFromTerminated \n\nThe race condition is triggered due to a slight difference in the behavior of\nstartAsync() awaitRunning() vs  startAndWait()\n\nstartAndWait() would return RUNNING even if the service in question was\nalready TERMINATED whereas awaitRunning() will throw if the state is\nTERMINATED when it is called \n\nThe service in question here very quickly transitions from\nSTARTING->RUNNING->TERMINATED so depending on thread timing awaitRunning\ncould observe the service as RUNNING or as TERMINATED  the fix is to have the\nservice shutdown be triggered by a call to stop rather than happening\nautomatically \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50639385\n  
3422,     Fix division bug in HashCode writeBytesTo()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50635321\n  
3423,     Service rewrite!  Add new methods to service so that we can move users away from the confusing ListenableFuture based methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50634823\n  
3424,     Move hashCode() implementation into abstract parent class instead of\nsubclasses \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50632699\n  
3425,     Extract CollectPreconditions with some common checks \nUse those checks more widely  especially checkRemove \nMore importantly  use checkEntryNotNull to include the key and value in  null key/value  NPEs of ImmutableMultimap and GWT-only ImmutableMap/ImmutableBiMap \n(Non-GWT ImmutableMap/ImmutableBiMap already got this right )\nPlus  make ImmutableMap copyOf(enumMap) and ImmutableMultimap put(Entry) resilient to entries whose keys or values become null midway through construction \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50631776\n  
3426,     MOE insert public for com google common hash HashCodes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50582094\n  
3427,     Fix small LocalCacheTest bug\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50580565\n  
3428,     Add fragment escaper \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50515561\n  
3429,     Update javadocs for HashCode fromString() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50463690\n  
3430,     Add HashCode fromString(String) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50449901\n  
3431,     Copy static factory methods from HashCodes to HashCode \nDeprecate the old methods in HashCodes \nUpdate usages in com/google/common/hash to use new methods \nMove the tests from HashCodesTest to HashCodeTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50448177\n  
3432,     Add test demonstrating perhaps incorrect behavior of\nHashCode hashCode() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50390060\n  
3433,     Small javadoc tweaks to Stopwatch based on external Guava issue #1492 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50384056\n  
3434,     Elements of Sets powerSet should support contains() in O(1) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50069151\n  
3435,     Javadoc improvements:\n- Minimize the importance of  short circuiting  in ComparisonChain \n- Fix copypasta ListenableFuture doc to refer to  this Future  instead of  the input Future  \n- Specify the exit status used by UncaughtExceptionHandlers systemExit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50066092\n  
3436,     Don t ignore exceptions thrown by tearDown() (unless they would mask exceptions from the test itself) \nThis puts our generated GWT tests in line with what JUnit normally does \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50062431\n  
3437,     Tiny simplifications to HashBiMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=50050765\n  
3438,     Make generic type <E extends Comparable> instead of <E> for priority\nqueues \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49949075\n  
3439,     Added constants for HPKP (public key pinning) headers \n\nSee    ietf org/html/draft-evans-palmer-key-pinning-08\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49911987\n  
3440,     Added constant for Strict-Transport-Security header as defined in    ietf org/html/rfc6797#section-6 1 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49905943\n  
3441,     Fix BaseEncodingTest#testBase16UpperCaseIsNoOp to actually test what it s meant to test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49905873\n  
3442,     Overhaul of the Queues javadocs on the static factory methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49900450\n  
3443,     Shuffling from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49835144\n  
3444,     Change AbstractListeningExecutorService to extend AbstractExecutorService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49779273\n  
3445,     Mark some of the worst-performing tests on GWT as @GwtIncompatible  to speed up tests slightly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49627900\n  
3446,     Provide JDK sources when generating Javadoc \nThis enables Javadoc to inherit documentation from JDK supertypes \n   google com/p/guava-libraries/issues/detail?id=1181\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49615231\n  
3447,     Add publicApiOnly (shuffling resulting from internal-only change) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49600551\n  
3448,     Give a removal date for PrimitiveSink putString(CS) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49578904\n  
3449,     Add some missing @since 15 0 tags \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49577247\n  
3450,     Add DiscreteDomain bigIntegers()  which was in fact already implemented and tested \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49576220\n  
3451,     A few small Javadoc changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49575019\n  
3452,     Removing unnecessary index bounds check for lazy striped when\nall bits of the hashcode are to be used \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49571072\n  
3453,     Delete DiscreteDomains for Guava 15 \nRemove erroneous @since 15 0 on deprecated method InternetDomainName name() \nUnstrip a couple of classes that are now public in collect/package-info java \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49570015\n  
3454,     Note that arrays get no special treatment in Objects hashCode javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49561753\n  
3455,     Fix a couple of issues with JDK7 javadoc style by using a slightly customized version of the default stylesheet in Guava  Specific issues this fixes:\n\n- Huge text with a slightly misaligned first line in <pre> @code  blocks in Guava javadoc (for example  see    guava-libraries googlecode com/git-history/v14 0 1/javadoc/com/google/common/io/Closer html)  Both <pre> and <code> were increasing the font size  This changes the <code> block to inherit the font-size of the <pre> block \n- No blank line before <pre> blocks in class-level javadoc  A CSS class rule for a div surrounding the class level javadoc set <pre> s margin-top to 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49515875\n  
3456,     Add Queues synchronizedDeque(Deque<E>) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49514053\n  
3457,     - Move close of <pre> @code  blocks (i e    </pre> ) that are on a separate line up to the last line of the block contents  eliminating an extra blank line between the pre block and what follows \n- Change a number of <pre> blocks to <pre> @code  blocks \n- Remove @Override from methods inside several <pre> @code  blocks  When they\ re preceded by a    they cause javadoc to screw up by thinking they\ re an invalid javadoc tag  even though it doesn\ t interpret tags inside  @code  blocks    \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49513507\n  
3458,     In com/google/common javadoc  add explicit <p> before paragraph text following other block level closing tags (</h*>  </pre>  </table>)  Without the <p>  a blank line may not be added between the text and block level elements such as <ul> that follows it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49494081\n  
3459,     Add explicit <p> at the start of paragraphs following an </ol> or </ul> tag in com/google/common javadoc  JDK7 javadoc without the <p> does not show a blank line after the list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49461463\n  
3460,     Add isEmpty() to ByteSource and CharSource \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49444816\n  
3461,     Random javadoc spruces for Maps asMap/toMap and Ordering \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49401524\n  
3462,     Fix a small typo in Multimaps transformValues Javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49382729\n  
3463,     Miscellaneous cleanups \n- Remove  final  from  static final  methods  as it has little meaning there \n- In  Expired entries may be counted in Cache size    change  in  to  by  to match similar change to MapMaker \n- Remove line-starting @ so that AbstractInvocationHandler code snippet isn\ t truncated \n- Insert some spaces after casts in PopulatedCachesTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49192494\n  
3464,     Detect symbolic link cycles in ClassPath\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49168430\n  
3465,     Add a beans xml file disabling CDI bean discovery to META-INF/ in the guava jar  See guava issue:    google com/p/guava-libraries/issues/detail?id=1433\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49166428\n  
3466,     Clarify the behavior of Map size() in a MapMaker-built Map with weak or soft references  borrowing phrasing from CacheBuilder \n\nMotivated by    com/questions/17559629/why-does-guavas-mapmaker-report-an-incorrect-size-for-my-map-when-using-weak-ke\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49138369\n  
3467,     Small formatting change from internal change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49112717\n  
3468,     Strip out weightedConsistentHash reference from public JavaDoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49100661\n  
3469,     Open source Hashing#sipHash24() and Hashing#sipHash24(long  long) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49085958\n  
3470,     Verify that the RegularImmutableAsList constructor doesn t check for nulls  to help verify that ImmutableSet asList() is O(1) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=49062366\n  
3471,     Fix some formatting in Closer javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48904048\n  
3472,     Redo: Use the context class loader in Resources getResource(String)  instead of\nthe class loader of the Resources class  Continue to use that loader if the\ncontext class loader is null  though \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48888869\n  
3473,     Replicate CL 47862236 s clarification to sameThreadExecutor-using methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48838767\n  
3474,     Some additional Multimap doc clarifications in re: Guava issue 1458:\n\n   google com/p/guava-libraries/issues/detail?id=1458\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48811159\n  
3475,     Change MediaType to add constants to the known types map as they re created  eliminating the need to explicitly add them all after they re created \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48801732\n  
3476,     Include failing parameter index in exception - useful for inherited classes where it s\nnon-obvious which parameter is failing null check \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48801694\n  
3477,     Add test for roundtripping HashCode#toString \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48688256\n  
3478,     Fix low-hanging rawtypes warnings for common collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48684234\n  
3479,     Score one for javac7 s rawtypes warning: surely we just overlooked the proper generics on these signatures?\n\nTogether these have only one outside caller  which looks safe \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48653001\n  
3480,     Add EPUB MediaType\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48636026\n  
3481,     Re-document goodFastHash  with the (hopefully) appropriate amount of scaretext \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48602073\n  
3482,     Get rid of usages of TestUtil from common io test classes and open source most of FilesTest \n\nThis includes several changes:\n\n1  Replacing the use of TestUtil getSrcDir() to get at resources in the testdata package as Files  This is handled by creating a File from the URL path directly if it\ s a file:// URL and copying the resources to a temp dir on demand if it\ s not \n2  Replacing the use of TestUtil getTmpDirFile() with a temp dir created in a manner similar to Files createTempDir()  Also  IoTestCase\ s tearDown() should ensure that any temp dirs/files created during tests are deleted afterwards \n3  Changing some file paths in FilesTest to be built dynamically from their parts so as to hopefully work correctly on Windows as well as Unix systems  For example  instead of  /foo/bar   file(root()   foo    bar ) \n4  Fixing a few things with the testdata resources in the BUILD file \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48592858\n  
3483,     Delete AbstractSetMultimapTest  whose remaining tests are all covered by SetMultimapTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48590510\n  
3484,     The fact that ClassPath does a lot of I/O in its creation makes the two added methods unnecessarily expensive   They still make sense  but perhaps not on this class \n\nRollback: Update ClassPath to expose the URIs that comprise the classpath   Also add an asClassPathString method that lets you quickly go from ClassLoader to a classpath suitable for Java s -classpath flag \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48583016\n  
3485,     Migrate the remaining Multimap values() tests from AbstractMultimap to MultimapTestSuiteBuilder  and delete AbstractMultimapTest  which no longer contains any tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48537940\n  
3486,     Update open-source Guava to Truth 0 13  and tighten up tests from allOf->exactly and allFrom->exactlyAs \n\nI started with an unconditional textual substitution \nThen I went back and reverted false positives: EnumSet allOf  EnumFilter allOf  Matchers allOf  IterablesTest testSkip_allOf* \nThen I reverted any tests that failed (all of which looked like they ought indeed to stay as allOf/allFrom )\nI gave all the remaining automated changes a sanity check  and they all passed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48536664\n  
3487,     Update ClassPath to expose the URIs that comprise the classpath   Also add an asClassPathString method that lets you quickly go from ClassLoader to a classpath suitable for Java s -classpath flag \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48519216\n  
3488,     Remove com google common collect Ranges (the static methods have been\nmoved to com google common collect Range) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48509690\n  
3489,     Improve an error message \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48472965\n  
3490,     Add a mechanism to ForwardingWrapperTester for when the forwarded interface contains methods that are defined to  return this    In this case straight delegation doesn t work since the wrapped methods should return the forwarding object and not the delegate object \n\nThe strategy is to detect this situation by inspecting the return value of the forwarded method and if it is assignable to the interface type then we allow the forwarding method to return either the return value of the delegate or the wrapper itself \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48461760\n  
3491,     Remove JUnit4 @Test annotations from JUnit 3 tests  where they re no-ops \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48455067\n  
3492,     Remove deprecated appendTo(Object&Iterable&Iterator) overloads \nThese methods existed only to support classes that implement both Iterator and Iterable \nIf you need to add such a call in the future  cast the argument explicitly to Iterator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48293496\n  
3493,     Typo fix \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48205733\n  
3494,     Change MultiInputStream and MultiReader to work with ByteSource and CharSource rather than InputSuppliers  Change Byte/CharSource#concat to no longer delegate to Byte/CharStreams#join and change join to delegate to concat instead \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48146409\n  
3495,     Fix rawtypes (and some unchecked) warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48127404\n  
3496,     Reduce the visibility of ForwardingService internally \n\nForwardingService has been deprecated for a while  but I\ m not sure if it\nsafe to delete from guava yet ( @Beta means never having to say you\ re sorry ?)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48122716\n  
3497,     Adding a helper class for adding Content Security Policy headers to a HttpServletResponse \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48037766\n  
3498,     Create sameThreadScheduledExecutor() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48036849\n  
3499,     Add @since for KEY_ARCHIVE \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=48031735\n  
3500,     Annotate FutureCallback onSuccess parameter as @Nullable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47989392\n  
3501,     Annotate safeContains and safeRemove parameter as @Nullable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47980950\n  
3502,     Add KEY_ARCHIVE \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47874734\n  
3503,     Clarify statement in addListener documentation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47862236\n  
3504,     Change x == x to equivalent isNaN() in preparation for making it a compile error \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47811494\n  
3505,     Delete AbstractListMultimapTest  which no longer has any tests not already part of ListMultimapTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47674443\n  
3506,     Delete AbstractCollectionTest  which is now only being used in multiset implementation tests  and which has no remaining tests that aren t already part of MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47666389\n  
3507,     Some internal changes in RateLimiter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47663162\n  
3508,     Migrate Synchronized  Navigable SetTest to the SetTestSuiteBuilders and off of AbstractCollectionTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47662426\n  
3509,     Kill AbstractMultisetTest   All its remaining tests are tested elsewhere by MultisetTestSuiteBuilder \n\n(In the process  we kill off several other implementation-specific tests that are still just duplicating MultisetTestSuiteBuilder tests )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47557844\n  
3510,     Migrate remaining Multiset elementSet() tests to MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47554296\n  
3511,     Migrate the remaining Multiset entrySet() tests from AbstractMultisetTest to MultisetEntrySetTester  fixing a few genuine bugs encountered in the process \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47552716\n  
3512,     Add MultisetEqualsTester to MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47550101\n  
3513,     Added support for days  hours  and minutes to chooseUnit and abbreviate\nmethods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47548131\n  
3514,     Finish migrating Multiset remove() (and removeAll  and retainAll) tests to MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47547148\n  
3515,     Remove tests of Multiset entrySet() from AbstractMultisetTest that just duplicate tests from the entrySet() SetTestSuite generated by MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47545853\n  
3516,     Remove tests of Multiset elementSet() that are redundant with the SetTestSuite generated for Multiset elementSet() by MultisetTestSuiteBuilder   (Some tests will still need to be migrated )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47543353\n  
3517,     Migrate tests for Multiset add from AbstractMultimapTest to MultisetAddTester  split off from MultisetWriteTester as part of MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47542388\n  
3518,     Remove redundant Multiset contains() tests from AbstractMultisetTest  which are already covered in CollectionContainsTester as part of MultisetTestSuiteBuilder  and add a couple more multiset-specific tests \n\nIn the process  fix a genuine bug where RegularImmutableSortedSet containsAll assumed that a nonempty sorted collection with the same comparator didn t have multiples of an element \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47540950\n  
3519,     Remove Multiset iterator() tests redundant with the CollectionIteratorTester tests from MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47509316\n  
3520,     Migrate Multiset remove() tests from AbstractMultisetTest to MultisetRemoveTester  split off from MultisetWritesTester  as part of the MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47508469\n  
3521,     Delete Multiset count() tests from AbstractMultisetTest that are redundant with MultisetCountTester in MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47507664\n  
3522,     Optimize UnsignedBytes lexicographicalComparator() by using Long numberOfTrailingZeros instead of an explicit binary search to identify the first byte where the two inputs differ \n\nReported externally:    google com/p/guava-libraries/issues/detail?id=1435\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47391350\n  
3523,     Use a radix trie approach to serializing TLDs for TldPatterns java to minimize code size \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47356985\n  
3524,     Clean up most usages of Input/OutputSupplier in tests in common io \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47348463\n  
3525,     Delete tests from AbstractListMultimapTest that duplicate ListTestSuiteBuilder tests automatically generated by MultimapTestSuiteBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47341744\n  
3526,     Remove tests from AbstractSetMultimapTest redundant with tests from SetMultimapPut(All)Tester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47338686\n  
3527,     Use assertNotSame(x  y) in place of assertTrue(x != y)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47307058\n  
3528,     Add FileBackedOutputStream asByteSource()  a ByteSource-returning method to replace getSupplier() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47293826\n  
3529,     Deprecate BaseEncoding methods that use Input/OutputSupplier and hide them internally \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47292279\n  
3530,     Add CollectionFeature SUPPORTS_ITERATOR_REMOVE to MapTestSuiteBuilder for MutableTypeToInstanceMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47287341\n  
3531,     Migrate tests for Multimap keySet() from AbstractMultimapTest to MultimapTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47283976\n  
3532,     Migrate Caliper benchmarks from the old  superclass-based API to the new  annotation-based API \n\nMore information: LSC: Caliper Benchmark API migration (   google com[ document/d/15KUhmIsTVn0EA9u2S5es4Otn5k3Lo_ZHhkDsT9LYRKc)\n\nATTENTION REVIEWERS: This is a (mostly) scripted  behavior-preserving change  It should have the following effect:\n- No longer extend c g caliper legacy Benchmark\n- setUp method overrides are now annotated with @BeforeExperiment\n- tearDown method overrides are now annotated with @AfterExperiment\n- time methods are now annotated with @Benchmark and the time prefix has been removed\n\nTested:\nran test_all_benchmarks\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47282574\n  
3533,     Clean up the last Multimap entries() test in AbstractMultimapTest\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47274767\n  
3534,     Migrate tests for Multimap keys() from AbstractMultimapTest to MultimapTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47273152\n  
3535,     Instead of suppressing iterator() remove() tests  make iterator remove() support an independent property of a collection implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47238893\n  
3536,     Remove no-op main methods from Caliper benchmarks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47194759\n  
3537,     Migrate AbstractMultimapTest tests for Multimap asMap() to much more exhaustive and detailed MultimapTestSuiteBuilder testers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47111812\n  
3538,     Preserve SortedSet-ness of value collections across serialization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47106820\n  
3539,     Make sure all implementations being tested by SortedMapInterfaceTest are also tested with SortedMapTestSuiteBuilders  and remove tests from SMIT that are redundant with SortedMapNavigationTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47103324\n  
3540,     Somewhat trivial cleanups:\n- Use Sets removeAllImpl in Maps EntrySet removeAll \n- Work around bogus unchecked warning:  required: Iterator<?> / found: I \n- Remove derived size field from ReverseImmutableList \n- Override builder() in ContiguousSet to supply more appropriate Javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47102093\n  
3541,     Migrate AbstractMultimapTest tests for Multimap entries() to a MultimapTestSuiteBuilder tester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47101119\n  
3542,     Add MapTestSuiteBuilder tests for MapConstraints constrainedMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47100566\n  
3543,     Add TestSuiteBuilder tests for Maps transform*\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47098965\n  
3544,     Trivial cleanups:\n- Remove stray paren in Ordering Javadoc \n- Fix runnable/executor confusion in ExecutionQueue Javadoc \n- Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name  the erased type Object  Fix a few @see errors while there \n- Remove  This class is GWT compatible  comments  which have been redundant since we began using @GwtCompatible in testlib code \n-  unreasonable slow  =>  unreasonably slow \n- Fix continued-line indent in Invokable \n- Insert spaces in cast expressions \n- Add missing spaces before open braces \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47059317\n  
3545,     Add application/protobuf mime type  from\n   ietf org/html/draft-rfernando-protocol-buffers-00\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47014458\n  
3546,     Delete completely unused ConcurrentMapInterfaceTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47004919\n  
3547,     Guava issue 1423: fix TreeMultimap asMap() headMap to properly register inclusivity argument\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=47004337\n  
3548,     Remove tests for Multimap get from AbstractMultimapTest that duplicate tests in MultimapTestSuiteBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46990147\n  
3549,     Add test suites for Multimap equals to MultimapTestSuiteBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46989151\n  
3550,     Migrate Multimap clear() tests (and tests to clear Multimap views) to MultimapClearTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46987144\n  
3551,     Remove tests from AbstractMultimapTest that overlap with MultimapRemoveTester and MultimapRemoveAllTester in MultimapTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46986379\n  
3552,     Add MapToStringTester and MultimapToStringTester  and fix ForwardingNavigableMap StandardDescendingMap toString() to correctly iterate in descending order \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46952541\n  
3553,     Remove get() subList() tests from AbstractListMultimapTest that are redundant with ListSubListTester in the derived test suite for ListMultimapTestSuiteBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46951757\n  
3554,     Add explicit type parameters in FilteredMultimapValues to make JDK6 happy \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46951071\n  
3555,     Delete Multimap contains Key Value  tests from AbstractMultimapTest that are redundant with MultimapContains Key Value Tester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46951020\n  
3556,     Remove tests from AbstractListMultimapTest that are redundant with ListMultimapPutTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46950561\n  
3557,     Delete tests from AbstractMultimapTest of the multimap views in isolation  that is  tests that initialize the multimap  get the view  and don t reference the multimap afterwards \n\nThese tests are redundant with the derived TestSuiteBuilders in MultimapTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46949401\n  
3558,     Migrate all remaining Multimap replaceValues tests from AbstractMultimapTest to MultimapReplaceAllTester\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46948091\n  
3559,     Add tester to MultimapTestSuiteBuilder for Multimap putAll(Multimap)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46946989\n  
3560,     Replace Multimap putAll(K  Iterable) tests from AbstractMultimapTest with more exhaustive tests in MultimapPutIterableTester\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46945862\n  
3561,     Add the TestSuiteBuilder for Multimap values()  and fix Multimaps filterXXX to pass those tests properly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46945446\n  
3562,     Remove tests of Multimap get() from AbstractMultimapTest that are duplicated in MultimapGetTester\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46942143\n  
3563,     Delete tests from AbstractMultimapTest that duplicate tests in MultimapSizeTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46940075\n  
3564,     Add Multimaps asMap() helpers that return a Map with more\nstrongly-typed values than ListMultimap#asMap()  etc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46939830\n  
3565,     Add tests to the asMap() views of ListMultimap  SetMultimap  and SortedSetMultimap to verify that the asMap() values() are of the correct type (List  Set  SortedSet) at runtime \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46939057\n  
3566,     Change return type of openBufferedStream() on ByteSource  ByteSink and CharSink to the base stream type rather than the Buffered* type to allow implementations to avoid unnecessarily adding additional buffering to streams that do not benefit from it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46926342\n  
3567,     Reshuffling from internal-only changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46885542\n  
3568,     Shuffling from internal-only changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46844311\n  
3569,     Give removal dates for Stopwatch ctors \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46791249\n  
3570,     Improve error messaging in EqualsTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46753546\n  
3571,     Implement Object#equals() and #hashCode() for stateful HashFunctions \nAdd tests to verify the behavior \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46751376\n  
3572,     Override ImmutableBiMap containsValue() to use the O(1) implementation  as per Guava bug 1416 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46744049\n  
3573,     Give removal dates (releases) for HashFunction#hashString(CS) and\nHasher#putString(CS) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46638784\n  
3574,     Add reference to Funnels from Funnel javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46629147\n  
3575,     Change SynchronizedEventHandler to use a synchronized block rather than just synchronizing the method  Since the method body does nothing but call the super method  it (and its synchronization) was apparently being optimized away under a certain JVM:    google com/p/guava-libraries/issues/detail?id=1403\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46627764\n  
3576,     Use com google caliper legacy Benchmark instead of com google caliper Benchmark  This CL facilitates the move from a superclass-based API to an annotation-based API  Benchmark and legacy Benchmark are equivalent classes  so this is NOT a behavior changing CL \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46556497\n  
3577,     fixed NPE caused by inaccessible directory  as reported by Guava issue 1407 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46478011\n  
3578,     Fix the logging in Futures CombinedFuture such that:\n\n1  Errors are always logged (even if they were put into the output future)\n2  If allMustSucceed is true then all failures after the first are logged\n3  if allMustSucceed is false then all failures are not logged \n\nIn the prior implementation (except for in rare races) exceptions were only logged if allMustSucceed was false \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46470009\n  
3579,     Some whitespace edits\n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46404300\n  
3580,     Update Mozilla PSL \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46368166\n  
3581,     Add some missing dependencies in a GWT module \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46363258\n  
3582,     Add Funnels#unencodedCharsFunnel (and deprecate Funnels#stringFunnel()) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46350462\n  
3583,     Remove the rethrow Error behavior from AbstractFuture \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46315153\n  
3584,     Add a test for hashInt() vs  a loop w/ putByte() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46295877\n  
3585,     Change ServiceManager Listener to be an abstract class with empty implementations of its callbacks instead of an interface \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46244288\n  
3586,     Guava issue 1322: deal with a potential overflow issue in ImmutableTable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46160775\n  
3587,     Fix typo in Maps immutableEnumMap  See    google com/p/guava-libraries/issues/detail?id=1397\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46145330\n  
3588,     Change Service Listener from an interface to an abstract class with no-op implementations of all the callbacks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46026613\n  
3589,     Allow a max size of 0 for EvictingQueue\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=46003229\n  
3590,     Use hashFoo() shortcuts instead of newHasher() putFoo() hash() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45995812\n  
3591,     Remove incorrect test using UTF_16LE \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45985871\n  
3592,     Changed Invokable from(constructor) getReturnType() to return ParameterizedType instead of raw class when the class is parameterized  This makes constructor invokable more consistent with factory method invokable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45912432\n  
3593,     Sort and removed unused imports in com/google/common \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45827926\n  
3594,     Allow HashCode#padToLong to work with hashs that have <32 bits \nFix a small typo in Hasher javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45717814\n  
3595,     CHANGE: Make HostAndPort GwtCompatible by getting rid of a regex \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45669298\n  
3596,     Change FileByteSource read() to not unnecessarily copy the byte array in the normal case where the file size doesn t change \n\nIt was incorrectly assuming that if the first read loop filled the original array  the last read() call would have returned -1 if it was done  which is not the case \n\nGuava bug:    google com/p/guava-libraries/issues/detail?id=1376\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45616868\n  
3597,     Fix apparently harmless but still incorrect references to module name \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45613704\n  
3598,     Remove unused HTML dependency \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45608957\n  
3599,     Fix @since for EscaperAsserts \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45601740\n  
3600,     Add links to the hash function comparisons to the Hashing javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45527021\n  
3601,     Add a test to demonstrate that hashBytes(Ints toByteArray(i)) ==\nhashInt(Integer reverseBytes(i)) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45476839\n  
3602,     Fixed a bug in rejectTypeVariable() where we failed to account for the owner type s type variables  For example:\n\nabstract class From<K>  \nclass To<V>  \nTypeToken<To<V>> type()  \nreturn new TypeToken<To<V>>(getClass())   ;\n \n \n\nstatic <K> TypeToken<From<K> To<?>> cheat()  \nreturn new From<K>() new To<String>()    type();\n \n\nTypeToken<From<String> To<?>> notReallyString = TheClass <String>cheat();\nnotReallyString rejectTypeVariables(); // Should throw\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45444012\n  
3603,     Added TypeVisitor to make it easier to navigate type hierarchy  and used it to replace a few code duplications \n\nTypeVisitor might be able to become something that s releasable for users to check on individual sub-components of a Type  Or  if after learning use cases  all that s needed are hasTypeVariables() and hasWildcards()  we ll just add the higher level APIs \n\nSee Guava issue:    google com/p/guava-libraries/issues/detail?id=1362\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45443595\n  
3604,     Add tests for common aliases of SHA1 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45427688\n  
3605,     Remove Platform clone()  along with various supersource versions \nThe last non-test caller was removed in CL 45290173 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45408889\n  
3606,     Reshuffling from removal of internal-only method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45408398\n  
3607,     Release base escaper classes  HTML escapers  XML escapers  and URL escapers into Guava \nKeep the source-code escapers internal until we figure out which ones to recommend and what to name them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45374049\n  
3608,     Added code example to AbstractInvocationHandler to suggest users to use Reflection newProxy() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45317940\n  
3609,     fix some docs in ExecutionQueue\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45311589\n  
3610,     add csiro au as TLD since is not listed on Mozilla PSL\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45307952\n  
3611,     Run  normal  GWT tests in public Guava \nWe still don\ t run the suite-builder tests  so the run is incomplete  but at least it\ s fairly quick:\nTests run: 6667  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 155 218 sec\n\nAmong the steps of this process covered by this CL:\n- Export the generated GWTTestCase files into Guava \n- Add dependencies in guava-gwt on the guava (and guava-testlib) test sources \n- Treat the GWT portion of guava-testlib as though it is part of the guava-gwt tests (to sidestep the issue that we should really have a separate guava-testlib-gwt artifact analogous to the separate guava-gwt project)  (Mainly this means putting its files under guava-gwt/tests )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45160153\n  
3612,     Use the renamingDecorator to ensure that Services always run in appropriately named threads \n\nAbstractIdleService and AbstractScheduledService encode the current state in the name so you should see something like\n\nMyService (STARTING|RUNNING|STOPPING)\n\nAbstractExecutionThread service just uses the serviceName() (so it would be  MyService )  I could additionally try to encode the state but it didn\ t seem worth it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45135687\n  
3613,     Provide ExecutorService decorators that will rename the threads in which its tasks run for the duration of the task \n\nOpen issues:\n1  should any of these be public?  Currently I am only planning on using them for some of the Service base classes so package private is fine  but we may want to make them public \n2  I needed/wanted to use WrappingExecutorService but it was marked GoogleInternal  so i removed @GoogleInternal   Is this ok? or should i use a similar private class? moe-strip public from it?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45121293\n  
3614,     Apply test include to testlib tests as well as main tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45103307\n  
3615,     Closer register supports null closeable\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45058002\n  
3616,     Internal refactoring to make it easy to expose a factory method that configures the burst size\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=45016791\n  
3617,     Convert GWT-only tests into normal tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44698403\n  
3618,     Add ByteSource empty() and CharSource empty() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44815909\n  
3619,     Add nullWriter()  a Writer that discards everything written to it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44805209\n  
3620,     Mention the use of slice(offset  length) for viewing a range in the array to the ByteSource wrap javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44798251\n  
3621,     Fall back to countByReading if InputStream available always returns zero \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44796829\n  
3622,     remove the queuedListeners lock from both ServiceManager and AbstractService \n\nThe original idea of splitting the queuedListeners queue into one queue per listenerInstance didn t pan out because it didn t actually solve the issue of not holding a lock while submitting the listener to the executor   So this is a different strategy \n\nI pulled all the listener execution logic into a new class called ListenerQueue which is analogous to ExecutionList (not sure about the name though   ) which cleaned up both AbstractService and ServiceManager \n\nThe approach is two-fold\n1  do not remove a listener from the queue of listeners until it has definitely been submitted to its executor\n2  ensure that submitting a listener to its executor happens no more than one time (using a lock) \n\nN B  we are still vulnerable to a weird or buggy executor implementation  If calling execute(runnable) runs for a long time without calling runnable run then we can still deadlock   I don t believe we can actually solve this problem without giving up on the ordering guarantees \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44709344\n  
3623,     Convert GWT-only tests into normal tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44698403\n  
3624,     Fix a copy/paste mistake in CharSource javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44648058\n  
3625,     Add isPrimitive()  wrap()  and unwrap() methods to TypeToken\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44620879\n  
3626,     Fix typo in javadoc: the name of the method to override is  compare   not  compareTo  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44580155\n  
3627,     A few small hash changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44571077\n  
3628,     Deprecate the constructors in com google common base Stopwatch and Stopwatch#elapsedMillis and #elapsedTime \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44568679\n  
3629,     Reduce redundant iterator creation in Multimap putAll(K  Iterable<? extends V>)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44559924\n  
3630,     new Stopwatch(); -> Stopwatch createUnstarted();\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44556107\n  
3631,     Change ByteStreams asByteSource calls to ByteSource wrap and deprecate it \nChange CharStreams asCharSource calls to CharSource wrap and deprecate it \nChange both deprecated methods to delegate to the replacement method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44516201\n  
3632,     Replace new Stopwatch() start() with Stopwatch createStarted() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44515274\n  
3633,     Nullability fixes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44514905\n  
3634,     Copy ByteStreams asByteSource(byte[ ) to ByteSource wrap(byte[ ) \nCopy CharStreams asCharSource(String) to CharSource wrap(CharSequence) \n\nAdd package-private CharSequenceReader and tests  for use by the CharSource \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44506727\n  
3635,     Add Class-Path cycle detection to avoid StackOverflowError\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44466033\n  
3636,     Throws UOE in MutableTypeToInstanceMap Entry#set()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44465568\n  
3637,     Add static factory methods to Stopwatch: createStarted() and\ncreateUnstarted() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44465501\n  
3638,     Fix up some javadoc in TypeToken re: TypeLiteral \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44411479\n  
3639,     Some more refactoring of TypeResolver TypeTable  I was in a hurry  The TypeTable code wasn t in a form I d LGTM \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44403308\n  
3640,     Make TypeResolver public in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44329762\n  
3641,     Fix bug in statistics benchmarks implementation of Knuth algorithms \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44319466\n  
3642,     Change Futures allAsList and  successfulAsList to return an unmodifiable list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44306369\n  
3643,     Hasher#putString(CharSequence) to Hasher#putUnencodedChars(CharSequence)\nHashFunction#hashString(CharSequence) to HashFunction#hashUnencodedChars(CharSequence)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44304885\n  
3644,     Updated AbstractPackageSanityTests javadoc to replace  public  with  visible  since by default package-visible classes and methods are also tested \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44268725\n  
3645,     Guava issue 1337: fix potential race with Cache refresh \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44213416\n  
3646,     Typos \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44212313\n  
3647,     Release Funnels sequentialFunnel in Guava 15 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44211868\n  
3648,     Migrate users of the deprecated HashFunction#hashString(CharSequence) to HashFunction#hashUnencodedChars(CharSequence) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44204656\n  
3649,     Add Resource Timing CORS header: Timing-Allow-Origin \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44198561\n  
3650,     Add Hasher#putUnencodedChars and HashFunction#hashUnencodedChars \nDeprecate Hasher#putUnencodedChars and HashFunction#putUnencodedChars \nUpdate callers to add overries/delegations where necessary \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44090897\n  
3651,     Modify recordStats to not accept a value in same manner as setWeakKey\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44016270\n  
3652,     Update the hashing benchmark to include all of the different hash\nfunctions \n\nDelete HashBenchmark java (nearly the same as HashFunctionBenchmark)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44010255\n  
3653,     Automated g4 rollback of changelist 44002262 \n\n*** Reason for rollback ***\n\nBreaks more ImmutableMap mockers \n\n*** Original change description ***\n\nMake ImmutableMap extend ImprovedAbstractMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44008499\n  
3654,     Make ImmutableMap extend ImprovedAbstractMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=44002262\n  
3655,     Remove the synchronized keyword from the ServiceManager ServiceListener startupTimes() method   It is unnecessary and potentially dangerous (I m pretty sure it could actually cause a deadlock due to lock ordering!) \n\nSee    google com/p/guava-libraries/issues/detail?id=1340\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43975294\n  
3656,     Add boolean parser to cache builder  add flag for record stats \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43956416\n  
3657,     Update version number  factor out common config  plus a few nits  specifically:\n* 15 0-SNAPSHOT is the new release target\n* Plugin-management for commonly configured plugins moved into the parent \n* Dependency management into the parents (for version and scope)\n* Make findbugs/javax inject from provided to default (compile) scope  but mark optional \n* Move Resources and sources paths into parent leaving exceptions in children \n* Add a few helper comments for maintenance \n* Add exclusions from Truth and Caliper to force use of guava being built \n\nThere are a few ways this could be locked down more  plugin versions implicitly pulled  etc   but not really necessary - just the ones we explicitly use and configure are important  There are other checks we could do  including pulling in errorprone or checkstyle to help developers building locally submit conformant patches  but this is a further evolution that can wait \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43918640\n  
3658,     Refactor out some common functionality in the HttpHeadersTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43918498\n  
3659,     Deprecate ForwardingSortedMap standardRemove  which has been discovered to interact badly with a bug in JDK6  and was never used in Google \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43914919\n  
3660,     Add Funnels stringFunnel(Charset) overload \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43908416\n  
3661,     Fix SafeTreeSet so delegate tailSet() is wrapped by a new SafeTreeSet as is headSet() and subSet()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43905970\n  
3662,     Remove Google specific headers from HttpHeaders \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43894977\n  
3663,     Make GwtPlatform available to server-side applications \nIt s not actually used there  but dev mode clients do use it  and it won t be available to them unless it s compiled by javac as part of our GWT targets \n\nOne complication: The obvious way of doing this requires the server-side code to depend on the GWT target containing @GwtScriptOnly \nThis might be OK (though we d have to check with at least one project  whose tests flag the new dependency)  but it turns out to be unnecessary:\n@GwtScriptOnly has an effect only on the supersource class (which makes sense  since it s the supersource version that s the one being used in JavaScript only -- the GwtPlatform files I m editing here are more like @UseThisInsteadIfNotGwtScript) \nThus  I can remove it from these versions of GwtPlatform \n\n   google com/p/guava-libraries/issues/detail?id=1328\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43892696\n  
3664,     Test and document LoadingCache s behavior in the face of InterruptedException (mostly by linking to the new <   google com/p/guava-libraries/wiki/CachesExplained#Interruption>) \nAlso  update some unrelated broken links:    archive org/web/20090301165914/   sun com/docs/books/jls/third_edition/html/lexical html#101089 =>    oracle com/javase/specs/jls/se7/html/jls-3 html#jls-3 10 6\n\nExternal bug:    google com/p/guava-libraries/issues/detail?id=1122\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43892475\n  
3665,     Simplify StandardTable implementation in common collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43866642\n  
3666,     Add benchmarks to determine the overhead of the various stats calculation algorithms \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43849595\n  
3667,     Fix FunnelsTest to @GI Funnels sequentialFunnel tests\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43846130\n  
3668,     Add Funnels sequentialFunnel  an Iterable funnel wrapper  to Funnels \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43840825\n  
3669,     Add calls to flush() after writing to streams in ByteSink and CharSink \n\nIt turns out that  under JDK6  FilterOutputStream close() calls flush() and ignores any IOException it throws  This seems like pretty bad behavior  but we can work around it by manually flushing first  Doesn t seem like this should add much overhead for streams that don t require flushing before close either \n\nOn the other hand  this only applies to:\n- subclasses of FilterOutputStream\n- for which flush() does something\n- which do not override close() themselves\n- not running under JDK7+\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43795021\n  
3670,     Document the simplest way to get a List<ListenableFuture> from ListeningExecutorService invokeAll \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43643475\n  
3671,     Rename BloomFilter#mergeWith to #putAll\nRename BloomFilter#canMergeWith to #isCompatible\nRename BloomFilter#size to #bitSize\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43618412\n  
3672,     Actually run some tests that claim to be @GwtCompatible under GWT  stripping out the @GwtIncompatible parts \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43617179\n  
3673,     Open source Splitter#splitToList \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43611289\n  
3674,     Minor javadoc touchups \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43575540\n  
3675,     Fix presidential history  a k a  - the Multimap javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43563199\n  
3676,     Expose Lists cartesianProduct inside Google \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43553359\n  
3677,     Open source Futures#nonCancellationPropagating\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43477677\n  
3678,     Automated g4 rollback of changelist 43443903 \n\n*** Reason for rollback ***\n\nPeople are mocking ImmutableMap  and will need to get fixed  \n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 43314514 \n\n*** Reason for rollback ***\n\nRoll forward now that Grubby s fixed\n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 43310565 \n\n*** Reason for rollback ***\n\nDirty Grubby hacks are getting broken again \n\n*** Original change description ***\n\nCommon out ImmutableMapEntrySet implementation\n\n    description truncated by g4 rollback    \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43454441\n  
3679,     Simplify the implementation of LongMath sqrt \n\nThe combination of an exhaustive test on all longs from 0 to FLOOR_SQRT_MAX_VALUE -- which takes under 90 seconds to run -- and a short proof manages to tighten the bounds from the previous proof  and simplify the reasoning at the same time \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43446198\n  
3680,     Improve exception messages for HostAndPort fromParts\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43445669\n  
3681,     De-GoogleIternalify some APIs for Guava 15 0:\n-c g c collect TreeTraverser\n-c g c collect BinaryTreeTraverser\n-c g c io File#fileTreeTraverser\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43443966\n  
3682,     Automated g4 rollback of changelist 43314514 \n\n*** Reason for rollback ***\n\nRoll forward now that Grubby s fixed\n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 43310565 \n\n*** Reason for rollback ***\n\nDirty Grubby hacks are getting broken again \n\n*** Original change description ***\n\nCommon out ImmutableMapEntrySet implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43443903\n  
3683,     Open source ServiceManagerTest\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43414005\n  
3684,     Release ForwardingSortedMultiset into Guava 15 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43412779\n  
3685,     Open source Sets#newConcurrentHashSet() and\nSets#newConcurrentHashSet(Iterable) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43412565\n  
3686,     Simplify Multimaps AsMap implementation  pulling up common logic from its subclasses\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43412108\n  
3687,     Open source Files#isDirectory and Files#isFile\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43409856\n  
3688,     Factor out common logic in ImmutableMultiset EntrySet implementations\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43407517\n  
3689,     Simplify and refactor the logic to ensure that Immutable(Bi)Map Builder and friends create entries that can be reused by RegularImmutable(Bi)Map to avoid redundant copies \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43407355\n  
3690,     18 months from Guava 15 will be September  not August \nWe ll see if we end up needing to bump it to October because *somebody* doesn t get his Escapers work done in time for a March release ;)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43398394\n  
3691,     Add Content-Security-Policy header \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43393773\n  
3692,     Automated g4 rollback of changelist 42665747 \n\n*** Reason for rollback ***\n\nAll the broke tests have been fixed    i think \n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 42655638 \n\n*** Reason for rollback ***\n\nBroke tests relying on previous empty service manager behavior \n\n*** Original change description ***\n\nProvide a potentially more reasonable behavior for an empty ServiceManager  This is a situation that typically only arises in testing situations (but could theoretically happen w\n\n    description truncated by g4 rollback    \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43389638\n  
3693,     Add BloomFilter#canMergeWith(BloomFilter) which determines whether the\ngiven bloom filter can be safely merged into this one \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43357881\n  
3694,     Automated g4 rollback of changelist 43310565 \n\n*** Reason for rollback ***\n\nSome dirty hacks are getting broken again \n\n*** Original change description ***\n\nCommon out ImmutableMapEntrySet implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43314514\n  
3695,     Common out ImmutableMapEntrySet implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43310565\n  
3696,     Extend AbstractCollection where appropriate in common collect\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43309776\n  
3697,     Automated g4 rollback of changelist 43265767 \n\n*** Reason for rollback ***\n\nadsapi has fixed their problematic LinkedListMultimap usage\n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 43258188 \n\n*** Reason for rollback ***\n\nRollback until adsapi can delete their dirty hack that depended reflectively on LinkedListMultimap s inheritance hierarchy\n\n*** Original change description ***\n\nSimplify and deoptimize LinkedListMultimap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43303012\n  
3698,     Eliminate nondeterminism in memory consumption tests by forcing lazily computed views of the empty immutable collections \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43298195\n  
3699,     Add BloomFilter#size  which returns the number of bits in the underlying\nbit array \nFinally remove BloomFilter#expectedFalsePositiveProbability\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43298086\n  
3700,     Remove Unsigned Integer Long #asUnsigned from Guava 15 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43292361\n  
3701,     Automated g4 rollback of changelist 43258188 \n\n*** Reason for rollback ***\n\nRollback until adsapi can delete their dirty hack that depended reflectively on LinkedListMultimap s inheritance hierarchy\n\n*** Original change description ***\n\nSimplify and deoptimize LinkedListMultimap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43265767\n  
3702,     Adds BloomFilter#mergeWith(BloomFilter) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43265147\n  
3703,     Simplify and deoptimize LinkedListMultimap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43258188\n  
3704,     Simplify filter() implementations in common collect\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43252637\n  
3705,     Deoptimize Iterators methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43251260\n  
3706,     Add AbstractTable  a skeleton implementation-agnostic Table implementation  and factor out code in common between Table implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43250483\n  
3707,     Deoptimize Lists methods where overrides aren t clear wins \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43250163\n  
3708,     More simplification and refactoring of common code in common collect \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43236585\n  
3709,     Delete EmptyImmutableTable  which isn t clearly worth the code complexity \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43207266\n  
3710,     Delete EmptyImmutableMultiset  which isn t clearly worth the code complexity \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43202169\n  
3711,     Remove the following methods from\ncom google common primitives UnsignedInteger and UnsignedLong: add  subtract  multiply  divide  remainder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43201569\n  
3712,     Remove com google common io  LimitInput NullOutput Stream \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43198122\n  
3713,     Promote StandardSystemProperty to @Beta in 15 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43197237\n  
3714,     Delete EmptyImmutableList  replacing it with a singleton instance of RegularImmutableList   This makes the common case for ImmutableList bimorphic instead of trimorphic  resulting in significant improvements to benchmarks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43197187\n  
3715,     Remove Stopwatch#toString(int) as promised in Guava 15 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43194646\n  
3716,     Delete the Ordering from(Comparator) and Ordering natural() overrides of sortedCopy and immutableSortedCopy  since benchmarks suggest any speed increases are minimal at best \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43178753\n  
3717,     Add DecodingException and decodeChecked to BaseEncoding\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43138785\n  
3718,     Make a few small changes to ServiceManager\n1  use the Monitor enterWhen* instead of Monitor waitFor* methods  as they are more efficient \n2  rewrite servicesByState to sort a list of Map Entries instead of constructing a Map and sorting a copy of the EntrySet\n3  Add an addListener convenience overload for when you want to use the sameThreadExecutor \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43135325\n  
3719,     Manually check for nulls in more places \nOur GWT tests would flag some of these  but it s looking like some of them aren t running \n[ will fix that  breaking the tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43133605\n  
3720,     Fix a bug where if Service stop() was called multiple times while the Service was in the STARTING state the stopping() listeners would fire once for every call to stop() violating the contract that listener methods should be called at most once \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43133059\n  
3721,     Minor collections cleanups \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43079662\n  
3722,     Adds @CheckReturnValue to chainable methods of FluentIterable  Thanks to error-prone  this will cause [  to refuse to build any code that doesn t store the return value from these methods \n\nIt will prevent subtle bugs where code is treating FluentIterable as though it is mutable  when in fact it is immutable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=43045750\n  
3723,     Add two static MediaTypes\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42979449\n  
3724,     Deprecate GenericMapMaker \nRemove unused loadFactor() from GWT MapMaker (removed from non-GWT version in 1 0-rc4!)  and make the class final (as the non-GWT version is) \nUpdate ConcurrentHashMultiset to accept MapMaker instead of GenericMapMaker \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42970216\n  
3725,     Fix serialization of GWT SingletonImmutableBiMap inverse() \nThere is a self-assignment that went undetected because (a) we don t run error-prone against GWT-only code and (b) we can t use a final field without breaking serialization even worse \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42969994\n  
3726,     Reduce visibility of Range#asSet (internally) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42968510\n  
3727,     Deprecate softValues  not weakValues \nI got this right in GenericMapMaker but wrong in MapMaker \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42924061\n  
3728,     Remove reference to UTF_16LE equivalence \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42919674\n  
3729,     Make ExecutionList smaller and faster by using a manual queue instead of a LinkedList \n\nWith these changes:\n* An empty/executed ExecutionList is now half the size (20 vs  40 bytes)  it is also smaller after execution as well \n* The new ExecutionList takes 16 fewer bytes per listener added also there is only 1 object allocated instead of 2   Also  if the list has already been executed there is no longer any allocation in add \n* There were also performance gains between 0 and 20% across the 4 benchmarks I wrote \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42915090\n  
3730,     Deprecate softValues \nMake makeComputingMap package-private in Guava  and stop using it in the example code  (It is the only method scheduled for deletion in February or March )\nReimplement out-of-package Guava makeComputingMap callers with the traditional putIfAbsent pattern \nRemove methods scheduled for deletion in Guava 15 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42902921\n  
3731,     Hide Constraint+Constraints internally  deprecating them in Guava \nUpdate remaining callers in a behavior-preserving way \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42901728\n  
3732,     Migrate users of deprecated Range#asSet(DiscreteDomain) to\nContiguousSet#create(Range  DiscreteDomain) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42868160\n  
3733,     Update truth to 0 11\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42845267\n  
3734,     Replace  throw Throwables propagate(checkedEx)  with equivalent  throw new RuntimeException(checkedEx)  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42786068\n  
3735,     Replace  Throwables propagate(alreadyTriedToPropagate)  with equivalent  throw new RuntimeException(alreadyTriedToPropagate)  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42782638\n  
3736,     Open source some more benchmarks \nThe Monitor benchmarks were left as internal when the class was migrated from Labs \nMy guess is that that was nothing more than  Caliper benchmarks can\ t be open-sourced yet  \nI notice that earlier CLs didn\ t open-source them  either \nMy guess is that that\ s just because they were excluded from the BUILD rule entirely and not merely marked with @GoogleInternal \nMy guess is that the same is true of the EventBus benchmark \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42749026\n  
3737,     Move Byte/CharStreams concat into Byte/CharSource \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42657113\n  
3738,     Fix flaky test: Wait for the Future listeners to execute and not just for the Future to complete \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42581734\n  
3739,     Open-source known hashes for crc32  triggered by our new automated test that expects to find them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42547175\n  
3740,     Hashing consistentHash: Add more tests to test that the C++ and Java implementations are equivalent \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42533999\n  
3741,     Add a test that ensures any new HashFunctions must have an entry in\nKNOWN_HASHES \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42508143\n  
3742,     listenInPoolThread didn\ t use to support a custom executor  but it has for a while \nUnfortunately  I never updated it to acknowledge that an InterruptedException is now possible \nWe don\ t really have any good options  so we\ ll go with  keep blocking  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42487946\n  
3743,     Factor out more common code in Maps filter and Multimaps filter implementations\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42449971\n  
3744,     Simplify Multimaps transform logic by sharing more implementation with Maps \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42445381\n  
3745,     Simplify implementation of Multimaps unmodifiableMultimap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42395522\n  
3746,     Optimize AbstractMapBasedMultimap values() iterator() to avoid going via entryIterator() and allocating entries which get immediately discarded \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42383138\n  
3747,     Fix typo in MoreExecutors#listeningDecorator\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42369458\n  
3748,     A rewrite of Monitor internals \n- use a linked list of active guards instead of an ArrayList\n- never signal next waiter while this thread still counted in active guards\n- optimize away excess signals\n- other stuff rewritten to Martin s taste\n\nLike lukes  I got bitten by the Improve Monitor bug  in part\nalso as a learning experience \n\nThis class really needs more tests \n\nI got carried away  and now have a new appreciation for how\nhard it is to get this kind of code correct \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42348803\n  
3749,     Don t rewrite Multisets equalsImpl in ImmutableMultiset\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42277117\n  
3750,     Rewrite the ImmutableCollection toArray() methods in terms of a package-private  copyIntoArray  method  which also lets e g  ImmutableMultimap values() toArray() use arraycopies  etc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42276632\n  
3751,     Promote EvictingQueue from labs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42276397\n  
3752,     Rewrite ImmutableMultimap values() iterator() not to go via the entries  so as to avoid allocating entries that promptly get discarded for the corresponding values \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42275929\n  
3753,     Make ImmutableMultimap values() contains() redirect to ImmutableMultimap containsValue  which for e g  ImmutableSetMultimap takes O(#keys) time  instead of the old implementation  which takes O(#entries) time \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42243991\n  
3754,     Complete a TODO to write a proper ImmutableSet view for ImmutableSetMultimap entries() rather than doing a full ImmutableSet copy of the entries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42243829\n  
3755,     Use specialized entry types for ImmutableMap  and use these in the builders to avoid redundant copying of entries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42095809\n  
3756,     Guava Issue #1276    google com/p/guava-libraries/issues/detail?id=1275\n\nChange ServiceManagers INFO logs to FINE and guard them   Along the way clean up some random things \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42041878\n  
3757,     Don t use exceptions in the control flow of AnnotatedHandlerFinder   (Related: public Guava issue 1196 )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42040968\n  
3758,     Miscellaneous documentation fixes and internal cleanups \n- Remove potentially misleading  it cannot be started/stopped more than once  from Stopwatch exception messages \n- Fix TreeTraverser ASCII art \n- Remove inaccurate @GwtCompatible annotation from FeatureUtil \n- Fix mistaken duplicate words ( the the   etc ) \n- Strip *all* of benchmark running instructions from CharMatcherBenchmark  and preemptively strip instructions from internal escapers benchmarks \n- Remove test <echo> from ant section of pom xml \n- Add @Nullable to StandardBaseEncoding\ s other constructor\ s paddingChar parameter \n- Remove stale comment from Futures  (UninterruptibleFuture is long dead )\n- Update name of Truth GWT module \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=42036409\n  
3759,     Automated g4 rollback of changelist 41959970 \n\n*** Reason for rollback ***\nCL is breaking aw3_cawfe targeting  and aw3_cawfe dtt builds:\n   [ /target?id=d0b34600-250a-4d59-a7d4-0853fca21c18&target=//javatests/com/google/ads/apps/displayads/construction/webdriver:WebdriverTests_firefox-esr-linux#shard=1|run=1|attempt=1|page=-1\n\n   [ /target?id=d0b34600-250a-4d59-a7d4-0853fca21c18&target=//javatests/com/google/ads/apps/displayads/targeting/webdriver:DisplayTabWebDriverTests_firefox-esr-linux#shard=1|run=1|attempt=1|page=-1\n\n*** Original change description ***\n\nLog the default charset once during Charsets class initialization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41990650\n  
3760,     Conservatively simplify Tables and ImmutableTable implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41963659\n  
3761,     Log the default charset once during Charsets class initialization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41959970\n  
3762,     Scythe //java/com/google/common again \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41918585\n  
3763,     Add a simple unit test for AbstractCache#aggregate \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41904843\n  
3764,     Added support for META-INF back  Now any resource loadable from a ClassLoader should be returned by ClassPath getResource() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41869216\n  
3765,     Change EventBus to remove the thread local Queue after dispatching events  (Guava issue 1263:    google com/p/guava-libraries/issues/detail?id=1263)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41857158\n  
3766,     Add a simple test that shows why US_ASCII is usually a bad choice \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41853734\n  
3767,     Allow FluentIterable transformAndConcat() to accept a Function<A  Iterable<? extends B>> \n   google com/p/guava-libraries/issues/detail?id=1260\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41841084\n  
3768,     Correct two typos in IDN doc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41796838\n  
3769,     Optimize IntMath and LongMath by using a branch-free helper implementation of the expression (foo < bar) ? 1 : 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41793002\n  
3770,     Rollback\n\n*** Reason for rollback ***\n\nRolling forward now that the users depending on the error message have been migrated \n\n*** Original change description ***\n\nRollback\n\n*** Reason for rollback ***\n\nPeople depend on the exact error message   (They should feel bad  and they ll need to get fixed )\n\n*** Original change description ***\n\nSimplify and organize various Map implementations   Specifically:\n\n* factor out Hashing smearedHash\n* organize the CompactHash collections \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41788418\n  
3771,     Add NullPointerTester acceptIllegalArgumentException() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41744871\n  
3772,     Move timeout start to before tryLock() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41700665\n  
3773,     Enable command-line filtering of tests with  e g   -Dtest include=**/ClassPathTest java\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41635188\n  
3774,     Fix sourceDirectory  restoring compiled serializers to guava-gwt jar \nI accidentally removed the serializers\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41634343\n  
3775,     - Fix scheduleWithFixed(Delay|Rate)  As originally implemented  scheduleWithFixed(Delay|Rate) would submit a Callable/Runnable wrapped in a FutureTask to the delegate ScheduledExecutorService and fail to run more than once due to run-once nature of FutureTask \n- Implement cancel(boolean) on the returned LSFuture \n- Omit FakeScheduledExecutorService changes \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41598013\n  
3776,     Rollback\n\n*** Reason for rollback ***\n\nWe may want to change these methods to return FluentFuture very soon \n\n*** Original change description ***\n\nDe-betaify lots of methods in Futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41594182\n  
3777,     Fix toString() of Resources asByteSource to match method name \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41591180\n  
3778,     Incorporate latest mozilla tld changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41590242\n  
3779,     Migrate callers of caliper Runner to caliper runner CaliperMain directly \n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41579793\n  
3780,     Added cw to TldPatterns java\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41558410\n  
3781,     Rollback\n\nPeople depend on the exact error message   (They should feel bad  and they ll need to get fixed )\n\n*** Original change description ***\n\nSimplify and organize various Map implementations   Specifically:\n\n* factor out Hashing smearedHash\n* organize the CompactHash collections  implementations better\n* use consistent error messages for ImmutableMap and subclasses when rejecting duplicate elements\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41543614\n  
3782,     Simplify and organize various Map implementations   Specifically:\n\n* factor out Hashing smearedHash\n* organize the CompactHash collections  implementations better\n* use consistent error messages for ImmutableMap and subclasses when rejecting duplicate elements\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41539237\n  
3783,     Remove redundant tests and open source it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41527580\n  
3784,     Make ImmutableTable serializable \nAlso  reduce duplication across existing Table serializers \n   google com/p/guava-libraries/issues/detail?id=1264\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41522037\n  
3785,     Deprecate name() and make toString() return name of domain \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41514739\n  
3786,     Make ImmutableMap Builder fail atomically on null keys or values\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41476478\n  
3787,     Guava issue 1001: stop reimplementing Sets newSetFromMap  now that the backport is in place \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41471300\n  
3788,     Disable compilation of benchmarks  which have been updated to require a version of Caliper that has not been publicly packaged \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41469652\n  
3789,     Change Sources/Sinks to implement Input/OutputSupplier temporarily  to make migration of usages easier (make it possible to change an InputSupplier to a ByteSource without changing an API that takes an InputSupplier at the same time)  The getInput/Output methods are @Deprecated since they shouldn t be called directly  Also make public methods for viewing Input/OutputSuppliers as Sources/Sinks \n\nAlso add Byte/CharStreams concat  providing concatenation functionality equivalent to join for Sources \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41360226\n  
3790,     Add automatic subSet tests in  Sorted Navigable SetTestSuiteBuilder  and override various SortedMap implementations in common/collect to return SortedSet keySets \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41348783\n  
3791,     Migrate benchmarks from SimpleBenchmark to Benchmark and update the runner to accept Benchmark \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41343581\n  
3792,     Hide deprecated FluentIterable toImmutable* methods internally \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41302220\n  
3793,     Minor bug fix and simplifications in common collect  including:\n\n* Iterables skip(iterable  size) s iterator would wrongly remove the last element of the input if the user called [next()  remove()  \n* In Iterators concat  instead of using checkNotNull and Arrays asList  just use ImmutableList of\n* Use Itera tors bles  addAll instead of for loops in Sets factory methods\n* Simplify Lists charactersOf implementations\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41300544\n  
3794,     Fix ImmutableMap copyOf s null checking on a singleton map with a null key or value \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41297381\n  
3795,     Complete a TODO to avoid redundant copies of entry arrays in ImmutableMap construction pathways \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41289454\n  
3796,     Bias CharMatcher precomputed() implementation towards BitSetMatcher  as per    google com/p/guava-libraries/source/detail?r=7218498c1e19a789a5064ae750db7e929e2e8287 comments\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41247243\n  
3797,     Broaden Maps immutableEnumMap generics\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41237787\n  
3798,     Optimize Monitor leave \n\nNo reason to check for whether we hold lock - lock unlock will\nthrow IMSE for us \n\nNo reason to signal if we are leaving a lock occupied with depth > 1 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41204492\n  
3799,     Add documentation to the remaining isPartialView methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41191330\n  
3800,     Simplify Maps   Specifically \n\n* factor out common code between mapDifference for Map  SortedMap\n* deabstractify Maps KeySet and Maps Values  since most (even if not all) implementations just return a specific Map\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41190675\n  
3801,     Split off Multimaps filterXXX overloads for SetMultimap (and filterKeys(ListMultimap)) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41190071\n  
3802,     Simplify ImmutableCollection implementation and related code   Specifically:\n\n* Redirect ImmutableCollection default serialization to ImmutableList  which it was basically emulating before\n* Factor out  handwritten ArrayList  logic from Immutable List Set  Builder\n* Be more organized in ImmutableList creation pathways about where and when null validation is done\n* Use default List iterator implementation in ImmutableList ReverseImmutableList\n* Use default List implementations for RegularImmutableList  equals  toString \n* Push down ArrayImmutableSet logic to its one and only subclass  RegularImmutableSet\n* Optimize ImmutableSortedSet creation paths  e g  to avoid creating any garbage in duplicate-free common case\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41188291\n  
3803,     Simplify Iterators and Iterables \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41186453\n  
3804,     Minor simplifications to Multimaps \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41184579\n  
3805,     Reconcile @GwtIncompatible (and @GoogleInternal) annotations with the build-system lists of GWT-compatible (and GWT-compatible emulated) files \nThe main effect of this is to make InternetDomainName available under GWT in Guava  (It somehow seems to have worked anyway inside Google )    google com/p/guava-libraries/issues/detail?id=1253\nIt s also necessary to make UnsignedInteger multiply() (which is already deprecated) unavailable under GWT  since it is a simple passthrough to the times() method  which is also unavailable under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41134674\n  
3806,     check that forAllPublicStaticMethods() at least covers one method  ot avoid the case that user forgets to add public static modifiers to the factory methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41125051\n  
3807,     Trim lots of unused and redundant code   In particular \n\n* refactor hash table size computations into one place\n* use Maps safeGet and friends where appropriate\n* eliminate code duplication between the two skeleton implementations of NavigableMap descendingMap()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41052812\n  
3808,     It\ s January 2013!\n- Remove MapMaker softKeys \n- Remove AsynchronousComputationException (slated for November 2012 deletion) \n- Change Unsigned* methods\  expiration from a month to a version  since  one version  is what we try to do  anyway  and we had scheduled them for  January  rather than  15 0  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41046796\n  
3809,     MOE stripping fixes:\n- Put  MOE: begin end _intracomment_strip  in HTML comments so that it does not appear in internal Javadoc \n- Turn scrub_sensitive_comments off so that MOE gives errors instead of silently stripping comments that contained sensitive words \n- Where necessary  manually strip out sensitive words  remove them  or replace them with non-sensitive words \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41038153\n  
3810,     Fix toString() of some Source/Sink implementations to match method names \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41036419\n  
3811,     Rollback of controversial c423bec3cc53 ( Trim gratuitous code from ImmutableList implementations ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41031096\n  
3812,     Reduce unnecessary code in Multisets and Multimaps\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41030309\n  
3813,     Added Invokable#getOwnerType()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41008711\n  
3814,     Excluded META-INF/ from ClassPath\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41003993\n  
3815,     Add  application/binary  media type \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=41002328\n  
3816,     Remove unnecessary code from *Immutable*Map implementations\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40999290\n  
3817,     Simplified attempt to fix common issues with Unsafe in common libs\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40999025\n  
3818,     Trim gratuitous code from ImmutableList implementations\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40997992\n  
3819,     TypeParameter reshuffling \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40994611\n  
3820,     Added javadoc to ClassSanityTester about a pattern to test builder equality  Added invokable setAccessible(true) to allow public factories of non-public classes to be tested \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40993798\n  
3821,     Fix typo in UsingToStringOrdering javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40988923\n  
3822,     Include test txt in Guava to fix ClassPathTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40980832\n  
3823,     Cleans up HashingTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40973196\n  
3824,     Added ClassPath getResources()  See    google com/p/guava-libraries/issues/detail?id=1214\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40960937\n  
3825,     Use a for loop instead of a switch in Murmur3_32 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40945029\n  
3826,     Fix OSGI metadata creation in Guava build \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40892296\n  
3827,     Guava issue 1245: fix generics for BaseEncoding streaming encoding/decoding\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40878894\n  
3828,     Add new MediaTypes for use by WebFinger\n(   google com/p/webfinger) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40829323\n  
3829,     added tests to cover non-jar file case\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40779626\n  
3830,     See    google com/p/guava-libraries/issues/detail?id=1215 Catch IOException thrown by new JarFile()  Sometimes there may be non-jar files in the class path  for example   jnilib files\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40754214\n  
3831,     Add Invokable isVarArgs() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40749218\n  
3832,     Add application/xml to MediaType \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40684914\n  
3833,     Deprecate ForwardingService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40646316\n  
3834,     Write a more compact ImmutableTable implementation \n\nInstead of maintaining explicit Cell objects and an ImmutableSet<Cell> cellSet implementation  we keep iteration-ordered pointers into the main lookup structures to avoid keeping two hash tables for the same data \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40531451\n  
3835,     Fix calls to deprecated Stopwatch elapsedTime(TimeUnit) by inlining that method\ s implementation ( elapsed(TimeUnit) ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40480378\n  
3836,     Fix calls to deprecated Stopwatch elapsedMillis() by inlining that method\ s implementation ( elapsed(MILLISECONDS) ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40472379\n  
3837,     Give removal date for Stopwatch deprecation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40466574\n  
3838,     StandardSystemProperties -> @GI\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40464798\n  
3839,     Add a method to Uri that allows us to get the port (via HostAndPort) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40360770\n  
3840,     Fix comment in AbstractMapBasedMultiset reported in Guava issue 1234 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40349870\n  
3841,     Changed ClassSanityTester testEquals() to check against use of == on objects  We assume that the implementations should call equals()\n\nTested: [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40349360\n  
3842,     Add base StandardSystemProperties\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40325631\n  
3843,     Make Closer public and @Beta  Also  change Closer rethrow(Throwable) to propagate IOExceptions by default and change all calls to rethrow(e  IOException class) to rethrow(e)  Add a pointer from Closeables closeQuietly deprecation text to Closer \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40308996\n  
3844,     Take steps to fix Cache refresh race condition   Specifically  do a racy check outside the lock to see if the value is already being refreshed  and do an optional check inside the lock to eliminate the race condition entirely \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40301328\n  
3845,     Undeprecate Closeables closeQuietly for the moment  We ll deprecate it on the 14 0 release branch \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40268076\n  
3846,     Remove extraneous semicolon \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40263424\n  
3847,     Override HashFunction#toString() where possible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40255702\n  
3848,     Add tests for known defaults for all HashFunctions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40223497\n  
3849,     Put that coffee down  Coffee s for closers only \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40220880\n  
3850,     Reorganize LinkedListMultimap to avoid the three redundant hash maps  saving a fair amount of memory \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40210587\n  
3851,     Add default clause to every switch statement in our code \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40168064\n  
3852,     Make our code a little closer to obeying the  every switch must have a default  rule \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40165739\n  
3853,     Add  Byte Char  Source Sink  streaming APIs to BaseEncoding \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40155178\n  
3854,     Add BiMapMemoryBenchmark\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40154710\n  
3855,     Minor optimizations for BaseEncoding \n\nSpecifically  we compute the exact size of the decoded byte array in the absence of a separator by trimming away padding characters before estimating the decoded size \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40128625\n  
3856,     Ensure that recordStats works on Android  GWT  and environments which may restrict the use of sun misc Unsafe  as per Guava issue 1228 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40113906\n  
3857,     Revert accidental doc changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40085671\n  
3858,     Add more doc to BaseEncoding\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40048053\n  
3859,     Deprecate Stopwatch#elapsedTime  Stopwatch#elapsedMillis  and Range#asSet \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40031578\n  
3860,     Add subRangeSet to the RangeSet interface  and add the TreeRangeSet implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=40028620\n  
3861,     Rewrite TreeRangeSet complement() to be implemented in the same way as TreeRangeSet itself -- as a NavigableMap<Cut<C>  Range<C>> mapping lower bounds to ranges \n\nThis is a prelude to implementing TreeRangeSet subRangeSet  which -- itself implemented as a NavigableMap<Cut<C>  Range<C>> -- will be chainable with complement() operations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39984398\n  
3862,     Rollback LinkedListMultimap change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39937742\n  
3863,     Optimize CharMatcher as described in Guava issue 1223 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39931458\n  
3864,     Add MultisetMemoryBenchmark \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39931320\n  
3865,     Reducing some critical sections\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39926253\n  
3866,     Reorganize LinkedListMultimap to avoid the three redundant hash maps  saving a fair amount of memory \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39925816\n  
3867,     Hides the mutex that is used by RateLimiter  so clients can\ t interfere with it \nNote that the only current (and accidental) exposure of the fact that the RateLimiter\nuses  this  for synchronization  is the setRate/getRate methods  which have  synchronized \nin their signatures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39921152\n  
3868,     Add ByteStreams readBytes(InputStream  ByteProcessor)  It was requested by a Guava user and I actually already added the equivalent to CharStreams for LineProcessor  It also is a case where we should provide an InputStream equivalent so that users don t create single use InputSuppliers/ByteSources \n\nAlso add a missing @since tag and fix a few line lengths \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39918353\n  
3869,     Minor cleanups to BaseEncoding\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39881805\n  
3870,     Remove @Beta from UnsignedInteger and UnsignedLong \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39871896\n  
3871,     Deprecate DiscreteDomains \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39870832\n  
3872,     Expand Ascii to Lower Upper Case to take a CharSequence instead of a String\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39870574\n  
3873,     De-betaify lots of methods in Futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39869967\n  
3874,     SuppressWarnings for more tests ignoring return values \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39866774\n  
3875,     Remove logging from ServiceManager isHealthy  People who want the detailed information can easily get it from servicesByState() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39860721\n  
3876,     Change uses of DiscreteDomains methods to DiscreteDomain \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39844275\n  
3877,     Make SortedMultiset elementSet() return a NavigableSet outside GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39834726\n  
3878,     De-@Betaify AtomicDouble and AtomicDoubleArray \nFix javadoc typo in a href tag \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39797368\n  
3879,     Add TableMemoryBenchmark implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39795607\n  
3880,     Add MapMemoryBenchmark and SortedMapMemoryBenchmark \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39793649\n  
3881,     De-Betaify a slew of APIs in math  net and util/concurrent \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39793528\n  
3882,     Add SuppressWarnings for a couple places where a return value that shouldn t normally be ignored is ignored \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39777104\n  
3883,     Optimize collapseFrom and trimAndCollapseFrom so that they\nonly allocate if necessary   Add a few tests   Remove the GWT\nworkarounds for GWT bug 4491 since it appears to be fixed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39757514\n  
3884,     Shuffling in benchmark classes due to internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39747316\n  
3885,     New implementation of Objects ToStringHelper:\n\n- More efficient  doesn t create a list of temporary holders \n- Some javadoc improvements \n- New benchmark \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39701659\n  
3886,     Add SetMemoryBenchmark\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39700123\n  
3887,     Mark ServiceManager as Beta   Service is Beta so it makes sense for this class \n\nAlso  tweak a few docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39684054\n  
3888,     Add GWT compilation test \nSeparate testlib GWT files into guava-testlib/blackhole-gwt  where they can be ignored for the time being \n(testlib already doesn t work under GWT )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39671586\n  
3889,     Remove @Beta annotations from definitely stable standardXXX methods from ForwardingXXX classes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39629391\n  
3890,     Add Stopwatch#elapsed in prep for migration from elapsedTime() and\nelapsedMillis() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39620819\n  
3891,     Mention  hexadecimal  in BaseEncoding base16() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39617876\n  
3892,     Improve exception message for Stopwatch start() and stop() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39593299\n  
3893,     Merge DiscreteDomains into DiscreteDomain  in advance of migration \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39581939\n  
3894,     Reformatting from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39581002\n  
3895,     Remove @Beta from:\n-Objects ToStringHelper#omitNullValues\n-Optional or(Optional)\n-Optional transform\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39495606\n  
3896,     Remove @Beta from:\n-BoundType\n-FluentIterable (except toSortedList())\n-Range (except asSet())\n-SortedMapDifference\n-Immutable Set List  Multimap inverse()\n-ImmutableMultimap Builder order Value Key sBy\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39495506\n  
3897,     Remove @Beta from:\n-Ordering  lea greate stOf(Itera ble tor )\n-Ordering max/min(Iterator)\n-Sets synchronizedNavigableSet\n-Maps synchronizedNavigableMap\n-Maps filter Values Keys Entries \n-Maps transform Values Keys Entries \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39495484\n  
3898,     Small fixes to some incorrect @since tags \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39494615\n  
3899,     Forwarding classes out of @Beta (except standardFoo() methods) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39494356\n  
3900,     Change HashCode from 32-bit to 8-bit minimum in docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39493754\n  
3901,     Change (most) methods in common io that either return or take Input/OutputSuppliers to delegate to Sources/Sinks by wrapping suppliers as sources/sinks and vise versa  This also deprecates ByteStreams getChecksum() and Files getChecksum() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39480085\n  
3902,     Add an example to the javadocs for ThreadFactoryBuilder#setNameFormat\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39429195\n  
3903,     Opensource ServiceManager!\n\nSpecifically:\nremove @GI from Service failureCause (and implementors/referencing tests in util concurrent)\nremove @GI from ServiceManager and its tests\n\nadd javax inject as a compile dependency to guava/pom xml\nadd the javax inject jar to maven_local_repository tar gz\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39407518\n  
3904,     Rewrite Multimaps filter implementations  factoring out a significantly more efficient Multimaps filterKeys implementation in the process \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39394883\n  
3905,     Swap out truth 0 7 (and older source version) and swap in 0 10 with gwt support\nLots of import changes poached from:\nreplace_string  import org junit contrib truth   import org truth0 \nreplace_string  import static org junit contrib truth   import static org truth0 \nmanual search/replace containsAnyOrder() -> has() allOf()\nmanual search/replace containsInOrder() -> has() allOf() inOrder()\nsometimes s/r contains*Order() -> has() item or has() allFrom()  inOrder()  as appropriate\nother manual fixes\n\nTested:\nglobal presubmit\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39392184\n  
3906,     Implement ImmutableRangeSet subRangeSet(Range) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39377650\n  
3907,     Add subRangeMap to the RangeMap interface  and an implementation for TreeRangeMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39377500\n  
3908,     Implement ImmutableRangeMap subRangeMap(Range)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39333730\n  
3909,     Clarify docs on UnsignedLong fromLongBits/UnsignedInteger fromIntBits   Add UnsignedLong valueOf(long)  which rejects nonnegative values \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39281179\n  
3910,     Further LongMath sqrt optimizations  to show that a simple truncation is in fact sufficient   (This actually simplifies the proof )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39276105\n  
3911,     Optimize LongMath binomial by accumulating into separate numerator and denominator variables whenever overflow is known to be impossible  as in the BigIntegerMath implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39205160\n  
3912,     Minor cleanups: remove a gratuitous StringBuilder in CharMatcher  and up the ImmutableSortedMultiset memory consumption limit  which is causing flaky failures\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39204961\n  
3913,     Optimize LongMath sqrt \n\nThis optimization depends on the fact that Math rint(Math sqrt((double) longValue)) is at most 1 away from the true value of sqrt(longValue)  so there is no need for Newton s method iterations  or indeed any loops at all \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39162111\n  
3914,     Make CharMatcher toString() consistently format characters as \\uXXXX \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39158530\n  
3915,     Rewrite Multimaps transform* in terms of AbstractMultimap  and use MultimapTestSuiteBuilder on it directly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=39050523\n  
3916,     Changed Futures addCallback() not to call onFailure() when onSuccess() throws \n\nNote to test owners:\n\nThis change revealed test bugs in your test  The old code swallowed EasyMock  interaction expected  exception and passed it to your onFailure() method  which is a usually a no-op \n\nI didn\ t dig deeply enough into your code to understand if the offending interactions are supposed to happen  The fix is just blindly adding expect() call to make the tests pass \n\nIf you see a real bug  please let me know \n\nThanks!\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38864384\n  
3917,     LinkedHashMultimap rewrite\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38863555\n  
3918,     Clarify what does and doesn t count as a lookup in CacheStats \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38862581\n  
3919,     Add more class-level documentation and examples for RangeSet \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38862063\n  
3920,     Delete of(E[ ) from the GWT copy of ImmutableList \nThe  plain Java  copy has been gone for a long time \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38793793\n  
3921,     Implement Multisets filter(Multiset  Predicate)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38740003\n  
3922,     Cache the upperCase() and lowerCase() results in the Encoding object itself  not the alphabet  so as to save an allocation from each call to lowerCase() or upperCase() after the first \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38731220\n  
3923,     Deprecate old UnsignedLong methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38728092\n  
3924,     Deprecate UnsignedInteger methods that have been renamed \nAdd @CheckReturnValue to the arithmetic methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38728022\n  
3925,     Refactor AbstractMultimap into a separate AbstractMultimap and AbstractMapBasedMultimap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38726867\n  
3926,     Add Longs tryParse \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38720107\n  
3927,     Minor re-ordering of gwt module declarations\n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38698087\n  
3928,     Fix up Iterators#cycle(E   ) docs \nAdd equality tests for HexString#encode  ByteArrays#toHexString  and HashCode#toString\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38654669\n  
3929,     Document the current behavior of ImmutableRangeSet Builder  even if we might change that behavior later \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38653539\n  
3930,     Fix bug in TreeRangeMap asMapOfRanges() get(absentRange)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38651843\n  
3931,     Add useful toString() for BaseEncoding\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38649483\n  
3932,     replace UnsignedInteger asUnsigned() with UnsignedInteger fromIntBits()\n\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38638597\n  
3933,     Stop recommending the use of delimiters when hashing strings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38631621\n  
3934,     Test default Charset \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38579676\n  
3935,     Avoid rebuilding alphabet lookup tables  etc  in BaseEncoding\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38575425\n  
3936,     Make Crc8HashFunction @GoogleInternal  since Hashing crc8 already is \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38565967\n  
3937,     UnsignedLong asUnsigned => UnsignedLong fromLongBits\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38564991\n  
3938,     Remove HashCode#padToInt (package-private) and override HashCode#hashCode() instead\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38560921\n  
3939,     Prepare for the same renamings for UnsignedInteger as in UnsignedLong\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38558333\n  
3940,     Re-write MessageDigestAlgorithmBenchmark using multiple @Params instead\nof different timeFoo() methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38484757\n  
3941,     Adds com google common hash Crc32cHashFunction \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38480998\n  
3942,     Use MessageDigest#clone() instead of MessageDigest#getInstance() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38480581\n  
3943,     Rewrite CacheBuilder removalListener docs a bit  removing some stale\nverbiage accidentally left over from GenericMapMaker  and being more\nclear about the requirement to use the returned reference \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38477912\n  
3944,     Add ByteSource  ByteSink  CharSource and CharSink abstract classes and factory methods for creating various implementations of them \n\nThese classes are intended to replace the InputSupplier and OutputSupplier interfaces  providing advantages such as: no generics  a more consistent interface that reduces the need for static methods  and better discoverability \n\nThis helps pave the way for JDK7 by making it extremely easy to provide the same features for the new file APIs (Path) that we currently provide for Files  etc  All it will require is adding new factory methods to create Sources and Sinks wrapping a Path \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38458933\n  
3945,     Use HashFunction#hashObject shortcut \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38455777\n  
3946,     Add new UnsignedLong methods that we will shortly migrate to \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38454126\n  
3947,     Add Crc8HashFunction to compute the CRC8 \nRelax restriction of >= 4 bytes for a HashCode instance \nAdd HashCode#padToInt\nAdd HashCodes#fromByte\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38451830\n  
3948,     Changed Invokable to always return the source-view of parameters  even for non-static inner class constructors \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38361864\n  
3949,     Add Maps filter Keys Values Entries (NavigableMap  Predicate)  since we added Sets filter(NavigableSet  Predicate) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38357323\n  
3950,     This CL fixes method calls that incorrectly ignore the return\nvalue  Method calls with no side-effect are pointless if you\nignore the value returned  Also  this error is triggered if the\nreturn value of a method that has been annotated with\n@CheckReturnValue is ignored  This an automated fix using\nerror-prone \n\nWe intend to make this a compilation error in Google s Java compiler \nso it is necessary to fix existing occurrences first to avoid breaking\nbuilds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38277360\n  
3951,     Add a speculative size check to Iterables elementsEqual  as per Guava issue 1183 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38262433\n  
3952,     Guava issue 555: EnumMultiset create(Iterable  Class)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38260896\n  
3953,     Add @since for withFallback \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38255463\n  
3954,     Compute CharMatcher constants lazily whenever possible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38170514\n  
3955,     Add streaming encoding and decoding to BaseEncoding \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38154034\n  
3956,     Rewrite ImmutableBiMap to save ~35% on memory consumption  following the ideas of our HashBiMap rewrite \n\nThis should not have significant performance impact  as the implementation is essentially identical -- save that entry objects are shared between the forward and backward maps \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38148097\n  
3957,     Make TreeMultimap asMap() and keySet() return NavigableMap/NavigableSet  falling back to SortedMap/SortedSet on GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38143211\n  
3958,     Return a NavigableSet from TreeMultimap get\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38054420\n  
3959,     Add TreeRangeSet create(RangeSet)  copy factory method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38049043\n  
3960,     Add Google-internal memory consumption tests for  Immutable HashBased TreeBased Table \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38048228\n  
3961,     Add HashFunction#hashObject() shortcut \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38044012\n  
3962,     renames array fields with positive-length values \nwhich are mutable  from ALL_CAPS to camelCase\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38043270\n  
3963,     Add Google-internal memory consumption tests for all top-level Multimap implementation types \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38042089\n  
3964,     Avoid the fragile assumption in SortedMapTestSuiteBuilder that all tested maps are Map<String  String>\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38041962\n  
3965,     Add Google-internal memory consumption tests for Immutable List Set Map BiMap SortedMap SortedSet  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38036087\n  
3966,     Add Google-internal memory consumption tests for all top-level Multiset implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38035186\n  
3967,     Implement ImmutableRangeSet asSet(DiscreteDomain) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38034818\n  
3968,     Eliminate an unchecked cast from ImmutableSortedSet that previously generated unsuppressed warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38034277\n  
3969,     This CL fixes method calls that incorrectly ignore the return\nvalue  Method calls with no side-effect are pointless if you\nignore the value returned  Also  this error is triggered if the\nreturn value of a method that has been annotated with\n@CheckReturnValue is ignored  This an automated fix using\nerror-prone \n\nWe intend to make this a compilation error in Google s Java compiler \nso it is necessary to fix existing occurrences first to avoid breaking\nbuilds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=38025487\n  
3970,     Fix generics in Cache which are breaking the MOE build \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37779427\n  
3971,     This CL fixes method calls that incorrectly ignore the return\nvalue  Method calls with no side-effect are pointless if you\nignore the value returned  Also  this error is triggered if the\nreturn value of a method that has been annotated with\n@CheckReturnValue is ignored  This an automated fix using\nerror-prone \n\nWe intend to make this a compilation error in Google s Java compiler \nso it is necessary to fix existing occurrences first to avoid breaking\nbuilds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37689226\n  
3972,     Add RangeSet span()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37651646\n  
3973,     This CL fixes method calls that incorrectly ignore the return\nvalue  Method calls with no side-effect are pointless if you\nignore the value returned  Also  this error is triggered if the\nreturn value of a method that has been annotated with\n@CheckReturnValue is ignored  This an automated fix using\nerror-prone \n\nWe intend to make this a compilation error in Google s Java compiler \nso it is necessary to fix existing occurrences first to avoid breaking\nbuilds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37644487\n  
3974,     Export TestingExecutorsTest to Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37556826\n  
3975,     Add TestingExecutors noOpScheduledExecutor to common/util/concurrent/testing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37540391\n  
3976,     Change Hashing smear to use MurmurHash3 s mixK1  which appears slightly faster and more effective for use in open-addressed hash tables \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37090965\n  
3977,     Add RangeMap span() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37068105\n  
3978,     Add a package-private pollNext helper  using it for a few pollFirst/pollLast methods here and there\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37066519\n  
3979,     Forbid empty ranges in ImmutableRangeMap Builder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37065199\n  
3980,     Re-export testdata files into Guava after CL 36707785 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37065032\n  
3981,     Make FilteredCollectionsTest pass under Maven \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37049722\n  
3982,     Some javadoc improvement of Invokable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37049407\n  
3983,     Try to improve Splitter documentation\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37048099\n  
3984,     Rename com google common io Io-gwt to  com google common io Io  to follow the pattern used in our other packages \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37045666\n  
3985,     Add copyright information to ported Murmur hash functions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37032710\n  
3986,     Comment seemingly-unnecessary bitwise mask in UnsignedInteger \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=37025851\n  
3987,     Reorganize tests for filter methods on Iterables  Collections  Sets  etc \nNOTE: This CL introduces an empty FilteredCollectionsTest class  which Maven s test runner doesn t like  We ll fix it shortly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36708171\n  
3988,     Make BaseEncoding @GwtCompatible \nNOTE: This CL accidentally removes test data files  breaking tests  We will fix this shortly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36707785\n  
3989,     Change ByteStreams  CharStreams and Files to use Closer \n\nAlso update ByteStreams and CharStreams tests to check for suppressed rather than logged exceptions when running on JDK7  and change Closer to log to Closeables logger \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36704557\n  
3990,     Remove ImmutableRangeSet all()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36698163\n  
3991,     Release a couple io test methods \n\nThey were hidden because TestLogHandler wasn t available  but it is now \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36693847\n  
3992,     Add Closer as package-private in common io \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36681931\n  
3993,     Add RangeMap getEntry method \n\nThis appears to be needed by    [ /#[ /java/com/google/net/security/[ proxy/ProxyConfigFile java&l=583  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36676148\n  
3994,     Avoid allocating for Multimap removeAll(absentKey) implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36667564\n  
3995,     Make TreeMultiset elementSet() return a NavigableSet (albeit not in GWT)   Dependent on cl/36499908 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36545396\n  
3996,     Write the initial  skeletal BaseEncoding API \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36544759\n  
3997,     Add tests for ImmutableSortedMultiset asList views\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36537737\n  
3998,     Split MultisetCollectionTest suites into the appropriate test classes\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36537481\n  
3999,     Test SortedMultiset elementSet() with a SortedSetTestSuiteBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36535008\n  
4000,     Migrate IRangeMap into RangeMap s position \n\nCL automatically created by:\nreplace_string  \\\nRangeMap create\\\\\\(\\\\\\) \\\nTreeRangeMap create\\(\\)\n\nTested:\nreviewed submit queues\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36518602\n  
4001,     Add elementSet and entrySet tests to MultisetTestSuiteBuilder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36498472\n  
4002,     Change ImmutableRangeSet Builder to reject overlaps\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36498240\n  
4003,     Add ImmutableListCreationBenchmark to help evaluate the utility of pre-sized builders \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36498026\n  
4004,     Deprecate Closeables closeQuietly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36487308\n  
4005,     Improve Hasher docs about Hasher putChar(\ a\ ) putChar(\ b\ ) hash() being\nequivalent to Hasher putString( ab ) hash() \nAdd a test that demonstrates this behavior \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36383791\n  
4006,     Add tests for ImmutableSortedMap  entrySet keySet values  asList \n\nDependent on cl/36166288 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36374019\n  
4007,     Add an InternetDomainName test that confirms proper behavior when  under  TLD patterns overlap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36371550\n  
4008,     Specify the behavior of Hashers after Hasher#hash() has been called \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36368626\n  
4009,     Add ImmutableMultiset asList() tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36363737\n  
4010,     Fix precondition error message to use %s instead of %d (which is not supported by the preconditions formatter) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36322003\n  
4011,     Sanity test for a known bloom filter and false positives \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36200843\n  
4012,     Add tests for ImmutableMap  keySet entrySet values  asList\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36194340\n  
4013,     Allow for arbitrary orderings in tests for lists  rather than assuming insertion order \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36192794\n  
4014,     Add a message to EOFExceptions thrown by ByteStreams readFully and skipFully \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36182453\n  
4015,     Fix up javadocs to say   @link Foo  instances  instead of   @link Foo s  \n(Same with  @code     ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36168403\n  
4016,     Guava issue 1120  Remove ThreadLocal value in EventBus rather than setting to false \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36161462\n  
4017,     Automated g4 rollback of changelist 35973933 \n\n*** Reason for rollback ***\n\nBroke megastore tests\n\n*** Original change description ***\n\nMake ListeningScheduledExecutorService schedule* return a ListenableFuture\n(Originally from CL 23008243 by way of CL 22474051)\nMake FakeScheduleExecutorService a ListeningScheduledExecutorService\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36011435\n  
4018,     Automated g4 rollback of changelist 35980335 \n\n*** Reason for rollback ***\n\nBreaks megastore tests \n\n*** Original change description ***\n\nTiny cleanups after cl 35973933  Fixed a spurious character that snuck in and extra spacing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=36003816\n  
4019,     Break up Collection test suites and put tests for a class in   the tests for that class \n\nWhile we re at it  knock out a couple of redundant tests for TreeMultimap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35986812\n  
4020,     Tiny cleanups after cl 35973933  Fixed a spurious character that snuck in and extra spacing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35980335\n  
4021,     Make ListeningScheduledExecutorService schedule* return a ListenableFuture\n(Originally from CL 23008243 by way of CL 22474051)\nMake FakeScheduleExecutorService a ListeningScheduledExecutorService\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35973933\n  
4022,     Guava issue 1012: Sets filter for NavigableSet\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35956146\n  
4023,     Adding ForwardingBlockingDeque  as it s a natural fit for Guava and something which is currently missing from the library \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35939897\n  
4024,     Migrate BiMap-filtering methods out of Labs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35880650\n  
4025,     Allow ImmutableSortedMap naturalOrder() to accept a <K extends Comparable<? super K>>  since the javac bug appears to be fixed?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35876909\n  
4026,     Revert GWT emulation of HashBiMap to simpler version using two HashMaps that s better for GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35829480\n  
4027,     Second try at adding MoreExecutors platformThreadFactory() \nNow if ThreadManager currentRequestThreadFactory() throws  we fall back to Executors defaultThreadFactory() \nIn particular  this happens when AppEngine is running in this JVM  but there is no AppEngine context for the current thread (i e  we\ re  outside  appengine) \n\n*** Reason for rollback ***\n\nRoll forward after handling leaked system properties more robustly \n\n*** Original change description ***\n\nAutomated g4 rollback of changelist 35431636 \n\n*** Reason for rollback ***\n\nBreaks puppet tests  where we falsely detect the environment to be AppEngine due to system property leakage \n\n*** Original change description ***\n\nAdd MoreExecutors platformThreadFactory()  an AppEngine-aware version of Executors#defaultThreadFactory \n\nUpdate classes within c g c\n\n    description truncated by g4 rollback    \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35820196\n  
4028,     Add more thorough tests to MultimapTestSuiteBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35614504\n  
4029,     Cancelling a successfulAsList() Future should not produce an exception (even if that exception is merely logged) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35580495\n  
4030,     Remove the State parameter from AbstractIdleService executor   This parameter is redundant with the value of the state() method at the times the method is called   So it can be removed without removing functionality and it brings this method (more) in line with AbstractExecutionThreadService executor and AbstractScheduledService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35573254\n  
4031,     Remove README maven  which is no longer relevant \n  
4032,     Two small service cleanups \n1  Make AbstractIdleService getServiceName protected (instead of private) and rename to serviceName\n2  Have serviceManager log service failures at SEVERE and also log service terminations at INFO level \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35524121\n  
4033,     Rename AbstractExecutionThreadService getServiceName to serviceName to be more consistent with other Service methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35510047\n  
4034,     Special-case ImmutableMap copyOf(EnumMap) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35504772\n  
4035,     Adding the IDN ccTLD for Kazakhstan that is implemented by IANA (   iana org/domains/root/db) but not yet\nin the Mozilla names file \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35492306\n  
4036,     A few small cleanups to use utility classes in c g c collect\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35489898\n  
4037,     Add ignoreClasses(Predicate) to AbstractPackageSanityTests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35488015\n  
4038,     Rollback MoreExecutors plaformThreadFactory() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35478665\n  
4039,     Update Mozilla PSL \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35437775\n  
4040,     Give the thread running in the default ScheduledExecutorService for the AbstractScheduledService a name   This follows the pattern that AbstractExecutionThread uses \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35433849\n  
4041,     Minor javadoc cleanup \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35431916\n  
4042,     Add MoreExecutors platformThreadFactory()  an AppEngine-aware version of Executors#defaultThreadFactory \n\nUpdate classes within c g common util concurrent that create new threads to use this factory \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35431636\n  
4043,     Add GWT src-super for HashBiMap change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35367257\n  
4044,     Basic implementation of ImmutableMap asMultimap()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35373012\n  
4045,     Give CharMatcher apply() the same treatment as Range apply() etc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35346388\n  
4046,     fix toString  which was missing maximumSize (reported by François Vinassac)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35325729\n  
4047,     Rewrite HashBiMap to share entries between the forward and backward maps  yielding ~38% savings on memory \n\nThis imposes a small performance hit in the case of duplicate keys or values -- at most one addition traversal of a hash table bucket -- but no more \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35322418\n  
4048,     Fix javadoc of ClassSanityTester by replacing  public  with  non-private  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35290790\n  
4049,     Try to improve Multimap class docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35290017\n  
4050,     Add LegacyHashing fprint96() (aka  the first 12 bytes of the SHA-1 hash) \nAllow a MessageDigestHashFunction to return a subset of it s digest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35289881\n  
4051,     Added null tests against return values of MoreExecutors and Futures\n\nTested: [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35282579\n  
4052,     Add a special case for ImmutableSet copyOf(EnumSet) delegating to Sets immutableEnumSet \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35258318\n  
4053,     Remove scope=provided for jsr305 \n   google com/p/guava-libraries/issues/detail?id=1152\n\nPlus  remove type=jar  which is already the default \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35233240\n  
4054,     Remove obsolete maven configuration which used to merge in METADATA MF files into the jar  but no longer needs to  since maven will just scoop up the created METADATA MF produced by the osgi bundle generator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35231748\n  
4055,     Miscellaneous cleanup \n- Fixed Findbugs @Nullable problems \n- Fixed Javadoc warnings \n- Fixed Unsigned* doc copypasta  and generally made it more consistent \n- Documented exceptions in Uninterruptibles \n- Used NPT setDefault instead of an checkNotNull call for newEnumSet \n- Added Abstract*Service explicit constructors and docs \n- Fixed <p><b>Note</b></p> in SourceCodeEscapers \n- Fixed  to be be  in cartesianProduct \n- Fixed    in RetryingCallable doc \n- Fixed weird indent on call to createTestSuite \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=35230825\n  
4056,     Add a benchmark comparing CRC32 and Adler32 hashing using the Checksum API directly and using the common hash API \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34984248\n  
4057,     Implement DescendingImmutableSortedSet  a skeleton implementation of ImmutableSortedSet descendingSet() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34936379\n  
4058,     Remove ImmutableSetMultimap SortedKeyBuilderMultimap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34927857\n  
4059,     Delete TransformedImmutableSet  which was a skeleton abstract class with only one subclass anyway \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34859558\n  
4060,     Eliminate Iterators unmodifiableListIterator  which was package-private but never used \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34641948\n  
4061,     Rewrite TreeRangeSet implementation to use its own  smarter complement implementation   Most notably  complement() encloses(Range) is now a logarithmic-time operation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34639480\n  
4062,     Added getSimpleName() to ClassPath ClassInfo because some users might want to check on the class name prefix? There is already user who checks on the suffix \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34629374\n  
4063,     Some javadoc improvement of AbstractPackageSanityTests and ClassSanityTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34624992\n  
4064,     Added new API to allow filtering methods by return types:\n\nnew ClassSanityTester()\n forAllPublicStaticMethods(Iterables class)\n thatReturn(Iterable class)\n testNulls();\n\nThis better targets the tests against methods that need to be tested  and avoid pointless failures for methods that don t need to be tested \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34588474\n  
4065,     Applied package sanity tests to common util concurrent\n\nTested: [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34588014\n  
4066,     Add a microbenchmark for c g common base Joiner and other common implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34581745\n  
4067,     Specify exact CPP equivalents for murmur3 hashing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34580858\n  
4068,     Deprecate Hashing padToLong(HashCode) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34579256\n  
4069,     add equals/null tests for HashCodes\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34563347\n  
4070,     Add equals/hashCode to Suppliers  and tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34552771\n  
4071,     Make ListenableFutureTask non-final but not subclassable externally \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34552583\n  
4072,     Fix typo in comment about where test constant came from \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34551664\n  
4073,     Add HashCode padToLong() to replace Hashing padToLong(HashCode) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34550858\n  
4074,     Speed up notably slow math tests for GWT s sake \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34540675\n  
4075,     A few miscellaneous changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34536148\n  
4076,     Add Java Checksums (CRC32  Adler32) to Hashing \n\nThis is done so that we can allow users to easily compute the checksum of some bytes (a file  say) without having to use the Checksum API directly \n\nAlso add an abstract Hasher shared by MessageDigestHashFunction and ChecksumHashFunction  since they operate basically the same way \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34509490\n  
4077,     Add Splitter withKeyValueSeprator(char)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34504065\n  
4078,     Applied package sanity tests to common math\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34503919\n  
4079,     Fix a bug so we actually store the cause of cancellation in cancelled futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34502625\n  
4080,     Applied package sanity tests to common io\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34502521\n  
4081,     Applied package sanity tests to common eventbus\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34501606\n  
4082,     Remove serializable=true from ArrayTable\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34500078\n  
4083,     Make ArrayTable gwt compatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34495130\n  
4084,     Changed ClassSanityTester to not to attempt to instantiate the class if no instance method needs to be tested for nulls  This avoids unnecessary test failures for classes that don t need null check after all \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34466316\n  
4085,     Applied package sanity test to common cache  I had to add some checkNotNull() to LocalCache and CacheLoader  based on my understanding of the javadoc  Though it does change the contract: some didn t throw NPE on null  some threw UncheckedExecutionException \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34462784\n  
4086,     applied package sanity tests to common hash\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34460278\n  
4087,     Implement ImmutableRangeSet \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34454241\n  
4088,     Added PackageSanityTest to common/primitive\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34437463\n  
4089,     Replace SingletonImmutableMap with SingletonImmutableBiMap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34396548\n  
4090,     Some minor further optimizations to Ordering leastOf \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34392353\n  
4091,     Guava issue 1154: use the new String(byte[   Charset) constructor directly\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34385923\n  
4092,     Remove <E extends Enum<E>> from GWT ImmutableEnumMap  reducing code bloat \nWe still don t really know why this happens  but the difference is huge \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34349121\n  
4093,     Implement ImmutableEnumMap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34322860\n  
4094,     Applied package sanity tests to common/base\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34319507\n  
4095,     Implement Sets cartesianProduct to iterate in lexicographical order   In the process  Lists cartesianProduct has been implemented on a package-private basis \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34279184\n  
4096,     Change ImmutableClassToInstanceMap#getInstance() to reject null Class\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34262782\n  
4097,     Change the HostAndPort java to support case like  hostname: \nHere\ s the string does include a  :  but does not have the port number  before this CL  HostAndPort java tries to parse the empty string after  :  to a number and throws a NumberFormatException \nIn this case  it should treat the port is undefined instead \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34245642\n  
4098,     Applied package sanity test to common/collect  Had to add publicApiOnly() because there are a lot of package-private classes that should either not be tested (the shim classes) or are already covered by another test  like the various *ContiguousSet classes covered by ContiguousSetTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34235956\n  
4099,     Improve consistency of Javadoc for Multisets union/intersection/sum/difference  highlighting how they differ and the mathematical operation each is based on \n\nAlso get rid of an unnecessary call to Math max \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34230467\n  
4100,     Add Multisets union \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34224294\n  
4101,     Add Multisets sum and Multisets difference \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34223499\n  
4102,     Fix Ordering leastOf for very large k\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34196765\n  
4103,     Makes FreshValueGenerator more friendly to collection types especially immutable collection types  This reduces false positives and also reduces the need to set sample instances for collection types \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34163462\n  
4104,     Add Ordering greatestOf(Iterator  int) overload  and fix the doc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34132823\n  
4105,     Optimize Ordering leastOf() \n\nThis change reduces the temporary memory required by Ordering leastOf to O(k) instead of O(n) -- typically  astronomically smaller \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34131161\n  
4106,     Fix typo in code sample for ForwardingWrapperTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34069677\n  
4107,     Added testEquals() to AbstractPackageSanityTests \n\nExtracted some of the code into a new ClassSanityTester class \n\nAlso added utility to test factory classes such as Predicates  for example:\n\nnew ClassSanityTester() forAllPublicStaticMethods(Predicates class)\n testEqualsAndSerialiable();\n\nThis cannot be performed by package sanity tests because there is no reliable pattern to tell that a class is a factory class (using plural is tricky in i18n if not anything else)  But I think adding a simple test to PredicatesTest for Predicates is already a lot easier \n\nAdded javadoc to explain which case are covered by these automated sanity tests and which aren\ t \n\nAdded ItemReporter to RelationshipTester and EqualsTester so that the error message can be customized  The default  group i  item j  message is useless for automated test  since user didn\ t explicitly create the equality groups and the group numbers and item numbers are meaningless to users \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34054176\n  
4108,     Refactor RangeSet into an interface and an abstract skeleton\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34047917\n  
4109,     Move a comment that had become out of place \nThis bothered me when I noticed I d accidentally done it  so what the heck \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34035516\n  
4110,     Eliminate EmptyImmutableMap  using ImmutableBiMap of() everywhere instead \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34006338\n  
4111,     Add toString() to DiscreteDomains\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34006016\n  
4112,     Add documentation in Iterables getNext(Iterable  Object) that says that if no default value is desired  to use iterable iterator() next() instead \n\nThis is a 7 month late CL that I said I\ d do  tomorrow  in    google com[ d/msg/java-libraries-discuss/nXCh1owtVmw/5w493bgRgp0J  \nSee also these other threads asking the same question:    google com[ d/topic/java-libraries-discuss/TTyhA8ifTew &    google com[ d/topic/java-users/iA6Kav0D7XM  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=34002097\n  
4113,     Remove an unused import \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33904446\n  
4114,     define strict ordering over ClassInfo so that ordering is deterministic  Also renamed getClasses() to getTopLevelClasses() to be more explicit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33904815\n  
4115,     Fix a compile error in Java 7:\n\nerror: name clash: apply(T#1) in Predicate and apply(F) in Function have the same erasure  yet neither overrides the other\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33900718\n  
4116,     Rename expandFor in Immutable builders \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33900350\n  
4117,     Document the NPE in UnsignedLongs parseUnsignedLong\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33899913\n  
4118,     External Guava issue 1148: avoid explicitly copying ImmutableEnumSets\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33899746\n  
4119,     Remove Eclipse-based compiler error  The method set(int  Optional<V>) in the type List<Optional<V>> is not applicable for the arguments (int  Optional<capture#66-of ? extends V> \n\nAlso  remove unused import  (!)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33894774\n  
4120,     Add a single parity test with known output from SMHasher (python) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33886930\n  
4121,     Update javadocs to suggest using a PQ or MMPQ if the entire iterator\ncannot be held in memory at once \nAdd test for leastOf including null elements (the reason we can t use\nan ImmutableList as a return type) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33790169\n  
4122,     A number of small changes and fixes in EventBus:\n- flattenHierarchy was catching an exception that couldn t be thrown because the CacheLoader doesn t throw a checked exception  Fix it to catch the right exception type \n- Change eventsToDispatch to use non-thread safe queues since it s a ThreadLocal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33790152\n  
4123,     Simplify places in CharMatcher where StringBuilder is used unnecessarily \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33785205\n  
4124,     Change the default executor of the AbstractScheduledService so that it is shutdown when the service reaches a terminal state   This ensures that a stopped service cannot prevent the JVM from exiting \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33759240\n  
4125,     Clarify the wording of the exception messages in Optional subclasses \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33759112\n  
4126,     Experimental EventBus CL that reduces the overhead of reflection in the\ncase where a lot of EventBus instances are created and the same type of\nobjects are registered on all of them  This makes a difference of about\n4x in one app \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33742203\n  
4127,     Extracted FreshValueGenerator from ForwardingWrapperTester to a stand-alone class so it can be reused for automated equals testing \n\nFixed a bug in freshCurrency() because apparently no all Locale s can be passed to Currency getInstance() \n\nAlso added Parameter getInvokable()  I find that not having it forces me to pass around the Invokable together with the Parameter  which is inconvenient  And the backward reference isn t unprecedented  Method getDeclaringClass() does it too \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33689642\n  
4128,     Allow synchronous calls to EventBus post() \n\nAs we re only reading the set of registered event handlers when an event is posted  it is more efficient to split the lock on handlersByType into read and write locks and only acquire the write lock in register() and unregister() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33685413\n  
4129,     Fix thread-safety of EventBus \n\nIn a previous change  handlersByType was converted from a ConcurrentMap to a SetMultimap  However  the SetMultimap returned by Multimaps newSetMultimap is not threadsafe when concurrent operations update the multimap  even if the map and set factory are  This can cause registered subscribers to stop receiving events because they are dropped from the multimap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33680249\n  
4130,     Added AbstractPackageSanityTests to apply automated sanity tests for an entire package \n\nYaks I needed to shave:\n- move a piece of reusable code from NullPointerTester into a new DummyProxy class \n- Added a few new default values to ArbitraryInstances  (I m thinking to change the default value of numbers to 1  in a separate CL)\n\nAdded PackageSanityTests to common reflect and common testing  as dogfooding  Had to add some @Nullable and missing checkNotNull() as a result \n\nSince APST is classpath sensitive  there are a lot of top-level class fixture files in the packagesanity package and each test case corresponds to a single java_test rule  That makes the CL more daunting than it actually is \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33660554\n  
4131,     Changed AbstractInvocationHandler#equals() and hashCode() to delegate to the invocation handler  to allow customization  I needed it to create dynamic proxies that works for SerializableTester reserializeAndAssert() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33639720\n  
4132,     Release Futures withFallback to Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33473424\n  
4133,     Reconcile the cancellation semantics for Futures combine  successfulAsList  allAsList  and withFallback to be consistent with Futures transform   Now  all cancellations are back-propagated to the input futures   We also expose the interruption state in AbstractFuture with a protected method   To ensure the interruption state is correct and threadsafe  we add an additional state to AbstractFuture s inner Sync class to atomically distinguish between cancelled and interrupted \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33468640\n  
4134,     Add tests for ConcurrentSkipList Map Set  and for a TreeMap with no comparator \nThe latter requires suppressions for the same reason that our no-comparator TreeSet tests do: The first element is wrongly permitted to be inserted even if it s null \nAlso  fix up a few misnamed methods and a copy-pasted doc comment \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33468471\n  
4135,     Changed NullPointerTester to use Invokable\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33440442\n  
4136,     Added  TypeToken#method() and constructor() to return Invokable<> with types resolved;\n\nAlso changed Invokable from(Method) to return Invokable<?  Object> since now clients can start from TypeToken from() to get a really invoke()-able Invokable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33436645\n  
4137,     Assorted cleanup:\n- Fix bogus  ImmutableMap keySet  name for ImmutableMap test \n- Remove unused FeatureUtil manual GWT emulation \n- Remove one odd whitespace occurrence \n- Fix Closeables Javadoc code formatting  plus other tweaks \n- Change @link to @linkplain and Equivalances to Equivalence in Equivalence \n- Fix various Javadoc warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33430865\n  
4138,     Add ClassPath#getClassesRecursive() \n\nRemoved ClassPath#getClasses(Package) for this subtlety in java lang Package\ s javadoc:\n   Within each ClassLoader instance all classes from the same java package have the same Package object   \n\nI\ m afraid that someone aware of the Package API may get confused by the getClasses(Package) and think that it will only return the classes the share the  same  Package object  while in fact it\ s only searching by name  not Package object identity  In other words  this method has the potential to be ambiguous semantically \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33425579\n  
4139,     Graduate labs reflect Invokable and labs reflect Parameter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33397919\n  
4140,     Change Splitter#on(String) to Splitter#on(char) for single character strings\n- Results in a 10-25% performance improvement see bug for details\n\nCL generated by running the following:\n\n#!/usr/bin/perl -pi\ns Splitter\\ on\\(\\ \\\\( )\\ \\) Splitter on(\ \\\\$1\ ) g;\ns Splitter\\ on\\(\\ ( )\\ \\) Splitter on(\ $1\ ) g;\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33393713\n  
4141,     Fix small javadoc typo in Stopwatch#elapsedMillis \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33384805\n  
4142,     Add getClasses(package) to ClassPath  IO now happens at the time ClassPath from(ClassLoader) is called  rather than getClasses() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33383562\n  
4143,     Benchmark Splitter#on char vs String length==1  char wins by a bit\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33356556\n  
4144,     Added ClassPath for exploring class path from a given ClassLoader  The class path system property is what the system class loader uses  The  meat  of the code is actually copied from AbstractModulePackageInfoSource from test suite builder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33345052\n  
4145,     Trivial fallout from internal-only change \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33239275\n  
4146,     Release permutations()-based test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33236453\n  
4147,     Make ServiceManagerTest @GoogleInternal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33204393\n  
4148,     Implement ServiceManager  the new better CompositeService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33185556\n  
4149,     Add an autoIncrementStep to FakeTicker  similar to the autoIncrementStep in FakeClock\n\nfor context: This API change is discussed in    google com[ d/topic/java-libraries-discuss/0rNUmTjRz_4/discussion\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33183758\n  
4150,     Added forwarder tests for various Forwarding* classes in util/concurrent  Added ForwardingObjectTester to test any subclass of ForwardingObject  Since it has to use EasyMock partial mock  I had to place it under javatests/  Along the way  fixed a few oversights in ForwardingWrapperTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33148165\n  
4151,     Deprecate Ranges now that the majority of callers have been migrated \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33144339\n  
4152,     Sorry  forgot to add @since to the methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33141201\n  
4153,     Add Futures allAsMap and Futures successfulAsMap as analogues to  all successful AsList \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33120330\n  
4154,     Added ForwardingWrapperTester to test forwarders  It lacks guava annotations  Please advise  Thanks\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33116315\n  
4155,     Update BloomFilter to implement Predicate \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33114990\n  
4156,     Added tryAcquire() and tryAcquire(int) to match with semaphore and to simplify client code when wanting to attempt to acquire a permit with zero wait time \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33098174\n  
4157,     Migrate callers from Ranges * to Range using automated search and replace   The following commands were used:\n1) sed -i  s/\\([^a-zA-Z \\)Ranges\\ /\\1Range\\ /g \n2) [ -bin/java/com/google/devtools/javatools/imports/ImportTool --remove=com google common collect Ranges --add=com google common collect Range\n\nTested:\nreviewed submit queues\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33090428\n  
4158,     Fixed JoinerTest by adding back the old setDefault(Object) call  The previous deletion was not tested against moe  Changed the test to cover package-private methods so that moe is covered; changed Joiner to add a missing @Nullable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33083585\n  
4159,     Remove final switch from CaseFormat \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33061765\n  
4160,     Fix incorrect @SuppressWarnings annotations:\n\n@SuppressWarnings( deprecated )\n\nshould be:\n\n@SuppressWarnings( deprecation )\n\nTested:\nTAP presubmits for global presubmit queue\n[ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33053189\n  
4161,     Added null check from NullPointerTester-generated proxies \n\nIt should be reasonable for the follow method to check null through a collaborator:\n\npublic void foo(String a  RejectNull b)  \nb rejectNull(a);\n \n\ninterface RejectNull  \nvoid rejectNull(String s);\n \n\nBecause RejectNull *should* throw NPE by contract \n\nIf NPT generates this proxy  it should make sure the proxy checks nulls mandated by the method signature \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33016839\n  
4162,     Copy LimitInputStream implementation to ByteStreams \nDeprecate LimitInputStream \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=33000215\n  
4163,     Add method to CaseFormat enum instead of using a switch \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32995795\n  
4164,     Fix CacheBuilderSpecTest (issue 6453130)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32994791\n  
4165,     Add enough @Nullable annotations to make Findbugs happy \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32971318\n  
4166,     Add @Nullable to methods which take a @Nullable default value \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32966990\n  
4167,     Fix remaining callers of NullOutputStream in c/g/common \nMOE insert public for c g common io NullOutputStream \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32965282\n  
4168,     Remove @Beta from Queues (and all of the static factory methods) \nAdd @link tags from Lists and Sets to Queues \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32963365\n  
4169,     Swallow unchecked exceptions in immediate future listeners\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32958093\n  
4170,     Add toMap  index and uniqueIndex to FluentIterable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32953942\n  
4171,     Point from Function to Functions and from Predicate to Predicates \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32953252\n  
4172,     Some more tests for MoreExecutors\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32929661\n  
4173,     Rewrite Futures immediate*Future with simple immutable Future implementations  and change Futures immediateFailingFuture to not rethrow on Error   This speeds up the creation of immediate futures by a factor of 10  which is significant for  e g  the upcoming asynchronous cache  which uses many more immediate futures  particularly for the translation layer between CacheLoader and AsyncCacheLoader \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32923067\n  
4174,     Store the stack trace of the thread that called cancel in AbstractFuture and attach it to CancellationExceptions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32921728\n  
4175,     Add ByteStreams#limit(InputStream  long)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32916484\n  
4176,     Delegate the Ranges implementations to Range   (I don t know why I didn t do this in the first place )  Also clean up common collect code to use Range and update the docs throughout \n\n(Was cl 32690240  but lost my client)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32911950\n  
4177,     Added some tests covering some edge cases in Futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32879297\n  
4178,     Improve Funnel javadocs about using an enum \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32878801\n  
4179,     Fix a few typos in the javadocs of Queues#synchronizedQueue\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32876603\n  
4180,     Format visibility keywords \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32838713\n  
4181,     Used TearDownStack instead of TearDownTestCase for AbstractExecutionThreadServiceTest\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32830069\n  
4182,     Add tryParse implementation for Doubles and Floats \n\nFrom Louis:    appspot com/6354088/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32829265\n  
4183,     Make FluentIterable toImmutable* package-private and clean up more callers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32827565\n  
4184,     Deprecate FluentIterable toImmutable*  Change a few references to toImmutableList in FluentIterable javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32777184\n  
4185,     Added idempotence test to ExecutionListTest\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32776278\n  
4186,     Change callers of FluentIterable toImmutableSet()  toImmutableSortedSet() and toSortedImmutableList() to call toSet()  toSortedSet() and toSortedList() instead \n\nTested:\nreviewed submit queues\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32770320\n  
4187,     Fixed a race deadlock bug in AbstractServiceTest: when notifyStopped() is called after getStateHistory()  the latter takes the synchronization lock and also waiting on the latch; the former cannot count down the latch because it can t grab the synchronization lock  Also added missing tests for throwing exception from doStart()  doStop() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32768098\n  
4188,     Use object equality instead of reference equality for the Funnel in\nBloomFilter equals() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32766357\n  
4189,     Added tests for stop-while-starting and stop-before-start to AbstractExecutionThreadServiceTest\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32766077\n  
4190,     Add exception unit tests for AbstractIdleService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32745827\n  
4191,     Add to[Set  etc   methods to replace the toImmutable[Set  etc   methods on FluentIterable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32739379\n  
4192,     Add Files getNameWithoutExtension\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32734609\n  
4193,     Rename FluentIterable addTo to copyInto \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32731689\n  
4194,     Fix comment bug \n\nThe comment suggests that the cause of an ExecutionException is passed\nin to  mapper   but that isn t the case according to:\n   [ /#[ /java/com/google/common/util/concurrent/AbstractCheckedFuture java&l=84\n\nIt would actually be nice if the comment were true  but I don t know\nthe consequences of updating the code in AbstractFuture \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32725153\n  
4195,     Use File API for getting extension rather than simple string parsing \nAdd NullPointerTester and fixed the surprising number of casings where we weren t checkNotNull ing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32708936\n  
4196,     Adds Queues synchronizedQueue (@Beta)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32690991\n  
4197,     Further CharMatcher optimizations  eliminating more unused code and especially identifying when the negation is better to precompute than the matcher directly \n\nFrom Louis:    appspot com/6351118/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32687304\n  
4198,     Add missing c g c collect testing manual emulations \nWithdraw c g c escape manual emulations \nAdd internal tests that make it less likely that we ll miss manual emulations in the future \n(It s still pretty likely  though  since the error occurs only if someone creates the fileset and associated test but forgets to update the build rule    )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32681009\n  
4199,     Split CloseablesTest into CloseablesTest and FlushablesTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32662484\n  
4200,     Copy NullOutputStream to ByteStreams nullOutputStream() \nDeprecate NullOutputStream \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32648796\n  
4201,     Move c g c collect testing GwtPlatform to guava-gwt \nEventually it may end up in a new guava-testlib-gwt \nFor the moment  though  let s just get it out of guava-testlib so that we don t need a GWT dependency there \nThis CL also removes that dependency \n\nI ve edited the MOE config to emphasize putting GWT stuff in guava-gwt over all other priorities \nThis moves some  gwt xml files  which likewise would live in a guava-testlib-gwt area \nIt makes a special case for Testing gwt xml irrelevant  so I ve removed it  though we ll want an analogous special case in a guava-testlib-gwt future \n\nThis CL also adds missing JUnit inherits \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32638474\n  
4202,     A few small cleanups to BloomFilter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32612086\n  
4203,     The number of bits can reach Integer MAX_VALUE now  rather than Integer MAX_VALUE/64\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32540182\n  
4204,     Copy factory methods from Ranges to Range \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32544574\n  
4205,     The number of bits can reach Integer MAX_VALUE now  rather than Integer MAX_VALUE/64\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32540182\n  
4206,     Expire entries at insertion+duration instead of insertion+duration+1 to be consistent with the GWT emulation and  we hope  with common sense \nUpdate tests that rely on the current expiration behavior (as identified by global TAP) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32533539\n  
4207,     Add Maps toMap(Iterator  Function) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32512136\n  
4208,     Update Guava version to 14 0-SNAPSHOT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32500914\n  
4209,     Move ComputingMapAdapter to MapMaker \nThis seems to work around the JDK bug that causes    google com/p/guava-libraries/issues/detail?id=950\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32499454\n  
4210,     6799892: Add FinalizableReferenceQueue close method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32452934\n  
4211,     Open source FluentIterable addTo \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32438496\n  
4212,     Total rewrite of emulated CacheBuilder to emulated LocalCache  Features added include recordStats  expireAfterAccess  ticker  and removalListener \n\nThis version is updated to include support for values()  keySet()  and entries()  as well as iterators generated by these  These methods are used occasionally and the removal had led to errors in the first submission \n\nThis version has been tested on failing tests reported last submission and found to have no impact on these tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32427476\n  
4213,     More tests for ObjectArrays \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32321913\n  
4214,     Rename expectedFalsePositiveProbability to expectedFpp \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32320997\n  
4215,     Guava issue 1049: minor optimizations for CharMatcher\n\nFrom Louis:    appspot com/6353073/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32320841\n  
4216,     Automated rollback of dfc51048f549 \n\n*** Reason for rollback ***\n\nNewly unsupported operations causing failures \n\n*** Original change description ***\n\nChanges implementation of emulated CacheBuilder and instead emulated LocalCache  Features added include recordStats  expireAfterAccess  ticker  and removalListener  RefreshAfterWrite was implemented but removed due to reliance on reload() and returned futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32320187\n  
4217,     Changes implementation of emulated CacheBuilder and instead emulated LocalCache  Features added include recordStats  expireAfterAccess  ticker  and removalListener  RefreshAfterWrite was implemented but removed due to reliance on reload() and returned futures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32318049\n  
4218,     Document some possibly surprising semantics of Files copy(File  File) \n\n(Guava issues 515 and 1063 )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32279885\n  
4219,     Make Maps asMap and toMap public and @Beta \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32271388\n  
4220,     Add Maps asMap(NavigableMap  Function) to complete the set of asMap views \n\nAlso fixed views of SortedAsMapView to not allow add or addAll on their keySets and added tests for Sorted and Navigable asMap views to MapsCollectionTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32271281\n  
4221,     Minor formatting changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32270753\n  
4222,     Use normal  compile-time @GwtIncompatible stripping instead of unusual  runtime UOE throwing for getMethod calls \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32236275\n  
4223,     Make the remaining protected method in EventBus package-private \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32234236\n  
4224,     Expose  Int Long Math mean in Guava 14 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32230548\n  
4225,     Fix Findbugs warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32228105\n  
4226,     Remove Iterators skip \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32199129\n  
4227,     Remove AbstractLinkedIterator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32198902\n  
4228,     Remove NullPointerTester#ignore(Member) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32198797\n  
4229,     Add some toString tests for CharMatcher anyOf() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32185623\n  
4230,     Remove c g c base Equivalences \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32160887\n  
4231,     A few small cleanups to Reflection \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32159687\n  
4232,     Assorted cleanup:\n- Remove out-of-date CharMatcher comment \n- Merge ContiguousSetNonGwtTest into ContiguousSetTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32157893\n  
4233,     Improve ImmutableMap of(K  V) error message re: Guava issue 988 \n\nFrom Louis:    appspot com/6427050/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32156881\n  
4234,     Make comments javadocs so MOE correctly strips them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32142622\n  
4235,     Making exception more descriptive when someone tries to proxy a class\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32142551\n  
4236,     Deprecate mutator methods on immutable/unmodifiable classes in common collect   It can t possibly be correct to invoke a method that mutates a collection on an immutable object and this will help catch those errors at compile time   It also has the benefit that IDEs set up to filter deprecated methods from the auto-complete suggestions will filter out the unsupported methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32083827\n  
4237,     Add serialization tests to the Multimap test suites \nFrom Louis:    appspot com/6421047/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32082297\n  
4238,     Fix a comment on AbstractScheduledService Scheduler that implied that you could create subclasses of Scheduler (that are not subclasses of CustomScheduler)   This is impossible since Scheduler has a private constructor \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32059988\n  
4239,     Remove unused methods in c/g/c/ hash reflect /   \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32056245\n  
4240,     HashIterator fix for LocalCache\nRemove a few unused chunks of code from common cache\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32015573\n  
4241,     Fix comment to refer to InternetDomainName isValid instead of deprecated isValidLenient \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32011124\n  
4242,     Remove unused methods from c/g/common/collect\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=32009861\n  
4243,     Remove public from TypeResolver in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31969908\n  
4244,     Updating putString(String) spec and default implementation  to avoid\nforcing implementations to inefficiently deal with unpaired surrogate characters \nThis is an incompatible change for inputs with such characters \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31932872\n  
4245,     Remove unused char[  instance in CharMatcher inRange \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31924666\n  
4246,     Remove unused code \nFrom Louis:    appspot com/6343051/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31920587\n  
4247,     Made TypeResolver @Beta and added clearer document \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31858151\n  
4248,     Rephrase to stop suggesting that there are only two overloads of transform() \nAlso  publicly release a comment in the Future addListener Javadoc about addCallback  which was publicly released in Guava 10 (and already mentioned publicly elsewhere in the ListenableFuture doc) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31833262\n  
4249,     Add tests that the custom hash table implementations expand correctly \nFrom Louis:    appspot com/6351075/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31822084\n  
4250,     Decrease tasks again for get() basher  which currently takes 4x as long as any other cache test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31820210\n  
4251,     Update the handling of gwt xml files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31818898\n  
4252,     Add IntMath mean and LongMath mean  It s an efficient implementation resilient to overflow which is useful when computing midpoints \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31799895\n  
4253,     Rollback gwt xml change \n\n*** Reason for rollback ***\n\nBreaks compilation under --check_constraints=gwt  perhaps other settings?\n\n*** Original change description ***\n\nMake java_and_gwt_library support extra_module_contents  even though java_library doesn t :)\nThis lets us remove our manually maintained (and often wrong)  gwt xml files \nOccasionally we still need an extra_module_contents file  and we should someday figure out why \n(Note: Because java_and_gwt_library has access to information that plain java_library does not  it can actually be a bit smarter about what it puts in the  gwt xml automatically )\nThe net effect on the GWT modules themselves is mostl\n\n    description truncated by g4 rollback    \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31797949\n  
4254,     Fix a bug with CharStreams copy not clearing its buffer after reading \n\nGuava issue 1061:    google com/p/guava-libraries/issues/detail?id=1061\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31793143\n  
4255,     Update the handling of gwt xml files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31782922\n  
4256,     Special-case Immutable List Set  copyOf(Iterator) for 0 or 1 elements  as per Guava issue 691 \n\nFrom Louis:    appspot com/6347069/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31745579\n  
4257,     Force ArbitraryOrdering to handle nulls consistently \n\nFrom Louis:    appspot com/6355072/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31745563\n  
4258,     Add SortedSet overload for Maps asMap(SortedSet  Function) \n\nFrom Louis:    appspot com/6361045/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31720830\n  
4259,     Improve toString() for Supplier/Function implementations in Suppliers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31718621\n  
4260,     Make Suppliers compose(Function  Supplier) toString() return something useful \n\nFrom Louis:    appspot com/6350082/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31715841\n  
4261,     Ensure Cache get expands hash table appropriately\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31657582\n  
4262,     Fix tests for IntMath isPowerOfTwo and LongMath isPowerOfTwo  The existing tests copied the implementation\ncode and therefore were not really testing the code  The tests now use BigInteger \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31628328\n  
4263,     Fixed dropping of CharMatcher description when precomputing \n\nSee    google com/forum/?fromgroups#!search/guava-discuss/guava-discuss/R4vNbxB1xAs/lprChIFnaDkJ\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31609773\n  
4264,     Remove MapMaker: strongKeys()  strongValues()  and valueEquivalence() from MapMaker and friends \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31583111\n  
4265,     Strip out comments pertaining to maximumSize() and expireAfterWrite() (which are no longer public) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31579977\n  
4266,     Remove MapMaker#expiration (scheduled for deletion in July 2012) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31579076\n  
4267,     Remove Iterables#reverse\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31578998\n  
4268,     Remove the use of MoreAsserts from the AbstractServiceTest   Apparently it breaks the maven build \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31573774\n  
4269,     Add MediaType for Google  Sketchup \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31546185\n  
4270,     Introduce an immutable object to encapsulate the mutable state of AbstractService   This will allow us to perform state queries (isRunning  failureCause  state()) without grabbing a lock \n\nAlso  rewrap the file to 100 lines   It was already a little inconsistent and i own the blame on the whole file by this point anyway \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31521820\n  
4271,     Remove c g c base Stopwatch#toString(int) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31520651\n  
4272,     Change the AbstractService so that listeners are called without the lock held \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31519707\n  
4273,     Fix 2 bugs in the AbstractService implementation of listeners \n1  Ensure that the futures are updated before listeners are called consistently\n2  Fix a bug that would cause the running() callback to be invoked when the Service was transitioning from STARTING -> STOPPING directly \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31519336\n  
4274,     A few small cleanups to the murmur3 hash functions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31507627\n  
4275,     Open source a few more of the benchmarks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31487288\n  
4276,     Simplify implementation of ByteStreams hash(); add direct tests for it and getChecksum() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31456068\n  
4277,     Fix javadoc warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31406210\n  
4278,     Add @GI to failureCause overrides \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31400072\n  
4279,     Optimize GCD implementation to use fewer branches for ~25% speedup \nFrom Louis:    appspot com/6306091/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31398961\n  
4280,     Remove some email addresses from @author tags \nAdd a test to try to keep them from creeping in in the future \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31397324\n  
4281,     Optimize BigIntegerMath log10 by using the log2 to get an initial approximation of the log10 \nFrom Louis:    appspot com/6329066/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31397137\n  
4282,     Optimize  Int Long Math log10 with techniques from Hacker s Delight \nFrom Louis:    appspot com/6303085/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31396705\n  
4283,     Add Guava copyright \nOther no-op changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31368650\n  
4284,     Fix more Guava copyright headers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31366544\n  
4285,     Expose TypeResolverTest; various internal reshuffling \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31366061\n  
4286,     Add Guava copyright header to files that were missing it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31355899\n  
4287,     Add @since to Striped \nAdd @GI to Service#failureCause \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31355804\n  
4288,     Fix the formatting of the javadoc in j/c/g/c/util/concurrent/Service   Rewrap everything to 100 cols \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31314728\n  
4289,     Explicitly test that NullPointerTester uses null as a default for @Nullable parameters \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31300698\n  
4290,     Fix a deadlock in the new addListener implementation and also tweak the docs on stopAndWait which are out of sync with reality \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31289338\n  
4291,     Fix a few minor issues in cache javadocs  Some of this patched from fry \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31272683\n  
4292,     Update to latest Mozilla PSL \n\nThe net effect of this change is only to add these 16 public suffixes:\ncom tm com ug co tm edu tm\ngov sx gov tm mil tm net tm\nnet uz nom tm org tm org ug\norg uz sx tv sd wf\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31270763\n  
4293,     Delete Navigable* and Navigable*Test \nMove transformEntries and transformValues implementations into Maps \nMove synchronizedNavigable* implementations into Synchronized \nMove unmodifiableNavigable* tests into MapsTests/SetsTests \nAlso  open-source synchronizedNavigable Set Map  tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31268670\n  
4294,     Addded reference of TypeToInstanceMap to ClassToInstanceMap javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31252218\n  
4295,     Graduate Sets filter (SortedSet overload) from @Beta \nGraduate Maps filter* (SortedMap overloads) from @Beta \nGraduate Multimaps filter* from @Beta \nRelease CycleDetectingLockFactory as @Beta \nRelease UnsignedLong_CustomFieldSerializer to make UnsignedLong GWT-serializable in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31229567\n  
4296,     Add Eclipse  metadata/ folder to  gitignore \n  
4297,     Fix a minor issue in TypeToInstanceMap javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31226970\n  
4298,     VisibleForTesting Javadoc tweaks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31220800\n  
4299,     Make findbugs a provided dependency to avert dep conflicts when using findbugs 2 0 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31212790\n  
4300,     Begin migrating methods from Navigable Maps Sets  to  Maps Sets  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31212696\n  
4301,     Add @Beta to Optional#or(Supplier) and Optional#or(Optional) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31210314\n  
4302,     Release HostAndPortTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31209654\n  
4303,     Add a state transition listening mechanism to Service and implement in AbstractService \n\nThis is the first of several CLs that will change the Service interface  The basic plan is:\n1  add the listener interface (this cl)\n2  add some utility methods for doing timed waits via the listener apis \n3  migrate users of start() and stop() to void versions of those methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31186755\n  
4304,     Make HostAndPort serializable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31186303\n  
4305,     De-@Betaify the c g c collect Tables class\nLeave @Beta on newCustomTable()  transformValues()  and unmodifiableRowSortedTable() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31184139\n  
4306,     Remove @Beta from c g c base Equivalence (leave it on #equivalentTo) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31183871\n  
4307,     Fix comment reference to  toImmutableSortedList  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31183592\n  
4308,     Release RateLimiter as @Beta after cleaning up the todos a bit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31183139\n  
4309,     Allow expectedInsertions == 0 for BloomFilters \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31182172\n  
4310,     Remove @Beta from Multisets methods: containsOccurrences()  retainOccurrences()  and removeOccurrences()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31181488\n  
4311,     Release FluentIterable##toSortedImmutableList \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31181172\n  
4312,     Remove @Beta from Lists newCopyOnWriteArrayList() and Sets newCopyOnWriteArraySet()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31180601\n  
4313,     Remove @Beta from Strings common Pre Suf fix \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31180208\n  
4314,     Remove @Beta from Iterator-accepting methods in Joiner (except for the Map Entry related methods because the Iterable-accepting versions are still @Beta themselves) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31180145\n  
4315,     Implement Maps asMap(Set  Function) view \n\nFrom Louis  (   appspot com/6304066/)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31179035\n  
4316,     Migrate local MediaType constants to the class MediaType\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31178318\n  
4317,     Add caliper as a dependency \nForce build of  benchmark \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31177762\n  
4318,     Give a readable name to the thread used by a delayed shutdown\nhook \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31171327\n  
4319,     Open source lots of Caliper benchmarks!\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31147973\n  
4320,     Make protected methods of EventBus package-private  hiding the package-private EventHandler type \n\nLeaving the one protected method that didn t have EventHandler in the signature protected but @Deprecated for one release before making it package-private as well \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31147025\n  
4321,     Map *Benchmark java files into guava-tests/benchmark (they aren t buildable externally yet  but will be some day) \nOpen source a few Set-related benchmarks as a preliminary test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31143691\n  
4322,     Remove erroneous statement about inability to unregister from eventbus package Javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31129205\n  
4323,     Replace another instance of supertype-finding code in EventBus with TypeToken \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31082777\n  
4324,     Take Iterators advance out of @Beta \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31078297\n  
4325,     Changed callers of Iterators skip to call Iterators advance \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31044719\n  
4326,     Fix copyright notice  other Guava things on Striped \nFrom Louis:    appspot com/6306084/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31038311\n  
4327,     Added min  max  lexicographicalComparator tests\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31034294\n  
4328,     Comment out assertions that fail during mvn testing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31007060\n  
4329,     Mark Hashing#weightedConsistentHash tests as @GoogleInternal\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=31002683\n  
4330,     Removed debug printlines\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30996792\n  
4331,     Added min  max  lexicographical comparator tests to primitives UnsignedInts\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30995925\n  
4332,     Just a little reformatting \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30976931\n  
4333,     Attempt to improve Ordering allEqual() documentation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30975026\n  
4334,     Implement HashFunction#hashString shortcut for murmur3_32\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30974860\n  
4335,     Added Iterators advance and deprecated Iterators skip \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30972849\n  
4336,     Implement HashFunction#hashLong shortcut for murmur3_32\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30967967\n  
4337,     Add shortcut overload for Murmur3_32HashFunction#hashInt \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30962091\n  
4338,     Implement Hashing weightedConsistentHash() \nSee: [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30960525\n  
4339,     Bake the 1 0 load factor into LinkedHashMultimap  eliminating redundant fields for a savings of 8 bytes/distinct key \nFrom Louis:    appspot com/6308061/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30957194\n  
4340,     Make LinkedHashMultimap ValueSet extend ImprovedAbstractSet  tying up the last loose end from Guava issue 1013 \nFrom Louis:    appspot com/6304067/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30956797\n  
4341,     Add @Nullable annotations to computing map/cache implementations to satisfy Findbugs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30931750\n  
4342,     Make methods of Ordering no longer arranged as if by Ordering arbitrary() \n(Ok  it wasn t *that* bad ) Improve class docs a tiny bit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30928085\n  
4343,     Assorted cleanup:\n\n- Add @Nullable annotations to LinkedHashMultimap to satisfy Findbugs \n- Fix indentation in FunnelsTest \n- Remove latent references to Truth from MOE config \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30925508\n  
4344,     Optimize Ordering sortedCopy  eliminating one gratuitous copy \nFrom Louis:    appspot com/6306046/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30917998\n  
4345,     Implement UnsignedInts decode  corresponding with UnsignedLongs decode \nFrom Louis:    appspot com/6285043/\n(after which I extracted a common method on Kurt s suggestion)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30829538\n  
4346,     Reimplement LinkedHashMultimap with a custom  memory-efficient implementation \nFrom Louis:    appspot com/6250063/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30828656\n  
4347,     Changed TypeToken getTypes() rawTypes() to not rely on getGeneric*() methods  to work around the GenericSignatureFromatError \n\nAs a side bonus  classes() won t pay the cost of traversing the entire type hierarchy \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30823174\n  
4348,     More extensive testing for murmur hashing (in prep for shortcut speedups) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30798282\n  
4349,     Replace the use of AbstractSet with a new Sets ImprovedAbstractSet that\nis less susceptible to quadratic-time removeAll() calls  as in Guava\nissue 1013 \n\nFrom Louis:    appspot com/6271045/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30791718\n  
4350,     Marks the methods in Longs regarding byte array conversions as GWT compatible \nand adapts the LongsTest to run the tests in GWT mode \n\nThe only method not yet being GWT compatible was toByteArray  due to a bug in\nhow GWT handles narrowing conversions on byte casts  To fix this  copied\nthe implementation from util UnsignedLongs toByteArray  which is already used\nby GWT applications in [  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30778541\n  
4351,     I believe our snapshots should be called 13 0-SNAPSHOT now \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30703852\n  
4352,     Release Futures dereference() into Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30701037\n  
4353,     Graduate Striped out of labs\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30662139\n  
4354,     Optimize ImmutableList Set SortedSet builders   In particular  uniquify\nImmutableSet/SortedSet contents in-place  and make it so that if an\nImmutableSet/SortedSet is initialized to the correct size and has\nall unique elements  then no copying is done at all \n\nFrom Louis:    appspot com/6210074/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30647962\n  
4355,     Add  stateless and thread-safe  to the HashFunction javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30634203\n  
4356,     Cache the 32-bit and 128-bit hash functions used in Hashing#goodFastHash\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30634030\n  
4357,     Stop depending on an ImmutableSortedSet quirk in getTypes():\nImmutableSortedSet copyOf() currently assumes  for a Set input  that there is no need to deduplicate inputs \nThis is true if the given Comparator if consistent with equals (really  consistent with the original Set\ s definition of equality) \nHowever  if it\ s not  we can get a set with  duplicates  according to the Comparator \ngetTypes() depends on this behavior because it sorts by type-hierarchy depth  which is no reason to treat objects as  equal  \nAn upcoming CL will change ImmutableSortedSet copyOf() to remove this behavior \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30617067\n  
4358,     Fixed recursion in toArray for a couple ConcurentMultimap view collections \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30610815\n  
4359,     Widen presentInstances parameter type to Iterable<? extends Optional<? extends T>> \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30607561\n  
4360,     Added TypeToInstanceMap  ImmutableTypeToInstanceMap and MutableTypeToInstanceMap  mirroring ClassToInstanceMap  One major difference  is that put() and putAll() aren t supported  This is because there is no way to check isInstance() for generic types at runtime  In addition:\n1  I added ImmutableTypeToInstanceMap of() for empty map  I ve wanted similar thing for ClassToInstanceMap in the past \n2  Omitted MutableTypeToInstanceMap create()  With diamond operator coming along soon  do we still benefit from hiding default constructor and exposing static factory? For one thing  default constructor works better with reflection-based frameworks  such as ArbitraryInstances \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30580364\n  
4361,     Multimap is up next in my quest to write new classdocs for every important class we own \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30550395\n  
4362,     Adding wml media type \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30545427\n  
4363,     Fix up a few odd style nits in the UnsignedLongsTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30541742\n  
4364,     Add method to parse a prefixed unsigned long  e g  0xHEX  decimal  #HEX  and 0octal\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30539666\n  
4365,     Basically: sed  s        g \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30535233\n  
4366,     Make LongAdder and SimpleStatsCounter final \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30534531\n  
4367,     Simplify ImmutableSortedMap  reducing memory consumption and simplifying code \nFrom Louis:    appspot com/6218056/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30531807\n  
4368,     Remove a redundant RegularImmutableSortedSet workaround for comparators that are inconsistent with equals() \nThe workaround  added in CL 13880333  existed to support ImmutableSortedAsList \nHowever  it turned out that the workaround was needed for other types  too  and it was added to ImmutableSortedAsList itself (but not removed from RegularImmutableSortedSet) in CL 29041788 \nThis CL removes the redundant RegularImmutableSortedSet copy  moving its comments into the ImmutableSortedAsList copy \nAdditionally  it adds a test to demonstrate that the redundant copy  which is no longer used only by asList()  was causing problems \nOur existing tests caught a similar problem when I applied Louis s pending    appspot com/6218056/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30530740\n  
4369,     Use TypeToken in EventBus to avoid the duplicated superclass-finding logic \nFrom Louis:    appspot com/6195089/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30463039\n  
4370,     Eliminate redundant fields and code from SingletonImmutableMap \nFrom Louis:    appspot com/6211080/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30462649\n  
4371,     De-@Betaify Optional \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30422058\n  
4372,     A few small cleanups to the Murmur3 HashFunctions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30419610\n  
4373,     s ()  ()   g in  java javatests /com/google/common/   \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30381316\n  
4374,     Reduce default values per key for LinkedHashMultimap from 8 to 2 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30373088\n  
4375,     Internal shuffling in FluentIterable with some public spillover \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30372447\n  
4376,     Improved the code coverage of OrderingTest and removed an unused constructor \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30356104\n  
4377,     MOE insert public for the Equivalences class \n@Deprecate the 2 methods in Equivalences \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30352883\n  
4378,     Equivalences -> Equivalence \n\nAnd remove unused imports \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30351331\n  
4379,     Add an executor service that automatically retries tasks on failure   (A continuation of cl/24643522)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30345739\n  
4380,     Exposing an estimate of how the BF performs (without it  it s hard for the\nuser to know when the BF degenerates)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30342458\n  
4381,     Rewrite the ImmutableSortedMultiset implementation for improved efficiency and reduced memory consumption \nFrom Louis:    appspot com/6203097/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30340746\n  
4382,     De-betaify c g c annotations Beta\nDe-betaify c g c base Ascii\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30310396\n  
4383,     Fix name spelling in pom xml \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30309935\n  
4384,     Adds ContiguousSet create(Range  DiscreteDomain)   Follow-up CLs will remove Range asSet(DiscreteDomain) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30308145\n  
4385,     #intFunnel() and #longFunnel() funnels  and a PrimitiveSink --> OutputStream\nwrapper \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30307214\n  
4386,     Copy Equivalences methods to Equivalence \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30304467\n  
4387,     Move the invokeAny implementation to a static method that can be used by ListentingExecutorService that don t extend AbstractListeningExecutorService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30136643\n  
4388,     bug fix: don t decrement count and send spurious notification when refresh+get are concurrent with invalidate\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30128702\n  
4389,     Use callbacks on ListenableFutures to implement invokeAny on AbstractListeningExecutoreService rather than an ExecutorCompletionService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30127153\n  
4390,     GWT/Guava maintenance:\n- Rename com google common collect testing testing-gwt to com google common collect testing Testing  and actually use the existing Testing gwt xml file \n- Annotate classes with @GwtCompatible \n- Open-source GWT files \n- Stop stripping some GWT modules that have since become open-sourced \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30035555\n  
4391,     Exploit my years of hard-earned skill to devise a unit test for Equivalence wrap() get() \nAlmost got it right  but luckily Colin was here to help me \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30014813\n  
4392,     Add Iterable#toString implementation for Splitter#split \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30006050\n  
4393,     Assorted followups from past reviews/discussions:\n- Comment the places where we avoid Iterator allocations \n- Reintroduce assertion failure message \n- Reduce comments in Ordering allEqual \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30005462\n  
4394,     Use Joiner in Iterators#toString \nAdd tests for null element handling \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30005349\n  
4395,     Remove @GoogleInternal from FluentIterable#transformAndConcat (and add @since 13 0)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=30005337\n  
4396,     NullPointerTester hasn t thrown Exception in a while  so stop declaring that all its users throw it \n(My search for users was just plain grep  so I m sure I missed some  but this is a good start  and I m not sure it s worth the effort to seek out more  since that will take more than 30 seconds )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29954788\n  
4397,     Export files that were missing from Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29933483\n  
4398,     Many small improvements in common collect \nFrom Louis:    appspot com/6205045/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29932528\n  
4399,     Add one or two missing tests \nFrom Louis:    appspot com/6190059/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29931664\n  
4400,     Optimize BigIntegerMath binomial to use long arithmetic for as much as possible \nFrom Louis:    appspot com/6170043/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29924844\n  
4401,     Make Truth accessible to all of testlib  not just its tests  now that it s used by the collection-suite builders \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29915599\n  
4402,     Made the size of RegularImmutableMap more conservative \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29893278\n  
4403,     Fill in some missing javadoc  Only checked a small number of files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29888245\n  
4404,     Don t depend on the precise format of the failure message  only that it contains the expected string \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29887759\n  
4405,     Guava issue 988: improve error messages in ImmutableMap \nFrom Louis:    appspot com/6192047/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29885493\n  
4406,     Remove the unnecessary  bulk  operation Features from the TestSuiteBuilders \nFrom Louis:    appspot com/6196048/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29883364\n  
4407,     Optimize Ordering immutableSortedCopy \nFrom Louis:    appspot com/6202050/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29881848\n  
4408,     Remove obsolete JavaDoc referring to a sun net dependence I removed years ago \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29830593\n  
4409,     AUTHORS += Emily Soldal\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29801283\n  
4410,     Introduce MultimapTestSuiteBuilder  hoping to eventually migrate from AbstractMultimapTest \nFrom Louis:    appspot com/6123061/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29800810\n  
4411,     Switch BiMap tests all the way over to BiMapTestSuiteBuilder \nFrom Louis:    appspot com/6127058/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29799739\n  
4412,     Issue 972: Ordering allEqual() \nFrom Emily:    appspot com/6061053/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29799363\n  
4413,     Admit that the TestSuiteBuilder classes aren t *really* GWT-compatible  despite our hacks to make them appear so \nMove the derived generators into separate classes that *are* GWT-compatible \nAlso acknowledge that a bunch of suite() aren t GWT-compatible; GWT has been ignoring them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29798619\n  
4414,     Internal-only changes with some spillover \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29798181\n  
4415,     Internal-only changes with some spillover \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29790005\n  
4416,     Add an optimization for CompoundOrdering to avoid iterator allocation   On my benchmarks  for the common two-comparator case  the speedup is ~30% \nFrom Louis:    appspot com/6092047/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29762878\n  
4417,     Implement basic capacity control for immutable collection builders   We don t expose them yet  though  until the API is agreed upon \nThis will likely pay off with the in-progress immutable collection rewrites  which make much more use of each other s builders internally \nFrom Louis:    appspot com/6092044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29762640\n  
4418,     Serialization scaretext for Lists transform \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29756113\n  
4419,     Fix another non-fatal GWT compile error I introduced:\n[ERROR  Errors in  generated://FD81516CE6734FC4CAA6FA770EC8D576/com/google/common/collect/ForwardingImmutableSet_FieldSerializer java \n[ERROR  Line 12: The method deserialize(SerializationStreamReader  ForwardingImmutableSet) is undefined for the type ImmutableSet_CustomFieldSerializer\n[ERROR  Line 17: The method serialize(SerializationStreamWriter  ForwardingImmutableSet) is undefined for the type ImmutableSet_CustomFieldSerializer\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29727380\n  
4420,     Stop importing ImmutableFoo Builder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29722333\n  
4421,     Optimize DenseImmutableTable so that it doesn t rebuild rows and columns on the fly \nFrom Louis:    appspot com/6066046/\n\nPlus  actually run ImmutableTable tests under GWT (oops) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29719445\n  
4422,     More assorted cleanup:\n- reenable Multiset NullPointerTester tests\n- fix @Nullable annotations and add checkNotNull as necessary to get them to pass\n- remove email addresses from @author tags\n- update explanation of why we can t use Arrays copyOfRange\n- remove completed TODO from fuzzyEquals\n- fix out-of-date AbstractMapBasedMultiset comment\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29718341\n  
4423,     Skip gpg signing by default  which can be overridden on the command-line at release time with -Dgpg sign=false\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29698293\n  
4424,     Add HashFunction#hashFoo shortcuts for AbstractNonStreamingHashFunction \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29681822\n  
4425,     Document the purpose of the or() compilation tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29679858\n  
4426,     Fix broken comment \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29637759\n  
4427,     Export more guava-testlib tests to Guava  and move already-exported guava-testlib tests under guava-testlib \n\nAlso  remove obsolete opensource_files target  (We ve been using opensource_filegroup instead for a while now )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29631103\n  
4428,     Adding some performance remarks/warnings regarding recursive constructions\nof Iterators#concat and Sets#union\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29609623\n  
4429,     Cleanup grab bag:\n- Findbugs warnings\n- compiler warnings (cast  generic array  unchecked)\n- Javadoc warnings\n- unnecessary @Beta tags for package-private classes\n- unnecessary Platform newArray(Class  int) indirection\n- Guava copyrights\n- exception message typo\n- DerivedGenerator documentation\n- parameterized instanceof\n- import sorting in files already changed\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29598347\n  
4430,     Mark the two deprecated digesting methods as @GoogleInternal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29595646\n  
4431,     Guava issue 783: Fix handler finder w r t  subclasses and interfaces \nFrom Louis:    appspot com/5389041/\n\nAlso  open-source existing OutsideEventBusTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29570767\n  
4432,     CharMatcher space improvements (Small = same trick used for Whitespace  Medium = traditional hash table  large = what we do now) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29564154\n  
4433,     Use get() as the example method call on a synchronized Multimap \nThis is probably the most common case  so using a different method as an example was misleading \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29524021\n  
4434,     Remove reference of getGenericInterfaces() from javadoc  it s @GoogleInternal; Added mention of getTypes() and resolveType() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29506914\n  
4435,     Minor simplifications to the ArrayTable implementation \nFrom Louis:    appspot com/6057048/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29492178\n  
4436,     Delete the unnecessary DoubleUtils fastAbs  preferring the JVM-intrinsified Math abs \nFrom Louis:    appspot com/5992076/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29482263\n  
4437,     Rewrite TreeMultiset in terms of a traditional AVL tree  significantly increasing speed and reducing allocation \nFrom Louis:    appspot com/5700055/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29480735\n  
4438,     Update CharMatcher java INVISIBLE for Unicode 6 1 \nu0604 added  new char  gc = format\nu17b4  u17b5 removed  changed gc from Cf to Mn\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29327732\n  
4439,     Add public filter() example to FluentIterable docs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29275867\n  
4440,     Update poms to support properly generated OSGI metadata and signing with GPG\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29254221\n  
4441,     Work around GWT overflow problems in IntMathTest \nThis lets us stop skipping one case of testDivNonZero  and it lets us run testCheckedPow and thus have the confidence to make checkedPow @GwtCompatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29228136\n  
4442,     Fix a build issue in FRQ tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29211136\n  
4443,     Fix coverage runs by excluding FinalizableReferenceQueue ClassLoader-unloading tests from the normal suites \n(I ve confirmed that the test does still run despite the suppression  which applies only to suites )\nI ve also edited our project definition to exclude the new target from coverage runs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29201526\n  
4444,     Fix non-fatal GWT compilation errors:\n[ERROR  Errors in  generated://1DCFAC23BE2D8C9BC205377978109764/com/google/common/collect/ForwardingImmutableList_FieldSerializer java \n[ERROR  Line 12: The method deserialize(SerializationStreamReader  ForwardingImmutableList) is undefined for the type ImmutableList_CustomFieldSerializer\n[ERROR  Line 17: The method serialize(SerializationStreamWriter  ForwardingImmutableList) is undefined for the type ImmutableList_CustomFieldSerializer\nSee snapshot: /export/hda3/tmp/gwttJezSA/com google common collect ForwardingImmutableList_FieldSerializer7338663414191156255 java\n[ERROR  Errors in  generated://678D18D6E583C7FF092AA10F8A0D52A6/com/google/common/collect/ImmutableAsList_FieldSerializer java \n[ERROR  Line 12: The method deserialize(SerializationStreamReader  ImmutableAsList) is undefined for the type ImmutableList_CustomFieldSerializer\n[ERROR  Line 17: The method serialize(SerializationStreamWriter  ImmutableAsList) is undefined for the type ImmutableList_CustomFieldSerializer\nSee snapshot: /export/hda3/tmp/gwttJezSA/com google common collect ImmutableAsList_FieldSerializer2670401979529327298 java\nSneak in a little internal cleanup \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29200972\n  
4445,     Adding Converter<String  String> CaseFormat this converterTo(CaseFormat) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29167278\n  
4446,     Silence GWT serialization warnings:\n\ncom google common collect testing Helpers NullsBeforeTwo\nAnalyzing the fields of type  com google common collect testing Helpers NullsBefore  that qualify for serialization\n[WARN  Field  private final java lang String justAfterNull  will not be serialized because it is final\ncom google common collect testing Helpers NullsBeforeB\nAnalyzing the fields of type  com google common collect testing Helpers NullsBefore  that qualify for serialization\n[WARN  Field  private final java lang String justAfterNull  will not be serialized because it is final\n\nNullsBefore isn t GWT-serializable on its own (whatever that means for an abstract class)  so don t implement Serializable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29166411\n  
4447,     Open-source RangeSet/RangeMap classes so that Louis can rebase his    google com/r/wassermanlouis-guava/source/detail?r=fb106087948b2c0da9f5f6ed610d2df3ebb0240a&name=rangemap on top of them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29159225\n  
4448,     Use a binary release of Truth \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29129847\n  
4449,     Fix UnsignedLongs/UnsignedInts join method \nThe first argument wasn t treated as unsigned \n   google com/p/guava-libraries/issues/detail?id=966\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29126150\n  
4450,     Fix Splitter to handle patterns that have empty matches  like boundaries and look-behind/ahead patterns  without exploding \nFrom Louis:    appspot com/5901060/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29124245\n  
4451,     include CacheBuilderSpec example in external javadoc\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29120699\n  
4452,     Make HashCode implementations serializable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29100445\n  
4453,     Inline Itera*s#getLast into FluentIterable#last due to performance issue in GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29097188\n  
4454,     Eliminate test that uses systemNanos() but expects nano precision  which will break on platforms that only have micro precision   The test isn t really testing anything  so rather than fix it  I m removing it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29095913\n  
4455,     Deprecated NPT ignore(Member); added ignore(Method) overload as the new preferred method  No one ignores constructor in [   And the code to ignore constructor would read less meaningful \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29094202\n  
4456,     migrate from AtomicLong to LongAdder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29046868\n  
4457,     don\ t allow garbage collected values to be  copied \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29043800\n  
4458,     Improve ImmutableCollection asList()  making more asList views delegate contains() queries to the backing collection \nFrom Louis:    appspot com/5785044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29041788\n  
4459,     Fix Guava Javadoc warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29041212\n  
4460,     Fix Guava GWT module:\n- Issue 961: Release java nio charset Charset module to Guava \n- Remove bogus @GwtCompatible annotation from ForwardingDeque    and remove commented annotation from MinMaxPriorityQueue   (IIRC  we have a hack in one of our many levels of processing that just looks for the literal string  @GwtCompatible  )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29041128\n  
4461,     turn of CacheStats collection by default\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29039525\n  
4462,     Address comments left on CL 28921581 and CL 28923961 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29039515\n  
4463,     Address issue 952 on public guava: don t make spaces in parameters mandatory \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29032281\n  
4464,     Some javadoc tweaking to NullPointerTester  Please comment away  I have absolutely no confidence in my wordsmithing\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29029545\n  
4465,     add CacheBuilder recordStats\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29024502\n  
4466,     Some minor tweaks of TypeToken javadoc  While I was reading the release note  these occurred to me as calling for improvement \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=29016235\n  
4467,     Add DoubleMath fuzzyEquals and DoubleMath fuzzyCompare (Guava issue 725) \nFrom Louis:    appspot com/5924043/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28988303\n  
4468,     Make FindBugs marginally happier \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28982197\n  
4469,     Fix old pom wording that contains a reference to sub-packages that is a 2 year old woopsie \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28979425\n  
4470,     Optimize DoubleMath rounding implementations  avoiding branches and expensive floor/ceiling operations where possible \nFrom Louis:    appspot com/5976057/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28923961\n  
4471,     Guava issue 955: orderKeysBy shouldn t conflate keys that compare as equal \nFrom Louis:    appspot com/5969066/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28922962\n  
4472,     Add parseUnsignedByte  toString  and MAX_VALUE to UnsignedBytes \nFrom Louis:    appspot com/5907072/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28921581\n  
4473,     fix version numbers on Guava for non-release trunk to fit with maven version numbering standards \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28904802\n  
4474,     - fix @links to point to LoadingCache\n- internally move LoadingCache methods out of LocalManualCache\n- clarify use of weight in maximumWeight\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28862370\n  
4475,     Remove unnecessary dependency   This modules doesn t contain any tests - the tests for this module are in guava-tests  where this is more appropriately specified \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28859438\n  
4476,     Remove open-source project and code which provides a backported Java6-style ExecutorService for Java5 compatibility  with all the extra build steps involved in using it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28854629\n  
4477,     Queues was released in 11 0 but is missing from package-info \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28850827\n  
4478,     Fix unchecked warnings \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28850534\n  
4479,     @since tweaks:\n- ForwardingSet standardRemoveAll is an override of ForwardingCollection standardRemoveAll  so  as binary compatibility goes  it  inherits  @since 7 0 from its parent   Still  it\ s good document what we changed \n- ImmutableSortedMap changed to implement NavigableMap   That seems worth documenting \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28850312\n  
4480,     Add missing @since tags \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28834851\n  
4481,     Broken people using c g c base Strings in Android (1 5?)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28833864\n  
4482,     - throw InterruptedException from CacheLoader methods\n- propogate interruptions which occur during cache loading\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28832819\n  
4483,     Remove the severely outdated primitive generate scripts \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28829652\n  
4484,     Java6 cleanups for Guava 12 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28829456\n  
4485,     Document the weird problem with Optional<? extends T> along with its workaround \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28829356\n  
4486,     Fix ForwardingList documentation \n   google com/p/guava-libraries/issues/detail?id=873\nFrom Louis:    appspot com/5576046/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28826914\n  
4487,     Use SortedMapTestSuiteBuilder and NavigableMapTestSuiteBuilder more widely \nThis requires two improvements:\n- Generalize NullsBeforeB  intended for use with test elements  a    b    c   etc   to introduce NullsBeforeTwo  intended for use with test elements  one    two    three       \n- Do not require SortedMap keySet() to be a SortedSet (as the interface doesn\ t require this) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28826718\n  
4488,     Make SortedMapTestSuiteBuilder work under GWT \nThere is some restructuring and additions of trivial getters in the builders  but the only real code changes are in GwtTestSuiteGenerator (and the use in ImmutableSortedMapTestSuite) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28819226\n  
4489,     Add FluentIterable toImmutableSortedSet(Comparator)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28795758\n  
4490,     Bunch of small style cleanups/code cleanups to InetAddresses \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28795487\n  
4491,     Use murmur32 for hashing when coercing IPv6 addresses into IPv4 addresses \nAlthough murmur32 is slightly slower  it has fewer collisions (on a sample dataset) and is licensed under the MIT License \nThe hash was last changed on 2010/12/06: [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28793594\n  
4492,     Make ImmutableSortedMap implement NavigableMap \nFrom Louis:    appspot com/5606043/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28789345\n  
4493,     Make MapTestSuiteBuilder (also BiMapTestSuiteBuilder) work under GWT  and then use it there (as well as the non-GWT ImmutableSortedMapTest  where it should have been used already) \n\nThis primarily involves making more derived suites (e g   keySet()  values()  entrySet()) work under GWT \nThe GWT test suites are produced with code generation  so  in order to work under GWT  a derived suite must be recognized by GwtTestSuiteGenerator so that we know how to generate code for it \nI\ ve generalized the existing DerivedTestIteratorGenerator support to support any DerivedGenerator (each of which should have a one-arg constructor accepting its inner generator as an argument) \n\nNow that we run MapTestSuiteBuilder tests  we can remove the individual  manually generated  derived  test suites \n\nThe MapTestSuiteBuilder tests did encounter a couple problems:\n- I had to move NullsBeforeB from MultisetCollectionTest to Helpers so that it could be used more widely (for reasons that its Javadoc hopefully makes clear)   (This was a problem in the test  not the production code )\n- I had to support null queries in the GWT ImmutableSortedMap   (While I was there  I also prevented us from double-wrapping any submaps with unmodifiableSortedSet  since we know that the original map was already unmodifiable   This is a tiny optimization )  The null-query behavior was a  bug   albeit a very small one \n\nTODO(cpovirk): get the SortedMap tests running under GWT\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28784540\n  
4494,     Make KNOWN_ORDER significant for Map tests \n(There are no direct Map tests using KNOWN_ORDER  but we now pass KNOWN_ORDER on to our keySet  entrySet  and values sub-suites )\nStart using KNOWN_ORDER in various tests  including automatically in all SortedMap and SortedSet tests \nIntroduce TestStringSortedMapGenerator to save us from having to write  sort(insertionOrder  Helpers <String  String>entryComparator(Ordering natural() nullsFirst()));  as an order() implementation over and over \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28780249\n  
4495,     warn that Cache asMap get does _not_ automatically load values \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28753957\n  
4496,     Fix up erroneous git rebase?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28743194\n  
4497,     Split SortedMap tests out of NavigableMap tests in preparation for running the former under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28743199\n  
4498,     Changed NullPointerTester to test inherited methods \n\nWe only cover inherited methods from superclasses of the same package  This is\nbecause we don\ t want to step into classes the author doesn\ t own \n\nFor example  one may inherit from AbstractList  even though\nAbstractList#equals() doesn\ t use @Nullable \n\nWhile for classes of the same package  we consider moving a method from subclass\nto superclass a refactoring with no behavioral change  We don\ t want to silently\nlose coverage just because of a  extract to superclass  refactoring \n\nAlso  remove @GoogleInternal from getPackageName \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28743194\n  
4499,     Stop erroneously placing the  normal Java  version of TestPlatform under guava-gwt \n(The GWT version happens to be missing  and we\ ll need to fix that up before the tests can run externally )\nThis fixes the Guava build breakage introduced by my Collections2 CL \n  
4500,     Simplify ImmutableMultiset implementations \nFrom Louis:    appspot com/5780044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28742978\n  
4501,     retract partition and partitionWithPadding from Guava\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28741930\n  
4502,     Fix GWT behavior of  opportunistic  ImmutableList subclasses \nThe  standard  ImmutableLists were fine  but Lists charactersOf() and\nTransformedImmutableList were broken \nUnder Java  they inherited working implementations of their methods; under GWT \nthey inherited versions that forwarded to an empty  delegate  collection \nI\ ve overridden all forwarding methods in the GWT emulation in order to avoid\nthis \nI\ ve also added tests for charactersOf()  which reveal that GWT\nString/StringBuilder doesn\ t perform index checks  so I\ ve added manual checks \nTransformedImmutableList could probably stand to have some tests  too  but at\nleast it will be exercised indirectly through the asList() views implemented\natop it in Louis\ s coming CL  which is in fact what revealed these problems \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28741879\n  
4503,     specify missing version numbers\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28741770\n  
4504,     Fix up deprecation messaging in ByteStreams and Files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28728118\n  
4505,     Add private constructor (pointed out by Louis) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28717208\n  
4506,     A few final minor javadoc fixes to close external guava bugs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28717009\n  
4507,     Remove unnecessary method type parameter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28715773\n  
4508,     Adds a ForwardingDeque \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28714562\n  
4509,     Expose ImmutableSortedMultiset\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28711726\n  
4510,     Change Ascii MIN and MAX from ints to chars \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28708581\n  
4511,     Just reduce the default expectedValuesPerKey for HashMultimap from 8 to 2 \nand for ArrayListMultimap from 10 to 3 \n\nThere s much more we could and should do but these one-character changes seem\nlike pure win to me \n\n   google com/p/guava-libraries/issues/detail?id=447\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28708533\n  
4512,     ComparisonChain compare(boolean  boolean) is too confusing  especially when\nusers have to negate or reverse the parameters so as to get true to come first \nAdding compareTrueFirst and compareFalseFirst  and deprecating compare(boolean \nboolean) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28707952\n  
4513,     more carefully bound the segment count by maximum size/weight\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28665687\n  
4514,     Adds:\n-ByteStreams#hash(InputSupplier  HashFunction) -> HashCode\n-Files#hash(File  HashFunction) -> HashCode\nDeprecates:\n-ByteStreams#getDigest(InputSupplier  MessageDigest) -> byte[ \n-Files#getDigest(File  MessageDigest) -> byte[ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28662456\n  
4515,     Created compact  special-case Unicode whitespace CharMatcher \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28661107\n  
4516,     Fix typo in Javadoc of DiscreteDomain distance \nFix misleading UncheckedExecutionException Javadoc \nProvide dangerous listenInPoolThread that accepts an Executor \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28660317\n  
4517,     Fix FinalizableReferenceQueue class leak which prevented the\nClassLoader that loaded FinalizableReferenceQueue from being\ngarbage-collected subsequently  This is Guava issue\n   google com/p/guava-libraries/issues/detail?id=92\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28624233\n  
4518,     Make Collections2 orderedPermutations work under GWT again \nTo do so  make the minimal (I think) subset of common math required work under GWT \nThis requires suppressing a few cases in the divide() tests due to GWT s non-compliant int implementation (which  for example  occasionally believes that 2147483648 is a valid int) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28659665\n  
4519,     Add more null values to NullValues  and rename to ArbitraryInstances \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28658308\n  
4520,     Strip ImmutableSortedMultiset from package-info  and un-strip ForwardingNavigable* \nStrip FluentIterable getOnlyElement and append methods \nAnnotate TypeParameter as @Beta  and add @since \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28658296\n  
4521,     Fix javadoc of getRawType()  The old one wasn t accurate \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28652466\n  
4522,     Add Apache header to BloomFilterStrategies\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28651552\n  
4523,     - have Iterables return FluentIterables\n- allow FluentIterables to be subclassed\n- withdraw toImmutableSortedList from Guava (will be restored as toSortedImmutableList)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28621161\n  
4524,     Clarify the impact of having a synchronous refresh implementation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28619483\n  
4525,     Add createConstant and createConstantUtf8 static methods  This avoids a lot of the weird initiaization ordering issues and allows us to consistently use create everywhere instead of having to rely on the constructor in some places \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28617806\n  
4526,     Strip references to Google-internal Escape module from Guava \n  
4527,     Remove completely unnecessary type parameter from Iterators skip() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28598708\n  
4528,     Applied missing Apache license stuff to the files I forgot in previous round (oops)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28579696\n  
4529,     Widen the default-accepting methods of Itera*s \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28577590\n  
4530,     Re-word Beta comment to work around MOE bug that strips anything with the word [  in it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28517528\n  
4531,     Fix some typos in MediaType javadocs and error messages \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28512819\n  
4532,     Make ImmutableSortedSet implement NavigableSet \n(Under GWT  it still implements only SortedSet )\nFrom Louis:    appspot com/5590046/\n\nAlso:\nAdd suite-builder tests for ContiguousSet headSet/tailSet/subSet  and make the existing tests run the NavigableSet suite instead of just the Set suite (plus  do the same for some other ImmutableSortedSet tests) \nThese reveal that ContiguousSet has the legal but somewhat antisocial behavior of throwing IllegalArgumentException for inputs outside its  restricted range  and the probably illegal but unlikely to matter behavior of throwing IAE for subSet(x  false  x  false); change both \nAdd GWT suite-builder tests for ContiguousSet  and make the existing GWT ImmutableSortedSet tests run the SortedSet suite (plus  add some missing ALLOWS_NULL_QUERIES features to the existing ImmutableSet tests) \nTo allow those tests to cover the SortedSet methods  separate SortedSetTestSuiteBuilder out from NavigableSetTestSuiteBuilder  include splitting SetNavigationTester (and renaming MapNavigationTester  too  to keep the non-GWT glob simple) \nAlong the way  promote TestIntegerSetGenerator and its SampleElements out of ContiguousSetNonGwtTest  (I think that this may have been necessary for GWT compatibility  but I forget )\nFinally  some small cleanup:\n- Make less use of the scary ImmutableSortedSet(Comparator) constructor  and add warnings to its documentation  (A similar constructor has produced GWT bugs in ImmutableList subclasses  which I plan to look at next )\n- Make /* @Override */ methods use @Override (if possible)  or strip them with @GwtIncompatible (if not needed under GWT) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28502805\n  
4533,     Added default-value auto generation to NullPointerTester  for interfaces (and\ngot rid of the manual registration of Function  Predicate and BinaryPredicate) \n\nTo support generics correctly  I added common/reflect as dependency (which might\nbe\nthe biggest issue) \n\nAlong the way  I needed the dynamic proxy to handler equals/hashCode/toString \n\nSearched around for similar pattern and found about 30 clients that are rolling\ntheir own version:\n[ \nSo I added AbstractInvocationHandler that deals with this  Since NPT needs it  I\nwent ahead and just made it @Beta and apache and everything  If we don t think\nit s worth releasing  I can move it to the common/testing package and make it\npackage-private \n\nTested:\n[ [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28462273\n  
4534,     Un-GoogleInternal a variable used in a test \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28460268\n  
4535,     Deprecate a few more StringUtil trimming methods; several random javadoc cleanups \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28459342\n  
4536,     Some small fixes for Guava (methods called were @GI) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28457946\n  
4537,     Added support for resolving types from type variable and wildcard bounds  Useful when deriving inherited generic method signatures \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28457914\n  
4538,     Range: fairly major javadoc rewriting  Meticulous math term definitions that we no longer supply here can be found on the Guava Glossary page I just created  or on wikipedia for that matter \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28455770\n  
4539,     Make FluentIterabl#of @GoogleInternal\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28454584\n  
4540,     Dump some more blahblah into the @Beta annotation to try to clear up some persistent misconceptions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28454189\n  
4541,     Mark AtomicLongMap @GwtCompatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28453594\n  
4542,     Fix some minor javadoc typos in FluentIterable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28451125\n  
4543,     Make UnsignedLong final \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28448320\n  
4544,     Add superclass safety check in getSupertype()  added @Beta and @since to TypeToken and Reflection \nreflect needs no GWT compatibility  so there seems to be no BUILD dark magic to do?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28428778\n  
4545,     Revert: Widen the default-accepting methods of Itera*s\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28412150\n  
4546,     Widen the default-accepting methods of Itera*s\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28402326\n  
4547,     specify 1 6 as source/target for maven-compiler-plugin\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28377677\n  
4548,     don t unnesessarily constrain type of getIfPresent and getAllPresent parameters\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28374192\n  
4549,     leave from methods as Beta\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28374134\n  
4550,     Filling in coverage for last couple of uncovered branches\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28369624\n  
4551,     Use immutable sets in FluentIterableTest where possible\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28342780\n  
4552,     Remove assorted unused fields and variables \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28333899\n  
4553,     fix cache links\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28332818\n  
4554,     - discuss segment behavior in concurrencyLevel\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28316785\n  
4555,     add warning to Ticker\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28316339\n  
4556,     Release FluentIterable into Guava 12 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28311090\n  
4557,     Nuke 85 lines of code in Collections2 by adopting common math  Which apparently fixed a size calculation bug that wasn t found due to a bad test that thought C(34 14) > MAX_VALUE   (?)\n\nAlso snuck a call to IntMath pow() into cartesianProduct \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28310475\n  
4558,     Adding a custom serialization option  when the space overhead of java serialization\nis significant compared to the BF size itself (i e  for small BFs)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28310115\n  
4559,     Change primitives #toArray to take Collection<? extends Number>\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28305601\n  
4560,     Add MediaType matching according to the model defined in the HTTP/1 1 Accept header \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28299737\n  
4561,     test for indexOf with two array arguments; isEmpty and other methods of BooleanArrayAsList\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28292228\n  
4562,     test for minimum when the minimum is not the first element in the array\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28246126\n  
4563,     delete methods whose Time Has Come\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28245241\n  
4564,     Formal testing of null server and client in TeredoInfo\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28244957\n  
4565,     enhance documentation\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28216272\n  
4566,     Simplify ImmutableMap  providing skeleton implementations of each view \nFrom Louis:    appspot com/5753064/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28206736\n  
4567,     Provide a default subList() implementation in ImmutableList \nFrom Louis:    appspot com/5759058/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28206673\n  
4568,     Make MediaType more lenient when parsing whitespace \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28182440\n  
4569,     Removing unused  untested non-public no-args constructor\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28138884\n  
4570,     Removing unnecessary cast\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28137851\n  
4571,     Complete several TODOs  and introduce TransformedIterator  which simplifies and reduces the overhead of package-internal iterator transformations \nFrom Louis:    appspot com/5730052/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28112037\n  
4572,     Provide failure atomicity in AbstractMultimap put \nFrom Louis:    appspot com/5728049/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28110338\n  
4573,     Simplify ImmutableList and its implementations \nFrom Louis:    appspot com/5731051/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28109145\n  
4574,     Eliminate Platform#unsafeArrayCopy\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28108805\n  
4575,     UnsignedLongs toString is suboptimal \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28107274\n  
4576,     Add c g c net MediaType#TIFF\nFix minor typo in c g c hash Hasher javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28107242\n  
4577,     Make minor simplifications to WellBehavedMap  and small optimizations to ForwardingSet \nFrom Louis:    appspot com/5719046/\n(Also  sneak in a change to make toRemove final )\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28047471\n  
4578,     - new @Beta classes for Guava 12 0\n- @Beta graduations for Guava 12 0\n- remove classes scheduled for removal in Guava 12 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28043743\n  
4579,     BloomFilter changes:\n- Add copy method \n- Add equals method \n- Modify put method to return boolean  indicating whether the underlying BloomFilter bits may have changed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27988892\n  
4580,     Roll back CL 23327883\ s very broken FeatureSpecificTestSuiteBuilder optimization \n(We don\ t clone the tests  so we run all methods against the same target class (the last to be initialized) )\nFix up newly failing tests (except for CompactIntegerListTest  for which I\ ve filed a bug) \nMost are problems with the tests themselves:\n- Test suppressions weren\ t being carried over to tests of the reserialized collections \n- Map values() collections were universally assumed to permit null queries \n- EnumSet was asserted to fail fast on concurrent modification \n- Many ConcurrentModificationException tests advanced the iterator past the end of size-zero or size-one collections \n- It\ s not possible to create an empty collection that contains null  Empty collections don\ t contain anything :)\n- (Bi)MapGenerator create is passed an Object[  containing Entry objects  not an Entry[  \n- (Bi)MapGenerator create is passed an Object[  containing Entry objects  not an Entry[  \n- StandardImplForwardingNavigableMap keySet() returned a SortedSet instead of a NavigableSet \n- StandardImplForwardingNavigableMap implemented lastEntry and descendingSet in terms of one another (using the standard* methods) \n- Tests of null SortedMultiset values fail when run against a nullsFirst() comparator because the nulls are outside the submultiset ranges tested \n- NavigableSets synchronizedNavigableSet(SafeTreeSet) does not allow null queries \n- Tables transformValues() cellSet() permits remove operations \n- collect/testing SmallTests needed their timeout increased \n- CompactIntegerListTest didn\ t specify all the mutation operations it supports \nA few are fixed by improvements to production code that arguably aren\ t strictly  bug fixes :\n- ConcurrentHashMultiset removeAll(collectionContainingNull) threw NPE \n- Maps unmodifiableNavigableMap() subSet/headSet/tailSet returned a SortedSet instead of a NavigableSet \n- NavigableMaps unmodifiableNavigableMap() keySet() returned a SortedSet instead of a NavigableSet \n- RegularContiguousSet contains/containsAll threw NPE (which the EmptyContiguousSet equivalents did not) \n- WellBehavedMap entrySet() remove(null) threw NPE instead of returning false  (The fix removes the need for Sets transform )\nA few more are real bugs:\n- TreeMultiset add(null) succeeded even for comparators that do not permit null \n- TreeMultiset remove(null) failed even for comparators that permit null \n- TreeMultiset iterators couldn\ t remove null elements \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=28001960\n  
4581,     Drop +co yu from changes file now that it s been removed from the Google domains list \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27972295\n  
4582,     Add parsing test that caught a regression in overflow detection \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27952556\n  
4583,     Update to latest Mozilla tld data file \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27943273\n  
4584,     Make startUp and shutdown non-abstract on AbstractScheduledService \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27904180\n  
4585,     - clarify CacheBuilder\ s similarity to MapMaker in the @deprecated messages\n- be more explicit about CacheBuilder Cache\ s  default  behavior\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27837348\n  
4586,     introduce Cache putAll\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27837322\n  
4587,     Guava issue 534: static builders for COWAS/COWAL \nFrom Louis:    appspot com/5273049/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27817252\n  
4588,     remove escapers from Guava (won t make it for Guava 12)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27816445\n  
4589,     Remove c g common escape usages in c g common net MediaType \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27815215\n  
4590,     For all of //java/com/google/common/    and //javatests/com/google/common/   \n-sort imports\n-remove unused imports\n\ng4 edit java/com/google/common/    javatests/com/google/common/   \n\ng4 change\n\n/home/build/[ /tools/java/remove_unused_imports py --fix -c 27791544\n\ng4 list -s 27791544  | sed  s%//depot/[ /%%  | xargs\n/home/build/[ /tools/java/sort_java_imports py\n\ng4 revert -c 27791544 -a\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27803889\n  
4591,     Extracted part of NullPointerTester and Stub into NullValues;\nAdded code to call default constructor if all else failed;\n\nSome potential incompatibility from previous version:\n1  Use ImmutableList of() in place of Collections emptyList()  ImmutableSet of() in place of Collections emptySet()  I don t anticipate issues here \n2  Use ImmutableSortedSet of() in place of new TreeSet()  mutable -> immutable \n3  Use a Comparator that always returns 0  instead of reverseOrder() which requires T extends Comparable \n\nIf this sounds reasonable  I ll send it through global TAP queue to make sure it doesn t break builds \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27791649\n  
4592,     Make MediaType fully GWT-compatible \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27783220\n  
4593,     Make Charsets GWT-compatible now that Charset is emulated \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27776341\n  
4594,     Don t specify weakValues in a flaky test where it s not required \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27770962\n  
4595,     Open-source missing  gwt xml and TestModuleEntryPoint files \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27751596\n  
4596,     add escapers back to Guava\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27739172\n  
4597,     Release MediaType into Guava as @Beta \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27598067\n  
4598,     Write tests to verify that HashFunction shortcuts are equivalent to the long forms   Then fix the legacy hashing implementations to unbreak them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27678321\n  
4599,     Add c g common base Optional#transform(Function)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27673881\n  
4600,     Expose c g common hash HashCodes and its static factory methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27671928\n  
4601,     Remove obsolete TODO from CharMatcher \nAnnotate the return type of Function#apply as @Nullable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27671585\n  
4602,     Make the shortcut methods in the new hashing API faster by using the legacy implementations \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27671418\n  
4603,     add Beta disclaimer\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27667758\n  
4604,     Add @since for Enums getField \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27632359\n  
4605,     Copy Reflection getField(Enum) to Enums getField() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27564524\n  
4606,     Randomizing goodFastHash\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27545564\n  
4607,     Rename com google common hash Sink to PrimitiveSink \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27538021\n  
4608,     Open-source GWT emulation of CacheLoader  which was unintentionally missing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27522709\n  
4609,     Restore accidentally removed Util gwt xml \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27483073\n  
4610,     eliminate trailing whitespace and tabs\n  
4611,     Refactor tests for BiMaps to use BiMapTestSuiteBuilder \nFix a bug with EnumBiMap in which null values throw the forward and backward maps out of sync \nFrom Louis:    appspot com/5642050/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27388061\n  
4612,     Add tests for ConcatenatedHashFunction \nAdd NullPointerTester test for Hashing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27382584\n  
4613,     Add SERIALIZABLE feature to TestSuiteBuilders \nFrom Louis:    appspot com/5635044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27376846\n  
4614,     Release more Queues methods: newAD  newLBD\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27350067\n  
4615,     Add testConstructors()  testStaticMethods()  testInstanceMethods() that take a\nminimalVisibility parameter\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27341632\n  
4616,     Add/document constructors for Forwarding* and their Standard* nested classes \nFix visibility of ForwardingNavigableSet StandardDescendingSet constructor so that it s usable outside the package  e g  \n\npublic static final class MySet<E> extends ForwardingNavigableSet<E>  \n@Override protected NavigableSet<E> delegate()  \nreturn delegate;\n \n\n@Override public NavigableSet<E> descendingSet()  \nreturn new StandardDescendingSet(); // StandardDescendingSet() has protected access in com google common collect ForwardingNavigableSet StandardDescendingSet\n \n \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27336831\n  
4617,     open-source AtomicLong\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27336398\n  
4618,     Add c g common base Enums#getIfPresent(MyEnum class   FOO ) -> Optional\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27314756\n  
4619,     Switching to non-power-of-2 bloom filter sizes  and making serialization more\nfuture-proof \nUnfortunately  this changes the serialized form  since hashBitsPerFunction was\nhardwired\nto the BloomFilter  and that really assumed power-of-two tables \nAlso  this fixes a nasty exponential-slowdown bug that was in the previous version of BloomFilter (that code was added to support serialization  and deleted as part of the new strategy for serialization)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27307766\n  
4620,     Implemented Maps unmodifiableNavigableMap \nFrom Louis:    appspot com/5590044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27271664\n  
4621,     Link pages to the wiki \nFrom Louis:    appspot com/5553067/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27271233\n  
4622,     Improve ForwardingNavigableMap  adding standard* methods \nRelease in Guava \nFrom Louis:    appspot com/5585045/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27260448\n  
4623,     Add documented constructor \nMove private utility method to bottom of file \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27260445\n  
4624,     Changed default sizes of ImmutableSet to be more conservative \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27245924\n  
4625,     Add empty array and enum handling to NullPointerTester; I can also clean up the  throws Exception  though is it better to do it in a separate CL?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27238145\n  
4626,     Add missing @since+@Beta for nested class \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27233385\n  
4627,     Updates math utilities to use JDK 6 methods where possible  addressing several TODOs \nFrom Louis:    appspot com/5587044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27228554\n  
4628,     Implemented Sets unmodifiableNavigableSet \nFrom Louis:    appspot com/5591044/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27228500\n  
4629,     Add legible #toString implementations for CharMatcher \nFrom Louis:    appspot com/5570067/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27203019\n  
4630,     Improve ForwardingNavigableMap  adding standard* methods \nRelease in Guava \nFrom Louis:    appspot com/5591043/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27201643\n  
4631,     Rearranging of methods  plus Javadoc changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27173884\n  
4632,     add osgi metadata\n  
4633,     Update test sizes per feedback from [ \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27164800\n  
4634,     Test suite checking for fail-fast iterators \nFrom Louis:    appspot com/5556071/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27129949\n  
4635,     Created BiMapTestSuiteBuilder \nFrom Louis:    google com/r/wassermanlouis-guava/source/detail?r=7d23827f8dc31cda03829bcadd0d0ef419a00ed4&name=bimap-testsuitebuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27127892\n  
4636,     take core cache classes out of Beta\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27122549\n  
4637,     Make Optional GWT serializable \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27120368\n  
4638,     Remove JDK5 hack now that Guava is on JDK6 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27059690\n  
4639,     allow jdk6 in Guava\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27051331\n  
4640,     - Eliminate serialization warning on TreeMultiset by marking AbstractSortedMultiset comparator as @GwtTransient:    google com/p/guava-libraries/issues/detail?id=871\n- Eliminate reference to long-gone  Note on element equivalence  in Multiset docs \n- Fix ByteStreams copy inconsistency over whether the output is closed:    google com/p/guava-libraries/issues/detail?id=757\n- Link in Partition shouldn\ t contain the space after the word \n- Mention unsigned types in package-info \n- Standardize on  input  for name of input Future parameters in transformation methods \n- Remove deprecated Futures chain for Guava 12 \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27031992\n  
4641,     Strip workarounds for past Google bugs from public release \nIn fact  stripping the allAsList/successfulAsList code is basically a bug fix  as the existing workaround allows get() to block indefinitely after the Future is done \nPast discussion:    google com[ group/java-libraries-discuss/browse_thread/thread/33a137c1707fe40b\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=27022708\n  
4642,     Added new method omitNullValues() to ToStringHelper \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26991532\n  
4643,     AbstractLinkedIterator -> AbstractSequentialIterator \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26926853\n  
4644,     Eliminate unneeded Annotations dependency \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26894404\n  
4645,     Irrelevant no-op diff created by internal-only changes \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26829506\n  
4646,     Remove a few lines of unused code\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26803682\n  
4647,     Add c g common math DoubleUtils#ensureNonNegative\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26762334\n  
4648,     In forUriString()  check the IP version before giving getByAddress()\na chance to collapse mapped addresses from IPv6 to IPv4 \n\nAlso  add a bytesToInetAddress() helper function which lets us\nremove a bunch of UnknownHostException handlers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26697119\n  
4649,     Use  null  for null entries when joining \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26695018\n  
4650,     Provide better documentation for the state transitions that are legal/illegal for a Service to make   Also change the behavior of service start() such that it will now throw exceptions when trying to start a TERMINATED or FAILED service \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26691313\n  
4651,     Deleting (again) the weird Interners#newInterner(GenericMapMaker) method: has been mostly unused  and not entirely correct\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26688481\n  
4652,     Some small test changes that I found forgotten in my client \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26686444\n  
4653,     clarify verbage regarding the cleanup of entries with reclaimed keys/values (Issue 841)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26627817\n  
4654,     add softKeys scare text\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26614390\n  
4655,     fix broken javadoc links  per issues 853 and 855\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26594437\n  
4656,     remove from Guava methods which were scheduled for deletion in release 12 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26591946\n  
4657,     Add awaitFullGc()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26591095\n  
4658,     specify that asMap never auto-loads entries\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26581537\n  
4659,     reorganize hash tests\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26573308\n  
4660,     Typo\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26568675\n  
4661,     add new patterns\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26562202\n  
4662,     properly adjust size/weight on clear calls without a removal listener\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26558016\n  
4663,     add pm\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26523300\n  
4664,     new hash tests\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26509373\n  
4665,     Fix bug in Optional#presentInstances \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26472796\n  
4666,     Using a MessageDigest per Hasher  not per MessageDigestHashFunction (making the latter thread-safe)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26416662\n  
4667,     @GoogleInternal to CycleDetectingLockFactoryTest\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26393155\n  
4668,     Mentioning the number of hash bits to algorithms where it is not quite clear from their name \n(I also add them for sha-256 and sha-512  though these are more obvious)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26389968\n  
4669,     Remove MOE stripping of public modifier from c g c base Joiner\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26365643\n  
4670,     Add leak-detection example \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26365358\n  
4671,     Use GcFinalization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26339509\n  
4672,     Make the Joiner Iterator/Iterable accepting overloads package-private (MOE public) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26321753\n  
4673,     Make the Maps/Multimaps Iterator/Iterable accepting overloads package-private (MOE public) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26321384\n  
4674,     Use GcFinalization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26310755\n  
4675,     CycleDetectingLockFactory creates ReentrantLocks and ReentrantReadWriteLocks\nthat detect potential deadlock by checking for cycles in lock acquisition\norder \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26303617\n  
4676,     This fixes to publicly filed bugs against the AbstractScheduledService:\n\n   google com/p/guava-libraries/issues/detail?id=826&sort=-id&colspec=ID%20Type%20Status%20Milestone%20Summary&num=200\n   google com/p/guava-libraries/issues/detail?num=200&colspec=ID%20Type%20Status%20Milestone%20Summary&sort=-id&id=825\n\nIt fixes some typos in the example class and adds some more documentation specifying the concurrency guarantees that the service provides \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26297114\n  
4677,     - allow a small amount of leniency in expiration timestamp ordering during concurrent reads\n- use ticker to make strong assumption about expiration\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26292370\n  
4678,     - remove transform(Future  Function) for 11 0 as promised\n- fix @since formatting\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26291224\n  
4679,     Add Iterator support to c g common base Joiner\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26290845\n  
4680,     Fixing bug in NullPointerTester  where it fails spuriously for methods with no default value for @Nullable parameters \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26289693\n  
4681,     - remove methods scheduled for deletion in 11 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26259157\n  
4682,     Fix two aspects of the AbstractScheduledService CustomScheduler implementation\n1  Give the abstract callback method a more intuitive and convenient signature which will make it easier to ensure that weird things don t happen \n2  Handle exceptions thrown from the scheduling callback   Previously if this method threw an exception the service would silently stop running   Typically without any logging or notification of any kind \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26228216\n  
4683,     Fix SingletonImmutableSet s isHashCodeFast()  and slightly reduce its memory footprint \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26227772\n  
4684,     Open source c g common hash into Guava 11 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26225631\n  
4685,     fix spacing\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26220833\n  
4686,     remove escapers from Guava for now\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26201712\n  
4687,     Fix UnsignedInteger documentation \nFrom Louis:    appspot com/5488051/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26200863\n  
4688,     Avoid generating garbage while evaluating and() and or() predicates \nExternal guava issue:    google com/p/guava-libraries/issues/detail?id=820\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26198729\n  
4689,     remove tests of absent code\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26198410\n  
4690,     Updating Javadoc and removing commented-out lines\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26197988\n  
4691,     - Cache get(K  Callable<V>) => get(K  Callable<? extends V>)\n- more clearly document how Cache methods moved to CacheLoader should be dealt with\n- explain what expireAfterAccess does and doesn t count as an access\n- recall RangeSet from Guava\n- tweak Queues javadoc\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26193165\n  
4692,     deprecate MapMaker s caching methods in favor of CacheBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26186850\n  
4693,     rename CacheBuilder refreshInterval to refreshAfterWrite\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26186574\n  
4694,     exclude base internal from javadoc\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26186322\n  
4695,     Add package-info for math \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26186233\n  
4696,     Fixing the issue of XmlWriter not escaping \\t  \\n and \\r in the\nattribute value   This change adds XmlEscapers xmlAttributeExcapte() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26174331\n  
4697,     Use tryLock to avoid expensive calls to nanoTime when possible (only if not fair) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26172551\n  
4698,     Add inverse() method to Immutable  Set List Multimap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26169224\n  
4699,     Retract tryParse overload that accepts a radix from Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26163146\n  
4700,     Eliminate the reevaluateGuards method of Monitor and tighten the contract of Monitor Guard \n\nAs Dimitris Andreou argued   reevaluateGuards()     doesn\ t seem to offer any advantage     over     use of Condition  Basically you give up implicit signaling  the main selling point of this class  and revert to manual signaling  Why not leave that scenario to Condition  and make this class simpler to use for its own sweet spot? \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26121010\n  
4701,     Remove @GuardedBy annotation from all public methods of Monitor \n\nRationale: It\ s arguably incorrect for leave  which gives up the lock  It doesn\ t make sense for the other methods either because  lock  is meaningless to users of the class  Furthermore  every one of these methods checks whether the lock is held if necessary  so there\ s not actually any danger in calling them incorrectly (they fail fast) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26114296\n  
4702,     remove spurious new method\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26108853\n  
4703,     add more missing @since tags\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26105362\n  
4704,     add GwtSerializationDependencies\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26103631\n  
4705,     add missing @since tags  per the jdiff report\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26103222\n  
4706,     Make CharEscaper escapeSlow final (as UnicodeEscaper escapeSlow already is) \nNo one overrides it \n\nAlso  make Escaper asFunction final \nI could be convinced that it isn t worth the effort  but it s hard to imagine why anyone would want to override this \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26086749\n  
4707,     Add Ints tryParse  The implementation is based off that of Android s java lang Integer#parseInt \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26080239\n  
4708,     Restore LocalCache LocalManualCache  apply get getUnchecked  to fix Guava compilation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26079466\n  
4709,     Remove Futures chain internally  though it will go out in Guava r11 before being removed in r12 \nRoll back temporary AbstractFuturesChainTest mess from 25962636 (but restore FuturesChainTest as  FuturesTransformAsyncFunctionTest  \nAlso  fix a copy-and-paste error in the AsyncFunction Futures transform Javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26078097\n  
4710,     Add c g common collect Sets#newLinkedHashSetWithExpectedSize\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26074694\n  
4711,     add new Cache/LoadingCache methods to RemovalCause javadocs\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26048028\n  
4712,     emulate CacheBuilder in GWT  gwtifying all requistie dependencies\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26046933\n  
4713,     Convert more users from to-be-deprecated Futures chain to new AsyncFunction-based Future transform \nDeprecate Futures chain \n\n- xargs perlsed  Function<(\\s*)( *) (\\s+)ListenableFuture<(\\s*)([^?  *)>>(\\s+)( *)(\\s+)=(\\s+)new(\\s+)Function<(\\s*)( *) (\\s+)ListenableFuture<([^?  *)>>   AsyncFunction<$1$2 $3$4$5>$6$7$8=$9new$10AsyncFunction<$11$12 $13$14>  < files\n- xargs perlsed  Function<(\\s*)( *) (\\s+)ListenableFuture<(\\s*)([^?  *)>>   AsyncFunction<$1$2 $3$4$5>  < files\n- xargs perlsed  \\bFutures chain  Futures transform < files\n- importtool --add=com google common util concurrent AsyncFunction $(g4 whatsout -c 26028933     java)\n- many manual fixes\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=26043722\n  
4714,     Add Multimaps filter methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25993671\n  
4715,     Tiny clarification to Queues#drain\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25965634\n  
4716,     Introduce Futures transform overloads that accept an AsyncFunction in preparation for eliminating Futures chain \nAlso:\n- Fix Javadoc example code s rowKeyFuture confusion:    google com/p/guava-libraries/issues/detail?id=788\n- Add test that the result of the preexisting Future transform is memoized when the transformation succeeds \n  
4717,     Include all source files as resources in guava-gwt jar \nThe only one currently missing was GwtSerializationDependencies  but this causes serialization problems:\n   google com/p/guava-libraries/issues/detail?id=791\n  
4718,     If  ByteStreams CharStreams  copy fails to close both input and output  it should log one exception while throwing the other \n   google com/p/guava-libraries/issues/detail?id=667\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25920059\n  
4719,     Fixed a tiny Javadoc typo  You might be asking yourself: why is he\nwasting his time with this? I    don t know \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25918269\n  
4720,     Many Javadoc fixes  including fixes for public issues:\n-    google com/p/guava-libraries/issues/detail?id=778\n-    google com/p/guava-libraries/issues/detail?id=736\n-    google com/p/guava-libraries/issues/detail?id=713\n-    google com/p/guava-libraries/issues/detail?id=710\n-    google com/p/guava-libraries/issues/detail?id=709\n-    google com/p/guava-libraries/issues/detail?id=706\n-    google com/p/guava-libraries/issues/detail?id=566\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25915349\n  
4721,     trigger refresh on Cache getIfPresent\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25908678\n  
4722,     Add c g common base Optional#presentInstances\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25881600\n\nAdd Optional#presentInstances to Optional \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25892141\n  
4723,     Make threads used by listenInPoolThread daemon  since the mere act of creating a ListenableFuture isn t expected to keep a process alive \n   google com/p/guava-libraries/issues/detail?id=726\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25885317\n  
4724,     Copy c g c collect AbstractIterator to c g c base as a package-private class \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25880322\n  
4725,     Replace try/catch/propagate with try/finally idiom \n\nThis actually fixes a serious bug: A few of those Throwable propagate calls were potentially wrapping InterruptedExceptions \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25813299\n  
4726,     Reorder some of the HTTP Headers \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25806584\n  
4727,     Test that transform* calls on a  secretly  sorted map are passed off to the SortedMap overloads \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25679905\n  
4728,     Plug a bunch of unit testing holes in common net \nAlso  remove a redundant item from the HostSpecifier Javadoc \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25677661\n  
4729,     Make SerializableTester reserialize a no-op under GWT so that test authors can use it as part of larger test methods \nWith that done  eliminate the equivalent  awful hack in RangeTest \nFurther  with bug 5599623 fixed  run OrderingTest under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25672151\n  
4730,     Add explicit <K  V> to entryOf() call  The current code works in javac but fails compilation in Eclipse compiler  It could be Eclipse s fault  But it seems easy enough to avoid the gray area  no?\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25651472\n  
4731,     Document advantages of  implicit signaling  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25642514\n  
4732,     Create PriorityQueue with internal capacity 2 instead of estimating the size from the number of inputs \nThis is simpler  and it might be faster than iterating twice \nIt might be slower if the input (a) is a Collection (so that size() is available) and (b) is larger than size 2 (so that growing the array is necessary)  but I m not too concerned \nOnly 2 of ~8 callers have a chance of passing in more than 2 inputs  anyway \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25641457\n  
4733,     Remove @Beta from QueuesTests (we never mark tests as @Beta) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25588377\n  
4734,     Making Queues#drain calls timeouts more accurate  by potentially adding a System nanoTime() call \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25588185\n  
4735,     Reference Futures get from CheckedFuture\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25577062\n  
4736,     Tests for several newDataInput readFoo methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25574201\n  
4737,     Mark the Queues methods that deal with ArrayDeque and LinkedBlockingDeque as internal only (they are JDK6 only) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25554993\n  
4738,     Clear interrupt at end of test so as not to interfere with subsequent tests \nI have vague plans to run all tests that call interrupt() in a fresh  non-main thread so that this sort of problem can t occur  but naturally I haven t gotten around to it \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25527509\n  
4739,     Use Uninterruptibles awaitUninterruptibly() instead of a hand-rolled version or an abort-on-interrupt version \nReuse DelayingIdentityLoader instead of reimplementing \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25523974\n  
4740,     Make c g c collect Queues @Beta \nRemove old TODO from Optional (unrelated change  but combined for TAP s sake) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25522897\n  
4741,     Test that finalize deletes the backing file  This required refactoring the model code to make finalize accessible from tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25515639\n  
4742,     Remove GuavaAsserts  replacing all calls with calls to Assert \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25472533\n  
4743,     Use iterator() next() in FilteredSortedSet#first\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25472467\n  
4744,     documentation enhancements to Cache  LoadingCache  and CacheBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25472243\n  
4745,     Document the relationship between Multiset and AtomicLongMap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25472109\n  
4746,     test when resetOnFinalize==true\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25434366\n  
4747,     Replace custom TestAssertionFailure with JUnit AssertionFailedError \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25397711\n  
4748,     Add Ordering min(Iterator) and Ordering max(Iterator) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25397156\n  
4749,     Add Builder#put(Entry) to ImmutableMultimap  ImmutableListMultimap  and ImmutableSetMultimap \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25396013\n  
4750,     Added filter(SortedSet) to allow for the creation of a filtered SortedSet\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25393046\n  
4751,     Add ImmutableMap Builder#put(Entry) overload \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25392198\n  
4752,     Throw an IAE if source and destination files are the same in Files#copy\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25364042\n  
4753,     Delete GuavaAsserts checkEqualsAndHashCodeMethods  replacing its one use with EqualsTester \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25351800\n  
4754,     Move SortedMaps filter* to Maps \nCopy tests for SortedMaps transform* to MapsTest \nTest the filter* methods under GWT  and make them available under GWT \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25351048\n  
4755,     Add tests for interruption while waiting \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25335633\n  
4756,     Improve initial approximation to sqrt(x) when x doubleValue() == Double POSITIVE_INFINITY (x >= 2^1024) \nLouis s:    google com/r/wassermanlouis-guava/source/detail?r=6ea966f033aead7adc3aba9f74c05b115b37f83b&name=big-sqrt\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25315505\n  
4757,     Change the implementation of AbstractFuture Sync#complete to guarantee that the future is complete before exiting  even if the current thread is not the thread actually completing the future \n\nThis guarantee helps with problems such as rpcFinished completing without the future actually being in the done() state \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25297462\n  
4758,     Javadoc improvements:\n- Emphasize that an empty SetMultimap and an empty ListMultimap are equal \n- ListenableFuture listeners can also run in the thread that cancels the future (hat tip to <   google com/114212977194801425439/posts/eFxZv6ibkM9>  which tipped me off to this by describing a related bug)    plus other minor improvements \n- ListeningExecutorService can throw RejectedExecutionException \n- Subclasses of AbstractListeningExecutorService must implement execute() and the shutdown/termination methods \nAlso  fix a comment in AbstractListeningExecutorServiceTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25284749\n  
4759,     be more accomodating of slow gc reference enqueuing\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25267574\n  
4760,     have CacheLoader reload return ListenableFuture\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25264832\n  
4761,     @Beta  @since  and hard-coded test seed\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25248940\n  
4762,     Removing MoreAsserts call\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25247052\n  
4763,     test coverage for ready and skip\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25242419\n  
4764,     Adding test for skipFully\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25242304\n  
4765,     Overrides of synchronized methods should be synchronized\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25242297\n  
4766,     Testing exceptional conditions on reset\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25242293\n  
4767,     JavaDoc grammar fix \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25242113\n  
4768,     more tightly accomodate garbage-collected keys and values\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25202456\n  
4769,     introduce AtomicLongMap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25201110\n  
4770,     Replace MoreAsserts calls so that code compiles in Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25200636\n  
4771,     Test for resources toByteArray\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25194827\n  
4772,     Cleaning up JavaDoc copy-and-paste errors\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25192783\n  
4773,     Filling in test coverage on several methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25192532\n  
4774,     Adding tests for multiple ByteStreams methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25179180\n  
4775,     Expanding test coverage on several methods\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25178955\n  
4776,     Fix instances of divzero in [  \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25176483\n  
4777,     add CacheBuilder refreshInterval\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25139834\n  
4778,     Remove JAVA_WHITESPACE \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25139131\n  
4779,     deprecated/remove LoadingCache methods from Cache\n\nNEEDS_QA=false\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25134497\n  
4780,     Use RuntimeException to make things a little more convenient for\ntest authors   Forcing users to deal with InterruptedException\nand TimeoutException does not seem sufficiently useful in a\n_testing_ utility   Controversial \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25119032\n  
4781,     split LoadingCache out of Cache interface\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25099006\n  
4782,     Simplify BigIntegerMath factorial logic \nFrom Louis:    google com/r/wassermanlouis-guava/source/detail?r=4ff33ce527b87451c7ee92136d29664fb2c750e1&name=simplify-big\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25071062\n  
4783,     Fix deadlock in CompositeService when attempting to shutdown a FAILED service   Also  when shutting down services make sure all services are either TERMINATED or FAILED before notifyingStopped or notifyingFailed \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25070823\n  
4784,     Defer building of error message \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25067192\n  
4785,     Add CacheStats plus() similar to minus() \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=25033829\n  
4786,     Add AtomicDouble and friends \n\nAll derived from code originally written by Doug and friends\nfor AtomicLong and friends \n\nThis version has marginally less efficient  but more portable\nimplementation (doesn t directly use sun misc Unsafe) \n\nUpdates JSR166TestCase to get latest Doug/Martin infrastructure \n\nCurrently  AtomicDouble seems unlikely to get into upstream\njava util concurrent atomic  (so guava is likely to be its\npermanent public home) but I d like to continue to keep the\ndoor open forever \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24963153\n  
4787,     Update class docs of HostAndPort regarding immutability \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24957966\n  
4788,     add Cache getIfPresent  Cache put  and CacheBuilder build()\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24936790\n  
4789,     Bring documentation of Service  start stop () cancel() in line with reality \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24922495\n  
4790,     cleanup stats collection workarounds from MapMaker\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24891730\n  
4791,     move LocalCache into LocalCacheInternalMap  then rename LocalCacheInternalMap to LocalCache\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24848838\n  
4792,     rename CustomConcurrentHashMap to MapMakerInternalMap\nrename LocalCacheAsMap to LocalCacheInternalMap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24846402\n  
4793,     Introduce Tables unmodifiable(RowSorted)Table \nFrom Louis:    appspot com/5266049/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24846124\n  
4794,     Optimize BigIntegerMath sqrt \nLouis s:    appspot com/5130047/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24844188\n  
4795,     Changing ImmutableList of(E[ ) and ImmutableSet of(E[ ) to be non-public  Callers should have been changed already to call  copyOf(E[ ) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24840447\n  
4796,     Add GWT tests for cache and labs concurrent \nThese are the last two packages that use java_and_gwt_library but not java_and_gwt_tests (excluding annotations and labs converter  both of whose GWT-compatible classes are all annotations) \nThe newly added tests discovered that Cache gwt xml contains dependencies that the package doesn t declare  and I ve removed them \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24827412\n  
4797,     add Cache getAll and CacheLoader loadAll\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24824285\n  
4798,     Betafy\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24809615\n  
4799,     Put the timeout duration into the exception detail message \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24781085\n  
4800,     BigIntegerMath factorial rewritten to be faster \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24767128\n  
4801,     Declare mergeSorted() return type as Iterable instead of UnmodifiableIterable  which is private \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24756036\n  
4802,     Move merge sorting code out of TreeBasedTable \nAdd mergeSorted() functionality to Iteratorables \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24751437\n  
4803,     rename CustomConcurrentHashMap to LocalCacheAsMap\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24749721\n  
4804,     fix a flaky test by using a FakeTicker\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24746343\n  
4805,     Remove reference to done() from documentation \nClumsily attempt to document the wart of a visible done() method that no one can call \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24720806\n  
4806,     Manually reject leading plus signs since JDK7 won t \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24713441\n  
4807,     Just noticed a few missing constructors while looking at javadocs \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24713377\n  
4808,     Trivial cleanup \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24676130\n  
4809,     add missing Apache header\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24673684\n  
4810,     Release GcFinalization \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24667108\n  
4811,     Run common testing tests under GWT\nGWT-enable a few other classes that are trivial to GWT-enable \nOpen-source the common testing tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24640713\n  
4812,     test cleanup\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24637603\n  
4813,     more gwt test standardization\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24636709\n  
4814,     Initial release of the escapers into Guava \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24623640\n  
4815,     standardize test modules\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24612598\n  
4816,     Add Optional asSet()\n\nSee    google com/p/guava-libraries/issues/detail?id=669\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24612296\n  
4817,     only read ticker once per operation\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24604473\n  
4818,     Reformatting-only CL: reflow ConcurrentHashMultiset to make it consistently\n100 characters \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24603115\n  
4819,     drop spurious  ?  in UnsignedInts toLong() javadoc\n\nalso  changed 64-bit in remainder() javadoc to 32-bit \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24598262\n  
4820,     Disallow null-returning suppliers in Optional#or\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24585583\n  
4821,     Remove Iterables#rotate \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24585036\n  
4822,     Add c g c net HttpHeaders to Guava (since 11 0) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24584184\n  
4823,     Mark Caches as final \nUpdate ImmutableTable Builder#putAll to use ImmutableTable Builder#put(Cell) \nUpdate docs on Files#simplifyPath\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24574078\n  
4824,     - allow expireAfterWrite + expireAfterAccess\n- throw AssertionError on computation code paths which musn t return null\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24573984\n  
4825,     Replace evictionQueue and expirationQueue with accessQueue and writeQueue \nAlso tightly couple accessTime with expirationQueue  and writeTime with\nwriteQueue \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24572156\n  
4826,     Add Itera bles tors #tryFind\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24555364\n  
4827,     remove lenient builder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24546639\n  
4828,     inline Callables throwing\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24545964\n  
4829,     Fix @param javadoc for UnsignedInts parseUnsignedInt() to reflect actual parameter name \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24544750\n  
4830,     doc cleanup\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24510024\n  
4831,     tweaks\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24509876\n  
4832,     add Cache get(K  Callable<V>)\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24506370\n  
4833,     only call waitForValue on loading references\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24502384\n  
4834,     Add overloaded primitive methods to ToStringHelper to avoid autoboxing\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24476666\n  
4835,     un-deprecate FinalizableReferenceQueue and friends\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24467300\n  
4836,     allow Cache asMap() get(Object) to count as an access wrt eviction\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24445289\n  
4837,     add Maginatics\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24433529\n  
4838,     hold strong references to new entries added during testing loops\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24399894\n  
4839,     call newBuilder\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24383532\n  
4840,     remove incomplete test\n  
4841,     release MultisetNavigationTester\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24382979\n  
4842,     Implement expireAfter*(0  *) in terms of maximumSize(0) \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24379350\n  
4843,     fix broken Guava tests\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24377974\n  
4844,     Fix TreeMultiset subMultiset() size() overflow condition \nFrom Louis:    appspot com/5153041/\n\nAlso  remove SortedTreeMultiset now that it s been moved to TreeMultiset  since it  too  would have needed to have been updated in this CL \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24372922\n  
4845,     Add extensive tests for simplifyPath that aren\ t prefixed with /b/c \nThese tests caught the     ->    problem (though I initially ignored it    oops) and would have caught the if->while problem raised during review \nI suspect they would also have caught the existing bugs  but I haven\ t yet confirmed this \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24372607\n  
4846,     Integrate common math into common collect \nFrom Louis:    appspot com/5142053/\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24372231\n  
4847,     rename MapMakerTests to MapMakerTest for Guava s sake\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24372219\n  
4848,     Resolve     to     instead of the empty string \n\nThis changes the existing behavior of this method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24370864\n  
4849,     remove NullCache  now that we support immediate eviction\n\nTested:\nTAP\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24368352\n  
4850,     add Cache refresh\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24327805\n  
4851,     Replace old  simple  Strings repeat with more complex  but faster implementation based on binary exponentiation  Add benchmark to compare with old method \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24327769\n  
4852,     - rename ComputingCache to LocalCache\n- internally refer to computation as loading\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24327248\n  
4853,     Make IntMath @GwtCompatible so that it can be used in common collect overflow checks \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24308523\n  
4854,     I give up  I can no longer maintain the in-place algorithm  The bugs have defeated me \n\nThis cl introduces a much simpler  clearer algorithm that splits the path into pieces  and then builds a new path one piece at a time while resolving   and    along the way   Finally it does a little fixup to handle the initial slash  if any \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24306712\n  
4855,     externally remove methods scheduled for deletion in release 11 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24306560\n  
4856,     use isFinite instead of getExponent  from Louis\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24305670\n  
4857,     Implement a new Service base class for services that need to execute some functionality periodically \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24292212\n  
4858,     Replace unused generic type parameter with wildcard \nIf the Iterable is a Collection  use its isEmpty() method instead of\nconstructing an Iterator instance \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24282737\n  
4859,     A round of promotions/deletions/updates for Guava 11 0 \nTry to minimize use of MOE: magic somewhat \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24279246\n  
4860,     Rename CleanPathTest to FilesSimplifyPathTest \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24256474\n  
4861,     update since on simplifyPath to 11 0\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24251651\n  
4862,     Louis s changes to remove JDK6-isms from DoubleMath\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24246702\n  
4863,     introduce maximumWeight\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24224790\n  
4864,     Export input file for new CleanPathTest tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24216931\n  
4865,     One missing copyright  one missing @since  Should cherrypick  but not end of world if not \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24215692\n  
4866,     Doc-only changes to the InternetDomainName family clarifying validation options and fixing some references to deprecated methods \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24213290\n  
4867,     Add a method to Files that returns the file extension from a given file name \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24212884\n  
4868,     fix common math copyrights\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24212498\n  
4869,     Extensive tests for simplifyPath \nThis doesn t cover tests beginning with a character other than /  which is unfortunate  but realpath  which I used to generate the expected outputs  would resolve any    at the beginning of the input path  which isn t what we want here \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24168601\n  
4870,     forbid null return from cache lookups  and null parameter in invalidate\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24168264\n  
4871,     Add some URI resolution tests to the simplifyPath tests \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24166215\n  
4872,     Fix indentation \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24147455\n  
4873,     Release common math package \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24109421\n  
4874,     - have Cache size() return a long\n- remove Cache activeEntries\n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24109421\n  
4875,     - Fix handling of filenames that contain more than one period as reported in bug 716\n- Fix problem with simplifying paths that begin  /\n  
4876,     Clone of Louis s UnsignedLong(s) documentation CL \n-------------\nCreated by MOE:    google com/p/moe-java\nMOE_MIGRATED_REVID=24073780\n  
4877,     Eliminate most uses of non-Unicode whitespace in com google common tests \n  
4878,     Fix compile problems with Guava \n  
4879,     Link  Iterables Collections2 Lists  transform \tRefer to ForkJoinTask join from Futures getUnchecked Javadoc \tRemove an unnecessary cast \tAlso  fix a typo in the InterruptedRuntimeException deprecation instructions \n  
4880,     Fix ImmutableMultiset 1 6 0u24 compilation error \n  
4881,     allow all write operations on asMap view\n  
4882,     Drop in SortedTreeMultiset in place of TreeMultiset \n  
4883,     Update primitives package-info\n  
4884,     Make Bst framework null-compatible when the comparator is\n  
4885,     Update testers to recognize that null may be a restricted element\n  
4886,     make tests of unreleased classes GoogleInternal\n  
4887,     implement basic serializability for ComputingCache\n  
4888,     Allow nulls in GeneralRange \n  
4889,     Move SortedMaps difference to Maps\n  
4890,     Add UnsignedInts to primitives \n  
4891,     Begin adding  most common element  operations to Multisets \n  
4892,     update since to 10\n  
4893,     Provide serialization for UnsignedLong\n  
4894,     add ForwardingCache\n  
4895,     Reorganize methods between UnsignedLongs and UnsignedLong \tMake clear in the Javadoc the reasons to use each \n  
4896,     Migrate SortedMaps transform Values Entries  to Maps\n  
4897,     Implement Range isContiguousWith(Range)  which defines the conditions under which two ranges will be coalesced in RangeSet \n  
4898,     Handling paths of the form x/  /  /b (bug 705)\n  
4899,     @since tags\n  
4900,     Eliminate GWT serialization warnings for HashBasedTable/TreeBasedTable and TreeMultiset \tAs of <   appspot com/1544803>  GWT recognizes any annotation named @GwtTransient \n  
4901,     Inline BaseHolder interface into Holder and Optional  It was causing issues to\tScala users and didn t really serve any purpose anyway  This also makes it\teasier to start selectively eliminating some of the methods from Holder if we\twant to do that \n  
4902,     Improve Javadoc of ArrayTable methods cellSet() and values()\n  
4903,     Merging BlockingQueues into Queues\n  
4904,     Better SerializableTester Javadoc \tStrip reference to internal SerializationChecker from Guava \n  
4905,     Further Javadoc changes \n  
4906,     Improve @throws InterruptedException documentation for get() \n  
4907,     Add putUninterruptibly and takeUninterruptibly  and use them in the implementation of chain() \n  
4908,     Visibility changes \n  
4909,     Expose StandardXXX constructors  fixing external issue 701 \n  
4910,     Fully qualify @links so that they actually work \n  
4911,     use new sonatype parent\n  
4912,     doc cleanup\n  
4913,     javadoc cleanup\n  
4914,     deprecate throwCause\n  
4915,     remove build xml  and unneeded libs\n  
4916,     update scm urls\n  
4917,     split configuration out of execution so it will apply to other executions\n  
4918,     - add cache cleanup\n- scrub @since tags\n  
4919,     test updates\n  
4920,     remove unused xerces jar\n  
4921,     use  latest  for non-release version\n  
4922,     add support for jdiff generation\n  
4923,     copyright and warning cleanup\n  
4924,     add javadoc generation\n  
4925,     update artifact names\n  
4926,     specify plugin versions\n  
4927,     make all tests pass\n  
4928,     make more tests pass\n  
4929,     - cleanup formatting  and add missing dependencies\n- use animal-sniffer-maven-plugin to verify 1 5 compatibility\n  
4930,     manual sync\n  
4931,     delete IDEA files  and update  gitignore accordingly\n  
4932,     manual sync\n  
4933,     ignores \n  
4934,     fix build\n  
4935,     manual git sync\n  
4936,     remove unused imports \n\ngit-svn-id:    googlecode com/svn/trunk@645 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4937,     add missing dependencies  and fix a few typos\n\n\ngit-svn-id:    googlecode com/svn/trunk@644 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4938,     manual sync\n\n\ngit-svn-id:    googlecode com/svn/trunk@643 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4939,     manual sync\n\n\ngit-svn-id:    googlecode com/svn/trunk@642 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4940,     manual sync\n\n\ngit-svn-id:    googlecode com/svn/trunk@641 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4941,     massive manual sync\n\n\ngit-svn-id:    googlecode com/svn/trunk@640 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4942,     unused imports \n\ngit-svn-id:    googlecode com/svn/trunk@637 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4943,     \nA bunch of Guava javadoc tweaks and such  trying to cut down on warnings \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2952\n\n\ngit-svn-id:    googlecode com/svn/trunk@636 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4944,     \nGWT-ify UnsignedLongs \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2951\n\n\ngit-svn-id:    googlecode com/svn/trunk@635 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4945,     \nAdd the missing asymmetric ByteStreams copy()\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2950\n\n\ngit-svn-id:    googlecode com/svn/trunk@634 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4946,     \nUpdate some ContiguousSet documentation to clarify some of the edge cases in the ContiguousSet -> Range conversion \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2949\n\n\ngit-svn-id:    googlecode com/svn/trunk@633 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4947,     \nReplace newly added usages of testing util EqualsTester/NullPointerTester/SerializableTester with usages of common testing  removing the former \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2948\n\n\ngit-svn-id:    googlecode com/svn/trunk@632 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4948,     \n- start throwing ExecutionError from Cache get\n- allow Throwable in UncheckedExecutionException again\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2947\n\n\ngit-svn-id:    googlecode com/svn/trunk@631 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4949,     \nDocument that simplifyPath may change the meaning of a path \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2924\n\n\ngit-svn-id:    googlecode com/svn/trunk@630 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4950,     \nRemove deprecated addNotEqualObject  replacing all newly introduced calls with one or more calls to addEqualityGroup \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2922\n\n\ngit-svn-id:    googlecode com/svn/trunk@628 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4951,     \nMake SortedLists public   It makes it much clearer what you re doing in a binary search \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2921\n\n\ngit-svn-id:    googlecode com/svn/trunk@627 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4952,     \nSwitch from testing util to common testing in preparation for the removal of the former \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2919\n\n\ngit-svn-id:    googlecode com/svn/trunk@626 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4953,     \nrollback\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2914\n\n\ngit-svn-id:    googlecode com/svn/trunk@625 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4954,     \nMake ListeningScheduledExecutorService schedule* return a ListenableFuture\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2913\n\n\ngit-svn-id:    googlecode com/svn/trunk@624 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4955,     \ndocument @throws\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2910\n\n\ngit-svn-id:    googlecode com/svn/trunk@623 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4956,     \nAnnotate UnsignedLongs with @Beta and a @since\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2909\n\n\ngit-svn-id:    googlecode com/svn/trunk@622 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4957,     \nImplement SortedMultisets unmodifiableSortedMultiset \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2908\n\n\ngit-svn-id:    googlecode com/svn/trunk@621 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4958,     \nRemove unnecessary catch and rethrow \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2907\n\n\ngit-svn-id:    googlecode com/svn/trunk@620 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4959,     \nSerializableTester reserializeAndAssert checks that original getClass() == copy getClass() \nFix EmptyContiguousSet serialization using cgdecker\ s patch (which also removes a redundant  implements Serializable  from RegularContiguousSet) \nAlso  stop using reserializeAndAssert for the few instances in which the reserialized version of an object is a different class \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2906\n\n\ngit-svn-id:    googlecode com/svn/trunk@619 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4960,     \nLink from Futures getUnchecked to Uninterruptibles getUninterruptibly \nAlso  <code> ->  @code  to fix a Javadoc problem (thanks  Louis) \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2905\n\n\ngit-svn-id:    googlecode com/svn/trunk@618 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4961,     \nMinor bugfix to CCHM where null returns weren t\ncounted as either computeSuccess or computeException - changed to count them as\ncomputeException \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2904\n\n\ngit-svn-id:    googlecode com/svn/trunk@617 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4962,     \nSuppress some deprecation warnings \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2903\n\n\ngit-svn-id:    googlecode com/svn/trunk@616 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4963,     \nStop forcing all users of the BST framework to total all nodes in each subtree; they may do that in their subclass  if they like \n\nFactor out BstAggregate into its own file  while we re at it \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2893\n\n\ngit-svn-id:    googlecode com/svn/trunk@615 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4964,     \nLong overdue updates to common/base/package-info\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2892\n\n\ngit-svn-id:    googlecode com/svn/trunk@614 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4965,     \nInstead of providing the views themselves in the  standardXXX  methods of ForwardingMap and ForwardingMultiset  provide overridable classes that represent the sensible implementations   This is much cleaner and doesn\ t require awkward  iterator supplier  workarounds \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2889\n\n\ngit-svn-id:    googlecode com/svn/trunk@613 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4966,     \nIntroduce UnsignedLongs \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2888\n\n\ngit-svn-id:    googlecode com/svn/trunk@612 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4967,     \nminor cleanup\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2887\n\n\ngit-svn-id:    googlecode com/svn/trunk@611 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4968,     \nadd common collect testing to Guava\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2879\n\n\ngit-svn-id:    googlecode com/svn/trunk@610 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4969,     \nAdd a new method: InetAddresses isMappedIPv4Address(String)\nFixes issue 536 \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2877\n\n\ngit-svn-id:    googlecode com/svn/trunk@609 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4970,     \ndistinguish between expired and collected within computation lock\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2876\n\n\ngit-svn-id:    googlecode com/svn/trunk@608 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4971,     \nBugfix: CustomConcurrentHashMap clear() could send a RemovalNotification with\na null value in the case of an in-progress computation  Added a test to check\nthis case \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2875\n\n\ngit-svn-id:    googlecode com/svn/trunk@607 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4972,     \nadd deprecation comment\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2874\n\n\ngit-svn-id:    googlecode com/svn/trunk@606 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4973,     \n- log removal listener exceptions\n- internally log removal notifications with non-null keys or values when using strong references\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2873\n\n\ngit-svn-id:    googlecode com/svn/trunk@605 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4974,     \nRework exception handling in Futures get and Futures getUnchecked \nAdd ExecutionError  and use it in Futures get  Futures getUnchecked  and Cache interface and implementations \nSpecialize UncheckedExecutionException constructors to accept only Exception  rather than Error  to encourage use of ExecutionError \nFix an unrelated typo in the MapMaker Javadoc \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2872\n\n\ngit-svn-id:    googlecode com/svn/trunk@604 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4975,     \nImplement ImmutableSortedMultiset \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2854\n\n\ngit-svn-id:    googlecode com/svn/trunk@601 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4976,     \nrelease tweaks\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2853\n\n\ngit-svn-id:    googlecode com/svn/trunk@600 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4977,     \nUse a custom serialized form for RegularContiguousSet  as in cgdecker s original patch  to avoid using ImmutableSortedSet s very  very large serialized form \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2850\n\n\ngit-svn-id:    googlecode com/svn/trunk@599 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4978,     \nAdd javadoc to DiscreteDomains methods  and rename private classes because when\nI navigate to  Longs  in my IDE this ain\ t the one I mean \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2849\n\n\ngit-svn-id:    googlecode com/svn/trunk@598 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4979,     \n- deprecate caching methods\n- remove unused cleanupExecutor\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2848\n\n\ngit-svn-id:    googlecode com/svn/trunk@597 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4980,     \nMake more classes serializable \nMerged from cgdecker s patch for Enums valueOfFunction  Equivalence Wrapper  Optional  Range (and Cut)  the DiscreteDomain implementations  and ContiguousSet (but skipped Holder)\n\nThe patch also:\n- adds equals/hashCode for Enums valueOfFunction\n- makes the DiscreteDomain constructor visible  internally and externally (possibly controversial? but the whole class is still @Beta  anyway)\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2847\n\n\ngit-svn-id:    googlecode com/svn/trunk@596 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4981,     \n- remove CacheBuilder softKeys()\n- Deprecate MapMaker softKeys()\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2846\n\n\ngit-svn-id:    googlecode com/svn/trunk@595 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4982,     \nAdd Colin Decker to Guava authors \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2845\n\n\ngit-svn-id:    googlecode com/svn/trunk@594 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4983,     \nAdd c g common base Optional#or(Supplier) \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2844\n\n\ngit-svn-id:    googlecode com/svn/trunk@593 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4984,     \nAdd protected equivalentImpl() and hashImpl() to Equivalence \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2843\n\n\ngit-svn-id:    googlecode com/svn/trunk@592 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4985,     \nAdd a new version of Maps difference which takes an Equivalence to use instead\nof natural equality for comparing values in the maps \n\nAlso modified Equivalences helper class to be a bit more generic-y (and\nfriendlier to clients) \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2819\n\n\ngit-svn-id:    googlecode com/svn/trunk@591 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4986,     \nUnit test Maps newHashMapWithExpectedSize  Make the method return the minimal values that pass the test \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2818\n\n\ngit-svn-id:    googlecode com/svn/trunk@590 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4987,     \nMapJoiner support for Iterable<Entry> \nFrom cgdecker s patch  except a change in line wrapping and a reordering of methods \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2817\n\n\ngit-svn-id:    googlecode com/svn/trunk@589 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4988,     \nCall only the no-arg EqualsTester constructor  addEqualityGroup  and testEquals \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2816\n\n\ngit-svn-id:    googlecode com/svn/trunk@588 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4989,     \nRemove Holder \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2815\n\n\ngit-svn-id:    googlecode com/svn/trunk@587 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4990,     \nMerge recent changes to common testing and testing util versions of utility classes \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2814\n\n\ngit-svn-id:    googlecode com/svn/trunk@586 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4991,     \nTake @Beta off sameThreadExecutor and listeningDecorator \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2813\n\n\ngit-svn-id:    googlecode com/svn/trunk@585 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4992,     \n-Xlint:-serial\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2812\n\n\ngit-svn-id:    googlecode com/svn/trunk@584 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4993,     \nReplace EvictionListeners with RemovalListeners\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2811\n\n\ngit-svn-id:    googlecode com/svn/trunk@583 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4994,     \nAdd the ability to mutate the tip of a path to BstOperations \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2810\n\n\ngit-svn-id:    googlecode com/svn/trunk@582 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4995,     \nFix licenses and simplify a few things in BstRangeOps\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2809\n\n\ngit-svn-id:    googlecode com/svn/trunk@581 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4996,     \nfromLenient -> from in HostSpecifier \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2808\n\n\ngit-svn-id:    googlecode com/svn/trunk@580 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4997,     \nAdd note that exception mappers can throw (rather than return) a\nRuntimeException to allow use of a combination of checked and unchecked\nexceptions \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2807\n\n\ngit-svn-id:    googlecode com/svn/trunk@579 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4998,     \n- document immutablility of PatternFilenameFilter\n- PatternFilenameFilter implements FileFilter\n- FileBackedOutputStream javadoc fix\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2755\n\n\ngit-svn-id:    googlecode com/svn/trunk@577 8138a162-5c33-11de-8abc-d1c337b90d21\n  
4999,     \nmove EquivalenceWrapper to Equivalence Wrapper\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2754\n\n\ngit-svn-id:    googlecode com/svn/trunk@576 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5000,     \nmake AbstractExecutionThreadService getServiceName protected\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2753\n\n\ngit-svn-id:    googlecode com/svn/trunk@575 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5001,     \ndocument what counts as an access with regard to expireAfterAccess\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2752\n\n\ngit-svn-id:    googlecode com/svn/trunk@574 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5002,     \nUnify BstInOrderPath nextInOrder()  prevInOrder() to one function with a BstSide argument\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2751\n\n\ngit-svn-id:    googlecode com/svn/trunk@573 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5003,     \nAdd BstAggregate to BstRangeOps  which allows us to total distinct nodes  element occurrences  or whatever within a specific range \n\nAlso  unify firstPath and lastPath into furthestPath \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2750\n\n\ngit-svn-id:    googlecode com/svn/trunk@572 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5004,     \nImplement BSTCountBasedBalancePolicies  which implements size-balancing of binary search trees \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2749\n\n\ngit-svn-id:    googlecode com/svn/trunk@571 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5005,     \nUse BstTesting defaultNullPointerTester() in all tests\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2748\n\n\ngit-svn-id:    googlecode com/svn/trunk@570 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5006,     \nImplement BSTUtilities  which provides helper methods for balance policies that insert and remove the minimum or maximum entry in a binary search tree \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2747\n\n\ngit-svn-id:    googlecode com/svn/trunk@569 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5007,     \nAdd BSTRangeOps and GeneralRange   GeneralRange is a package-private\nimplementation of an interval with any desired comparator  and BSTRangeOps\nprovides operations on ranges within binary search trees \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2746\n\n\ngit-svn-id:    googlecode com/svn/trunk@568 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5008,     \nHide flattenHierarchy() behind a MapMaker cache \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2745\n\n\ngit-svn-id:    googlecode com/svn/trunk@567 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5009,     \nRename BSTXXX to BstXXX   Also  move testing utilities (like the SimpleNode class) to new file BstTesting \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2744\n\n\ngit-svn-id:    googlecode com/svn/trunk@566 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5010,     \nSome additional release 10 tweaking \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2743\n\n\ngit-svn-id:    googlecode com/svn/trunk@565 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5011,     \nMinor FindBugs bugfix: not caching entrySet as intended \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2742\n\n\ngit-svn-id:    googlecode com/svn/trunk@564 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5012,     \nImplement BSTOperations  which does single-key query and modification operations \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2741\n\n\ngit-svn-id:    googlecode com/svn/trunk@563 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5013,     \nRemove dummy <K> type parameters \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2740\n\n\ngit-svn-id:    googlecode com/svn/trunk@562 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5014,     \n- Add a new InetAddresses toAddrString() method that produces a\ntext-formatted IP address according to RFC5952 \n- Change toUriString to use this method instead of getHostAddress()\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2739\n\n\ngit-svn-id:    googlecode com/svn/trunk@561 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5015,     \nImplement BSTMutationResult and BSTMutationRule \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2738\n\n\ngit-svn-id:    googlecode com/svn/trunk@560 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5016,     \nImplement BSTInOrderPath  which extends paths in binary search trees with\nforward and backward inorder traversal \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2737\n\n\ngit-svn-id:    googlecode com/svn/trunk@559 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5017,     \nAdd BSTPath and BSTPathFactory  which provide a generic way of manipulating paths in a binary search tree \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2736\n\n\ngit-svn-id:    googlecode com/svn/trunk@558 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5018,     \nAdd the interfaces/abstract classes BSTNodeFactory and BSTBalancePolicy  which\nare responsible for manipulating binary search tree nodes and keeping them\nbalanced  while keeping track of the data in each one \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2735\n\n\ngit-svn-id:    googlecode com/svn/trunk@557 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5019,     \nrollback\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2713\n\n\ngit-svn-id:    googlecode com/svn/trunk@556 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5020,     \nAdd the interfaces/abstract classes BSTNodeFactory and BSTBalancePolicy  which are responsible for manipulating binary search tree nodes and keeping them balanced  while keeping track of the data in each one \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2712\n\n\ngit-svn-id:    googlecode com/svn/trunk@555 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5021,     \nCreate the BSTNode class and the BSTSide enum   BSTNode is the root type of nodes in binary search trees \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2711\n\n\ngit-svn-id:    googlecode com/svn/trunk@554 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5022,     \ninline ComputingConcurrentHashMap into CustomConcurrentHashMap\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2710\n\n\ngit-svn-id:    googlecode com/svn/trunk@553 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5023,     \nSeparate i18n support from InternetDomainName \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2705\n\n\ngit-svn-id:    googlecode com/svn/trunk@552 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5024,     \nrelease Atomics\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2704\n\n\ngit-svn-id:    googlecode com/svn/trunk@551 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5025,     \nMake startAndWait/stopAndWait call Futures getUnchecked instead of performing custom exception handling \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2703\n\n\ngit-svn-id:    googlecode com/svn/trunk@550 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5026,     \nadd EventBus\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2702\n\n\ngit-svn-id:    googlecode com/svn/trunk@549 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5027,     \nWork around bug in GWT compiler (perhaps its use of the JDT?) that produces bogus  redundant cast  warnings \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2678\n\n\ngit-svn-id:    googlecode com/svn/trunk@546 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5028,     \nFix overspecified class-name tests\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2635\n\n\ngit-svn-id:    googlecode com/svn/trunk@545 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5029,     \nBeta changes for R10\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2633\n\n\ngit-svn-id:    googlecode com/svn/trunk@544 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5030,     \nMark makeUninterruptible/UninterruptibleFuture as @Deprecated\nHave the makeUninterruptible implementation delegate to getUninterruptibly\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2632\n\n\ngit-svn-id:    googlecode com/svn/trunk@543 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5031,     \nA few fixups to @Beta/@since/javadoc/etc  for Guava release 10 \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2631\n\n\ngit-svn-id:    googlecode com/svn/trunk@542 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5032,     \nDeprecate run()\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2630\n\n\ngit-svn-id:    googlecode com/svn/trunk@541 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5033,     \nMake AbstractListeningExecutorService public \nAlso  make it a little more consistent with Guava style and inline the misleading newTaskFor\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2612\n\n\ngit-svn-id:    googlecode com/svn/trunk@540 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5034,     \n-Fixed bug in the Objects#simpleName helper method\n-Wrote tests in ToStringHelperTest (since simpleName is used by\ntoStringHelper)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2611\n\n\ngit-svn-id:    googlecode com/svn/trunk@539 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5035,     \nAdd factory methods to support the two remaining construction use cases for Ranges \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2610\n\n\ngit-svn-id:    googlecode com/svn/trunk@538 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5036,     \nMake AbstractFuture cancel/done and ListenableFutureTask constructors visible and @Deprecated \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2609\n\n\ngit-svn-id:    googlecode com/svn/trunk@537 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5037,     \nMake AbstractCheckedFuture extend ForwardingListenableFuture \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2608\n\n\ngit-svn-id:    googlecode com/svn/trunk@535 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5038,     \nCopy ExecutionList run to ExecutionList execute  deprecating the former and updating callers \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2607\n\n\ngit-svn-id:    googlecode com/svn/trunk@534 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5039,     \nAdd Uninterruptibles getUninterruptibly\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2581\n\n\ngit-svn-id:    googlecode com/svn/trunk@533 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5040,     \nA batch of minor tweaks to Range-related code/docs \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2580\n\n\ngit-svn-id:    googlecode com/svn/trunk@532 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5041,     Create maven metadata for tests and testlib  disable two tests missing testlib support  and add modules for them \n\ngit-svn-id:    googlecode com/svn/trunk@531 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5042,     Ignore files from within a git/svn bridge client \n\ngit-svn-id:    googlecode com/svn/trunk@530 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5043,     \nSync folders for tests and test-libraries to separate  projects  in the open-source \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2563\n\n\ngit-svn-id:    googlecode com/svn/trunk@528 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5044,     \nRemove no-arg AbstractFuture cancel  updating final caller \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2561\n\n\ngit-svn-id:    googlecode com/svn/trunk@527 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5045,     \nrollback\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2560\n\n\ngit-svn-id:    googlecode com/svn/trunk@526 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5046,     \nMake ListeningScheduledExecutorService schedule* return a ListenableFuture\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2559\n\n\ngit-svn-id:    googlecode com/svn/trunk@525 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5047,     \nPromotes ContiguousSet to part of the public Range api \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2549\n\n\ngit-svn-id:    googlecode com/svn/trunk@523 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5048,     \nRemove deprecated Optional get(T) method that has no callers \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2548\n\n\ngit-svn-id:    googlecode com/svn/trunk@522 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5049,     \nReplace various occurrences of the new constant Ints MAX_POWER_OF_TWO \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2535\n\n\ngit-svn-id:    googlecode com/svn/trunk@521 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5050,     \nImplement Multisets containsOccurrences\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2534\n\n\ngit-svn-id:    googlecode com/svn/trunk@520 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5051,     \nmake K  V the base type  and then extend to K1  V1\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2533\n\n\ngit-svn-id:    googlecode com/svn/trunk@519 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5052,     \nImplement Multisets removeOccurrences and retainOccurrences\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2511\n\n\ngit-svn-id:    googlecode com/svn/trunk@518 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5053,     \nAdd MAX_POWER_OF_TWO to Ints  Longs  and Shorts \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2510\n\n\ngit-svn-id:    googlecode com/svn/trunk@517 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5054,     \nAdd package info for common cache\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2509\n\n\ngit-svn-id:    googlecode com/svn/trunk@516 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5055,     \nSome findbugs annotating\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2492\n\n\ngit-svn-id:    googlecode com/svn/trunk@515 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5056,     \ntrim tld\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2491\n\n\ngit-svn-id:    googlecode com/svn/trunk@514 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5057,     \nBug fix in Interners#newWeakInterner \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2475\n\n\ngit-svn-id:    googlecode com/svn/trunk@513 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5058,     \nAdd Keys  Values  and Entries skeleton implementations to Multimaps \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2470\n\n\ngit-svn-id:    googlecode com/svn/trunk@512 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5059,     \nIntroduce common cache\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2437\n\n\ngit-svn-id:    googlecode com/svn/trunk@509 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5060,     \ninternal tweak\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2433\n\n\ngit-svn-id:    googlecode com/svn/trunk@508 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5061,     \nrollback\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2432\n\n\ngit-svn-id:    googlecode com/svn/trunk@507 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5062,     \ntemporary GwtCompatible\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2431\n\n\ngit-svn-id:    googlecode com/svn/trunk@506 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5063,     \nRemove collect Cache and all associated classes and references  soon to be added in common cache \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2430\n\n\ngit-svn-id:    googlecode com/svn/trunk@505 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5064,     \nAdd MapSplitter implementation to Splitter \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2429\n\n\ngit-svn-id:    googlecode com/svn/trunk@504 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5065,     \nProvide package-private tailMap(E  boolean)  etc  methods for ImmutableSortedSet and ImmutableSortedMap \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2428\n\n\ngit-svn-id:    googlecode com/svn/trunk@503 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5066,     \nUn-nest BoundType from Range  and attempt to make its javadoc  general \n(not tied to Range) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2417\n\n\ngit-svn-id:    googlecode com/svn/trunk@502 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5067,     \nMoved UncheckedExecutionException to util/concurrent \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2416\n\n\ngit-svn-id:    googlecode com/svn/trunk@501 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5068,     \nRollback \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2399\n\n\ngit-svn-id:    googlecode com/svn/trunk@499 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5069,     \nCreate EmptySortedMultiset  a trivial implementation of a subMultiset whose bounds are such that it could never have any elements \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2398\n\n\ngit-svn-id:    googlecode com/svn/trunk@498 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5070,     \nImplement AbstractSortedMultiset  a skeleton implementation of a SortedMultiset \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2397\n\n\ngit-svn-id:    googlecode com/svn/trunk@497 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5071,     \nMake use of the new Multisets ElementSet and EntrySet skeletons in common collect \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2396\n\n\ngit-svn-id:    googlecode com/svn/trunk@496 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5072,     \nTreeBasedTable row() returns a SortedMap\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2395\n\n\ngit-svn-id:    googlecode com/svn/trunk@495 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5073,     \nAdd Uninterruptibles joinUninterruptibly\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2393\n\n\ngit-svn-id:    googlecode com/svn/trunk@494 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5074,     \nAdd FutureListeners addCallback as an easier-to-use version of addListener\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2392\n\n\ngit-svn-id:    googlecode com/svn/trunk@493 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5075,     \nAssorted cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2391\n\n\ngit-svn-id:    googlecode com/svn/trunk@492 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5076,     \n@since Guava release 10\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2390\n\n\ngit-svn-id:    googlecode com/svn/trunk@491 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5077,     \nFix TestModuleEntryPoint \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2389\n\n\ngit-svn-id:    googlecode com/svn/trunk@490 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5078,     \nAdd SortedMultiset ElementSet and SortedMultiset DescendingMultiset skeleton implementations to SortedMultisets \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2364\n\n\ngit-svn-id:    googlecode com/svn/trunk@489 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5079,     \nDeprecate AbstractFuture cancel() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2363\n\n\ngit-svn-id:    googlecode com/svn/trunk@488 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5080,     \nReport problems with _changes to _names consistency during tld patterns file generation  Also  make it safe to specify a removal in _changes which isn t actually present in _names; this would cause a build error previously \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2360\n\n\ngit-svn-id:    googlecode com/svn/trunk@487 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5081,     \nChanges to SortedMultiset \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2359\n\n\ngit-svn-id:    googlecode com/svn/trunk@486 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5082,     \nRefactor ImmutableMultiset so that all of its implementation details are in RegularImmutableMultiset \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2358\n\n\ngit-svn-id:    googlecode com/svn/trunk@485 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5083,     \nStopwatch/Ticker @GwtCompatible\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2357\n\n\ngit-svn-id:    googlecode com/svn/trunk@484 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5084,     \nCall UncheckedExecutionException constructor instead of using reflection \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2356\n\n\ngit-svn-id:    googlecode com/svn/trunk@483 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5085,     \nRefactor Maps valuesImpl  entrySetImpl  and keySetImpl into skeleton abstract classes\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2355\n\n\ngit-svn-id:    googlecode com/svn/trunk@482 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5086,     \nDocument that copying a Multiset into a Multiset is efficient \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2354\n\n\ngit-svn-id:    googlecode com/svn/trunk@481 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5087,     \nAdd skeleton ElementSet and EntrySet implementations to Multisets\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2353\n\n\ngit-svn-id:    googlecode com/svn/trunk@480 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5088,     \nWarning cleanup \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2352\n\n\ngit-svn-id:    googlecode com/svn/trunk@479 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5089,     \nCorrect the Javadoc of ForwardingMultiset standardClear()\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2347\n\n\ngit-svn-id:    googlecode com/svn/trunk@478 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5090,     \nMake ListenableFutureTask constructor private (and un-deprecate it) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2346\n\n\ngit-svn-id:    googlecode com/svn/trunk@477 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5091,     \nIntroduce a SortedMultiset interface   It s package-internal for now \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2338\n\n\ngit-svn-id:    googlecode com/svn/trunk@476 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5092,     \nEliminate most calls to AbstractFuture cancel() in preparation for removing the method \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2329\n\n\ngit-svn-id:    googlecode com/svn/trunk@475 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5093,     \nMake ListenableFutureTask |final| \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2328\n\n\ngit-svn-id:    googlecode com/svn/trunk@474 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5094,     \nIntroduce ListenableFutureTask create to replace the constructor  deprecating the latter \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2327\n\n\ngit-svn-id:    googlecode com/svn/trunk@473 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5095,     \nreformat\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2324\n\n\ngit-svn-id:    googlecode com/svn/trunk@472 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5096,     \nFutures get and getUnchecked \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2313\n\n\ngit-svn-id:    googlecode com/svn/trunk@471 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5097,     \nDocument the advantages of Iterables frequency() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2312\n\n\ngit-svn-id:    googlecode com/svn/trunk@470 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5098,     \nAdd a Javadoc pointer from DiscreteDomain to DiscreteDomains \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2311\n\n\ngit-svn-id:    googlecode com/svn/trunk@469 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5099,     \n- add invalidateAll\n- rename getChecked to get\n- undeprecate (but discourage) apply\n- maintain Nullable annotations in AbstractCache\n- disallow null values\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2304\n\n\ngit-svn-id:    googlecode com/svn/trunk@467 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5100,     \nreformat\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2276\n\n\ngit-svn-id:    googlecode com/svn/trunk@466 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5101,     \ndeprecate FinalizableReferenceQueue\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2275\n\n\ngit-svn-id:    googlecode com/svn/trunk@465 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5102,     \nimplement newWeakInterner using CustomInterner\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2250\n\n\ngit-svn-id:    googlecode com/svn/trunk@464 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5103,     \n- don t let Cache asMap get impact recency queue\n- add getLiveEntry  and use it in get  containsKey  and Interners\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2249\n\n\ngit-svn-id:    googlecode com/svn/trunk@463 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5104,     \nHandle multipart paths that begin with   / in simplifyPath\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2246\n\n\ngit-svn-id:    googlecode com/svn/trunk@461 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5105,     \nTearDown Javadoc clarification \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2245\n\n\ngit-svn-id:    googlecode com/svn/trunk@460 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5106,     \nsplit compute into getOrCompute/compute\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2187\n\n\ngit-svn-id:    googlecode com/svn/trunk@459 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5107,     \nAvoid storing an extra cached copy of the ToStringHelper s internal string \nAlso avoid storing the separator and instead store a boolean \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2186\n\n\ngit-svn-id:    googlecode com/svn/trunk@458 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5108,     \nFix javadoc typo in lazyTransform\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2185\n\n\ngit-svn-id:    googlecode com/svn/trunk@457 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5109,     \nAdd Futures lazyTransform\nCleanup some small javadoc inconsistencies\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2184\n\n\ngit-svn-id:    googlecode com/svn/trunk@456 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5110,     \nadd Files simplifyPath\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2183\n\n\ngit-svn-id:    googlecode com/svn/trunk@455 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5111,     \nDeprecate Futures makeChecked\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2182\n\n\ngit-svn-id:    googlecode com/svn/trunk@454 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5112,     \nIn CheckedFuture Javadoc  emphasize that it has checkedGet()  not that it has addListener()  since any ListenableFuture has the latter \nIn Futures transform/chain Javadoc  attempt to simplify the text about cancellation  and revise and move a not always accurate statement about sameThreadExecutor() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2181\n\n\ngit-svn-id:    googlecode com/svn/trunk@453 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5113,     \nAdd Callables throwing method to make it easier to construct Callables\nfor error conditions \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2176\n\n\ngit-svn-id:    googlecode com/svn/trunk@452 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5114,     \nRemove @Beta \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2175\n\n\ngit-svn-id:    googlecode com/svn/trunk@451 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5115,     \nrename MapMaker privateKey/ValueEquivalence\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2174\n\n\ngit-svn-id:    googlecode com/svn/trunk@450 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5116,     \nMinor fixes to Objects ToStringHelper \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2173\n\n\ngit-svn-id:    googlecode com/svn/trunk@449 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5117,     \n- document the difference between makeComputingMap and makeCache\n- specify expiration visibility guarantees and cleanup policy\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2172\n\n\ngit-svn-id:    googlecode com/svn/trunk@448 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5118,     \nallow null parameters wherever possible in public ConcurrentMap methods\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2171\n\n\ngit-svn-id:    googlecode com/svn/trunk@447 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5119,     \nCacheStats bugfix: createExceptionRate() was always reporting 0 because of\ninteger division \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2170\n\n\ngit-svn-id:    googlecode com/svn/trunk@446 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5120,     \nstop using FinalizableReferenceQueue\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2169\n\n\ngit-svn-id:    googlecode com/svn/trunk@445 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5121,     \nintroduce CacheStats createExceptionCount\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2146\n\n\ngit-svn-id:    googlecode com/svn/trunk@443 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5122,     \nMake ImmutableCollection Builder public \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2131\n\n\ngit-svn-id:    googlecode com/svn/trunk@442 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5123,     \nAdd a first pass to InetAddresses forString() that validates the\ncharacters  and decides which address family\ s parser to call \n\nRewrite textToNumericFormatV6 so that it allocates fewer temporary\nstrings  and correctly rejects IPv6 addresses like  0:1:2:3::4:5:6:7  \n\nAlso remove some validation from parseOctet/parseHextet  because\nthat\ s now handled by the first pass \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2130\n\n\ngit-svn-id:    googlecode com/svn/trunk@441 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5124,     \nout of Beta for Guava release 10\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2110\n\n\ngit-svn-id:    googlecode com/svn/trunk@440 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5125,     \n- move custom queue implementations out of Segment\n- update (unreleased) cleanupExecutor to use ScheduledExecutorService\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2109\n\n\ngit-svn-id:    googlecode com/svn/trunk@439 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5126,     \nAnother warnings cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2088\n\n\ngit-svn-id:    googlecode com/svn/trunk@438 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5127,     \ndocument deletion timeframe\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2087\n\n\ngit-svn-id:    googlecode com/svn/trunk@437 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5128,     \nleave a few classes/methods public but deprecated for the next release\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2037\n\n\ngit-svn-id:    googlecode com/svn/trunk@435 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5129,     \nannotate getKey and getValue as returning @Nullable\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2036\n\n\ngit-svn-id:    googlecode com/svn/trunk@434 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5130,     \nJavadoc fixes \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2035\n\n\ngit-svn-id:    googlecode com/svn/trunk@433 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5131,     \nwarnings cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2034\n\n\ngit-svn-id:    googlecode com/svn/trunk@432 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5132,     \nWarnings cleanup \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2005\n\n\ngit-svn-id:    googlecode com/svn/trunk@430 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5133,     \n- Fix strongValues key/value confusion reported on guava-discuss \n- Make HostAndPort s port field final \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=2004\n\n\ngit-svn-id:    googlecode com/svn/trunk@429 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5134,     \nrename Cache get to Cache getUnchecked\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1994\n\n\ngit-svn-id:    googlecode com/svn/trunk@428 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5135,     \nEquivalence abstract class change\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1993\n\n\ngit-svn-id:    googlecode com/svn/trunk@427 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5136,     \nrelease makeCache\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1992\n\n\ngit-svn-id:    googlecode com/svn/trunk@426 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5137,     \nBugfix: The GWT emulation of ImmutableSortedMap get(null) throws\nNullPointerException  whereas the JVM version returns null \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1991\n\n\ngit-svn-id:    googlecode com/svn/trunk@424 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5138,     \nRemove k12 ca us from the under-TLD test list to fix the build \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1990\n\n\ngit-svn-id:    googlecode com/svn/trunk@423 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5139,     \nAdding converters for primitives and Enums \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1989\n\n\ngit-svn-id:    googlecode com/svn/trunk@422 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5140,     \nImmediately cleanup partially-collected entries as they are encountered  This should only happen when FinalizableReferenceQueue falls behind \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1968\n\n\ngit-svn-id:    googlecode com/svn/trunk@421 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5141,     \nLinkedListMultimap values() and entries() methods now return Lists\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1967\n\n\ngit-svn-id:    googlecode com/svn/trunk@420 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5142,     \nauthor cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1933\n\n\ngit-svn-id:    googlecode com/svn/trunk@419 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5143,     \nexport com google common testing into guava testing\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1932\n\n\ngit-svn-id:    googlecode com/svn/trunk@418 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5144,     Add a bootstrap JVM class replacement that overcomes an incompatibility between JDK5/6   This allows us to compile in such a way that our concurrency code works in J2SE 5 and 6 \n\ngit-svn-id:    googlecode com/svn/trunk@416 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5145,     \nMove JDK5-JDK6 shim from overridebootsourcepath to guava-bootstrap/src in preparation for moving it\nto a separate Maven project \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1931\n\n\ngit-svn-id:    googlecode com/svn/trunk@415 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5146,     \ncleanup deprecation annotaitons\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1930\n\n\ngit-svn-id:    googlecode com/svn/trunk@414 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5147,     \nFix up @Beta  @since  etc \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1929\n\n\ngit-svn-id:    googlecode com/svn/trunk@413 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5148,     \nFix Javadoc error in Optional resulting from reference to  not visible  BaseHolder methods \nFix other Javadoc warnings \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1928\n\n\ngit-svn-id:    googlecode com/svn/trunk@412 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5149,     Enable source artifact generation in all builds on guava  and use that plus other resources to build the Guava-gwt artifact  Then enable the gwt artifact in the aggregate build \n\ngit-svn-id:    googlecode com/svn/trunk@411 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5150,     \nsend removal notification (REPLACED) after cloberred compute completes\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1873\n\n\ngit-svn-id:    googlecode com/svn/trunk@410 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5151,     \nforbid insertions on MapMaker makeCache asMap view\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1872\n\n\ngit-svn-id:    googlecode com/svn/trunk@409 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5152,     \ndeprecate MapEvictionListener in favor of MapMaker RemovalListener\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1871\n\n\ngit-svn-id:    googlecode com/svn/trunk@408 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5153,     \nA partial round of javadoc wordsmithing on MapMaker and a small javadoc addition to MMPQ \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1870\n\n\ngit-svn-id:    googlecode com/svn/trunk@407 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5154,     \nintroduce Stopwatch\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1869\n\n\ngit-svn-id:    googlecode com/svn/trunk@406 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5155,     \n- remove cleanupQueue  immediately remove entries rather than unsetting them\n- ignore partially-collected entries during most operations  simplifying count management\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1868\n\n\ngit-svn-id:    googlecode com/svn/trunk@405 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5156,     \n- release Cache and AbstractCache in @Beta\n- rename CacheStatsCounter to AbstractCache StatsCounter\n- rename CacheStatsCounterImpl to AbstractCache SimpleStatsCounter\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1858\n\n\ngit-svn-id:    googlecode com/svn/trunk@404 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5157,     \n- make removalNotification public\n- unit tests for removal notification\n- remove unused EvictionListeners class\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1857\n\n\ngit-svn-id:    googlecode com/svn/trunk@403 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5158,     \nintroduce CacheLoader\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1856\n\n\ngit-svn-id:    googlecode com/svn/trunk@402 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5159,     \nrelease Holder to go with Optional; misc improvements to Optional \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1848\n\n\ngit-svn-id:    googlecode com/svn/trunk@399 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5160,     \nFix race condition when run() is called concurrently  annotating the idempotence \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1837\n\n\ngit-svn-id:    googlecode com/svn/trunk@398 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5161,     \nTest reorganization \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1836\n\n\ngit-svn-id:    googlecode com/svn/trunk@397 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5162,     \nImprovements to Optional: or/or/orNull methods \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1835\n\n\ngit-svn-id:    googlecode com/svn/trunk@396 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5163,     \nAdd Functions forSupplier(Supplier) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1834\n\n\ngit-svn-id:    googlecode com/svn/trunk@395 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5164,     \nImprove AbstractFuture cancel(boolean) to actually do something \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1833\n\n\ngit-svn-id:    googlecode com/svn/trunk@394 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5165,     \nNow users can create an Interner by providing the underlying MapMaker \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1832\n\n\ngit-svn-id:    googlecode com/svn/trunk@393 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5166,     \n- Convert c g c base Ticker into an abstract class from an interface \n- Add Ticker#systemTicker \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1831\n\n\ngit-svn-id:    googlecode com/svn/trunk@392 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5167,     \nintroduce RemovalNotification for use by RemovalListener\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1830\n\n\ngit-svn-id:    googlecode com/svn/trunk@391 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5168,     \nrollback\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1778\n\n\ngit-svn-id:    googlecode com/svn/trunk@390 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5169,     \nTurn Equivalence to abstract class \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1777\n\n\ngit-svn-id:    googlecode com/svn/trunk@389 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5170,     \nFix issue 572 and issue 614\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1776\n\n\ngit-svn-id:    googlecode com/svn/trunk@388 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5171,     \n- implement stats for NullCache\n- take new expiration methods out of Beta\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1760\n\n\ngit-svn-id:    googlecode com/svn/trunk@387 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5172,     \nintroduce CacheStatsCounter/Impl  to facilitate stats counting\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1749\n\n\ngit-svn-id:    googlecode com/svn/trunk@386 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5173,     \nprocess pending cleanups during lockedCleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1748\n\n\ngit-svn-id:    googlecode com/svn/trunk@385 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5174,     \nCommented out assert\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1747\n\n\ngit-svn-id:    googlecode com/svn/trunk@384 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5175,     \nAdd more MapInterfaceTests \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1712\n\n\ngit-svn-id:    googlecode com/svn/trunk@383 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5176,     \nprepare for MapMaker removalListener\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1711\n\n\ngit-svn-id:    googlecode com/svn/trunk@382 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5177,     \nStart running the collection test suite of c g common primitives in GWT \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1688\n\n\ngit-svn-id:    googlecode com/svn/trunk@381 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5178,     \nFix GWT coverage runs for ImmutableSortedSet \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1687\n\n\ngit-svn-id:    googlecode com/svn/trunk@380 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5179,     \n- don t enqueue cleanupExeuctor work on every operation\n- pull put into ComputingSegment\n- call postWriteCleanup after every unlock\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1686\n\n\ngit-svn-id:    googlecode com/svn/trunk@379 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5180,     \nRemove deprecated AbstractListenableFuture \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1685\n\n\ngit-svn-id:    googlecode com/svn/trunk@378 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5181,     \nAdd GWT MapInterfaceTests in com google common collect \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1668\n\n\ngit-svn-id:    googlecode com/svn/trunk@376 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5182,     \nAdd missing tests in com google common base \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1667\n\n\ngit-svn-id:    googlecode com/svn/trunk@375 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5183,     \nAdd Tables transformValues() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1666\n\n\ngit-svn-id:    googlecode com/svn/trunk@374 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5184,     \nSupport GWT serialization for Uri and UriParameterMap \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1665\n\n\ngit-svn-id:    googlecode com/svn/trunk@373 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5185,     \nrollback previous change\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1664\n\n\ngit-svn-id:    googlecode com/svn/trunk@372 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5186,     \n- don t enqueue cleanupExeuctor work on every operation\n- pull put into ComputingSegment\n- call postWriteCleanup after every unlock\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1663\n\n\ngit-svn-id:    googlecode com/svn/trunk@371 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5187,     \nFix keySet() of transformed maps when the map iterator doesn t support remove() \nImproves performance of that key set \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1662\n\n\ngit-svn-id:    googlecode com/svn/trunk@370 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5188,     \nDeprecate AbstractListenableFuture in favor of AbstractFuture \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1661\n\n\ngit-svn-id:    googlecode com/svn/trunk@369 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5189,     \nMake AbstractFuture implement ListenableFuture in preparation for changing all\nAbstractListenableFuture users to AbstractFuture and removing the former \nMerge both classes  Javadoc into AbstractFuture  and tweak it some more \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1660\n\n\ngit-svn-id:    googlecode com/svn/trunk@368 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5190,     \nConsolidate c g common primitives and c g common primitives gwt\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1655\n\n\ngit-svn-id:    googlecode com/svn/trunk@367 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5191,     \nMake AbstractFuture done() package-private \nSubclasses can extend AbstractListenableFuture and call addListener() instead \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1654\n\n\ngit-svn-id:    googlecode com/svn/trunk@366 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5192,     \nRollback previous change \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1640\n\n\ngit-svn-id:    googlecode com/svn/trunk@365 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5193,     \n- remove cleanupQueue\n- immediately remove entries rather than unsetting them\n- don t enqueue cleanupExeuctor work on every operation\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1639\n\n\ngit-svn-id:    googlecode com/svn/trunk@364 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5194,     \n- test null computations\n- move ComputingMapAdapter into ComputingConcurrentHashMap\n- restore the while() loop around wait()\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1638\n\n\ngit-svn-id:    googlecode com/svn/trunk@363 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5195,     \nFix Maps transformValues() when map views have iterators that don t support remove()\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1637\n\n\ngit-svn-id:    googlecode com/svn/trunk@362 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5196,     \nAdd a HostAndPort Java class  Update HostSpecifier to use this class \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1630\n\n\ngit-svn-id:    googlecode com/svn/trunk@361 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5197,     \nMake makeListenable package-private \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1629\n\n\ngit-svn-id:    googlecode com/svn/trunk@360 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5198,     \nRelease Listening  Scheduled ExecutorService and MoreExecutors listeningDecorator as @Beta by using Jsr166AbstractExecutorService \nMake MoreExecutors sameThreadExecutor implement ListeningExecutorService \nAlso  revert a few Guava-fications of non-Guava @since tags \n\nGet Jsr166AbstractExecutorService to compile in Guava by:\n(1) providing a compile-time-only JSR166 version of ExecutorService\n(2) changing its newTaskFor methods to return ListenableFutureTask\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1628\n\n\ngit-svn-id:    googlecode com/svn/trunk@359 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5199,     \nAdd iterate() to CidrAddressBlock\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1627\n\n\ngit-svn-id:    googlecode com/svn/trunk@358 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5200,     \nUpgrades build xml to compile gwt test modules with\n-strict -validationOnly so that it no longer requires the entry points\nto reference all relevant classes \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1626\n\n\ngit-svn-id:    googlecode com/svn/trunk@357 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5201,     \nAllow using @GwtIncompatible on constructors \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1554\n\n\ngit-svn-id:    googlecode com/svn/trunk@353 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5202,     \n- move null computation checking out of CustomConcurrentHashMap\n- avoid indirection of ForwardingMap in ComputingMapAdapter\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1553\n\n\ngit-svn-id:    googlecode com/svn/trunk@352 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5203,     \n- call postReadCleanup during view iteration\n- don t lock for spurious read cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1541\n\n\ngit-svn-id:    googlecode com/svn/trunk@351 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5204,     \nreally fix gwt src directory reference in gwt javadoc target\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1540\n\n\ngit-svn-id:    googlecode com/svn/trunk@350 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5205,     \nfix gwt src directory reference in gwt javadoc target\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1539\n\n\ngit-svn-id:    googlecode com/svn/trunk@349 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5206,     \nalways call postReadCleanup after compute\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1533\n\n\ngit-svn-id:    googlecode com/svn/trunk@346 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5207,     \nrequire GWT 2 2 0 for its java math support and testing improvements\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1532\n\n\ngit-svn-id:    googlecode com/svn/trunk@345 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5208,     \nadopt ConcurrentHashMap s new isEmpty\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1531\n\n\ngit-svn-id:    googlecode com/svn/trunk@344 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5209,     \nnew Beta additions for r10\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1530\n\n\ngit-svn-id:    googlecode com/svn/trunk@343 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5210,     \nintroduce AbstractReferenceEntry to cleanup partial ReferenceEntry implementations\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1529\n\n\ngit-svn-id:    googlecode com/svn/trunk@342 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5211,     updated POMs for maven builds \n\ngit-svn-id:    googlecode com/svn/trunk@341 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5212,     \nadopt ConcurrentHashMap s new containsValue  without the locking\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1497\n\n\ngit-svn-id:    googlecode com/svn/trunk@339 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5213,     \nMake ExecutionList no longer extend Runnable  as it s never used that way \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1496\n\n\ngit-svn-id:    googlecode com/svn/trunk@338 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5214,     point build xml at new\nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@336 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5215,     directory reorganization in preparation for deeper maven integration\n\n\ngit-svn-id:    googlecode com/svn/trunk@328 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5216,     \nclarify description of iterators\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1473\n\n\ngit-svn-id:    googlecode com/svn/trunk@320 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5217,     \nRemove two unnecessary Platform methods  and remove an unnecessary call to another \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1463\n\n\ngit-svn-id:    googlecode com/svn/trunk@319 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5218,     \nmake removeIf() deal with lists that don t support  set()  but do support  remove()  \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1462\n\n\ngit-svn-id:    googlecode com/svn/trunk@318 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5219,     \nAdd Table \nAdd AbstractLinkedIterator \nAdd ForwardingNavigable*  but strip from public release \nStandardize on <ul> instead of our current <dl>/<ul> mix \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1447\n\n\ngit-svn-id:    googlecode com/svn/trunk@317 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5220,     \nAdd Predicates assignableFrom \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1446\n\n\ngit-svn-id:    googlecode com/svn/trunk@316 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5221,     \nmake Segment a static nested class\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1445\n\n\ngit-svn-id:    googlecode com/svn/trunk@315 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5222,     \nupdate @since syntax to specify  Guava release 0x \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1444\n\n\ngit-svn-id:    googlecode com/svn/trunk@314 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5223,     \nfix indentation\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1443\n\n\ngit-svn-id:    googlecode com/svn/trunk@313 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5224,     \nreformat to 100 columns\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1442\n\n\ngit-svn-id:    googlecode com/svn/trunk@312 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5225,     \ncomplete sync\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1360\n\n\ngit-svn-id:    googlecode com/svn/trunk@311 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5226,     \nClean up some doc in InternetDomainName \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1359\n\n\ngit-svn-id:    googlecode com/svn/trunk@310 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5227,     \nRemove unneeded Range create \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1358\n\n\ngit-svn-id:    googlecode com/svn/trunk@309 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5228,     \nrollback simplification of UninterruptibleFuture get(long  TimeUnit) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1305\n\n\ngit-svn-id:    googlecode com/svn/trunk@308 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5229,     \n- include jsr class files in gwt jar\n- add manifest annotations to jar files\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1304\n\n\ngit-svn-id:    googlecode com/svn/trunk@307 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5230,     \n(Re)Add Uninterruptibles with support for CountDownLatch await() and sleep()\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1303\n\n\ngit-svn-id:    googlecode com/svn/trunk@306 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5231,     \nremove gwt-specific comment\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1302\n\n\ngit-svn-id:    googlecode com/svn/trunk@305 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5232,     \nEmulate MapMaker#concurrencyLevel \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1301\n\n\ngit-svn-id:    googlecode com/svn/trunk@304 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5233,     \nRe-source this class \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1300\n\n\ngit-svn-id:    googlecode com/svn/trunk@303 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5234,     \ndocument non-locking behavior of size/containsValue\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1299\n\n\ngit-svn-id:    googlecode com/svn/trunk@302 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5235,     \nsync new changes\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1357\n\n\ngit-svn-id:    googlecode com/svn/trunk@301 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5236,     \ndon t lock on pending computation\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1297\n\n\ngit-svn-id:    googlecode com/svn/trunk@300 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5237,     \n<p> for Javadoc paragraphs \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1296\n\n\ngit-svn-id:    googlecode com/svn/trunk@299 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5238,     bump version number\n\ngit-svn-id:    googlecode com/svn/trunk@298 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5239,     \nLeave makeListenable public for Guava \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1111\n\n\ngit-svn-id:    googlecode com/svn/trunk@286 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5240,     \nRewrite Converter Javadoc  based in part on the Javadoc of Function \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1110\n\n\ngit-svn-id:    googlecode com/svn/trunk@285 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5241,     \nDocument the reasoning behind the 127-part limit  with an RFC reference \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1109\n\n\ngit-svn-id:    googlecode com/svn/trunk@284 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5242,     \ndon t expose fromInternal\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1071\n\n\ngit-svn-id:    googlecode com/svn/trunk@282 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5243,     \nDocument that makeChecked(ListenableFuture  Function) is source-compatible back to Guava 1 (a la ImmutableList of()) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1070\n\n\ngit-svn-id:    googlecode com/svn/trunk@281 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5244,     \nflag the _new_ makeChecked as since 9\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1069\n\n\ngit-svn-id:    googlecode com/svn/trunk@280 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5245,     \nWarning / Live without warning \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1063\n\n\ngit-svn-id:    googlecode com/svn/trunk@279 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5246,     \nadd missing sinces for release 09\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1062\n\n\ngit-svn-id:    googlecode com/svn/trunk@278 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5247,     \nMake InternetDomainName respect more limits imposed by relevant RFCs:\n* At most 127 parts\n* At most 253 characters in length\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1041\n\n\ngit-svn-id:    googlecode com/svn/trunk@277 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5248,     \nFix a second case of  childless uncle  bug causing heap corruption \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1027\n\n\ngit-svn-id:    googlecode com/svn/trunk@275 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5249,     \nexplicitly target 1 5 on gwt compilations\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1011\n\n\ngit-svn-id:    googlecode com/svn/trunk@274 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5250,     \nadd CONTRIBUTORS file\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=1010\n\n\ngit-svn-id:    googlecode com/svn/trunk@273 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5251,     \nRemove @throws InterruptedRuntimeException from Service javadocs \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=983\n\n\ngit-svn-id:    googlecode com/svn/trunk@272 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5252,     \nremove Beta from stable APIs; introduce Splitter limit\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=982\n\n\ngit-svn-id:    googlecode com/svn/trunk@271 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5253,     \nDeprecate withExplicitOrder\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=981\n\n\ngit-svn-id:    googlecode com/svn/trunk@270 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5254,     \ntest tweaks\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=979\n\n\ngit-svn-id:    googlecode com/svn/trunk@269 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5255,     \n- replace removeEntry with reclaimKey/unsetKey\n- extract tryExpiredEntries\n- introduce notifyKeyReclaimed  rename valueReclaimed to notifyValueReclaimed\n- don t create notification entries for discarding queue\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=972\n\n\ngit-svn-id:    googlecode com/svn/trunk@268 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5256,     \nadd AUTHORS\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=964\n\n\ngit-svn-id:    googlecode com/svn/trunk@266 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5257,     \nonly expireEntries on reads when an expired entry is encountered\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=963\n\n\ngit-svn-id:    googlecode com/svn/trunk@265 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5258,     \n- check expiration in computation lock\n- expireEntries post-read in a tryLock\n- add recordLockedRead\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=962\n\n\ngit-svn-id:    googlecode com/svn/trunk@264 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5259,     \nfix copyrights\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=947\n\n\ngit-svn-id:    googlecode com/svn/trunk@263 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5260,     \n- Make AbstractService s Futures implement ListenableFuture by reimplementing the custom Transition class on top of AbstractListenableFuture \n- Remove asciiHtmlEscaper  replaced with Html htmlContentEscaper \n- Make Service start() and stop() return a ListenableFuture \n- Eliminate the distinction between Range and DiscreteRange and move operations that used to live in DiscreteRange into ContiguousSet \n- Preserve strict/lenient validation when deriving IDN instances from other IDN instances  No test changes yet; wanted to get feedback on the approach first \n- Add a deprecated version of Ranges integers() and Ranges longs() to temporarily fix builds \n- MapMaker:\n\t- containsValue should fail on collected key\n\t- refine expiration javadocs\n\t- structure all reads similarly  documenting more assumptions\n\t- more white-box tests\n- Use constants in UriEscapers instead of PercentEscaper  deprecating the latter \n- Make Javadoc (and occasionally FindBugs) happier \n- Rename package html files to package-info html  which are preferred as for JDK 5 (see `man javadoc`) \n- Avoid stack overflow \n- Make InternetDomainName lenient validation a little less lenient \n- Remove all usages of Ranges longs() and Ranges integers() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=946\n\n\ngit-svn-id:    googlecode com/svn/trunk@262 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5261,     \nRemove util concurrent Service \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=911\n\n\ngit-svn-id:    googlecode com/svn/trunk@261 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5262,     \nAdd new Enums class with #valueOfFunction \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=910\n\n\ngit-svn-id:    googlecode com/svn/trunk@260 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5263,     \nAdd GWT support for MapMaker#maximumSize \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=877\n\n\ngit-svn-id:    googlecode com/svn/trunk@259 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5264,     \nMove users of Service off the version in base and onto the version in util concurrent \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=873\n\n\ngit-svn-id:    googlecode com/svn/trunk@258 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5265,     \ndon t lock to calculate size and containsValue\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=872\n\n\ngit-svn-id:    googlecode com/svn/trunk@257 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5266,     \nAdd standardStartAndWait() and standardStopAndWait() to ForwardingService \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=855\n\n\ngit-svn-id:    googlecode com/svn/trunk@256 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5267,     \nAutomatic addition of @Override annotations\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=850\n\n\ngit-svn-id:    googlecode com/svn/trunk@255 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5268,     \n- Add a class javadoc @link to Charsets US_ASCII  Add constant definitions for MIN and MAX  Take out of @Beta \n- copy Ticker into common base\n- Perform stopAndWait/startAndWait uninterruptibly instead of throwing InterruptedRuntimeException \n- add MapMaker ticker(Ticker)\n- Clone Service from base to util concurrent \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=849\n\n\ngit-svn-id:    googlecode com/svn/trunk@254 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5269,     \nRemove deprecated StringUtil xmlEscape/htmlEscape  which are replaced by XmlEscapers xmlEscaper and Html htmlContentEscaper \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=817\n\n\ngit-svn-id:    googlecode com/svn/trunk@253 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5270,     \nAdd a wrap() method to Equivalences that returns objects whose equals() and hashCode() methods are implemented using and Equivalence and a value \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=816\n\n\ngit-svn-id:    googlecode com/svn/trunk@252 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5271,     \nCorrect javadoc error for Multimaps#index() and be more specific about the interation ordering of the result \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=815\n\n\ngit-svn-id:    googlecode com/svn/trunk@251 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5272,     \nRemove Futures compose\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=814\n\n\ngit-svn-id:    googlecode com/svn/trunk@250 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5273,     \nreduce lock leakage under Error conditions\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=813\n\n\ngit-svn-id:    googlecode com/svn/trunk@249 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5274,     \nRollback Ticker \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=807\n\n\ngit-svn-id:    googlecode com/svn/trunk@248 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5275,     \nadd common base Ticker\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=777\n\n\ngit-svn-id:    googlecode com/svn/trunk@247 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5276,     \ndon t create recency queue or record reads for expireAfterWrite\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=773\n\n\ngit-svn-id:    googlecode com/svn/trunk@246 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5277,     \nReduce visibility of makeListenable to package-private (for use in makeChecked only) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=754\n\n\ngit-svn-id:    googlecode com/svn/trunk@245 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5278,     \nadd MapMaker toString\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=753\n\n\ngit-svn-id:    googlecode com/svn/trunk@244 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5279,     \nadd ExpirationQueue and EvictionQueue to CustomConcurrentHashMap\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=747\n\n\ngit-svn-id:    googlecode com/svn/trunk@243 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5280,     \nMapMaker:\n- put size s unlock in a finally block\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=742\n\n\ngit-svn-id:    googlecode com/svn/trunk@242 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5281,     \nMapMaker:\n- call recordRead instead of recordWrite on failed putIfAbsent/replace\n- unset partially-collected entries as soon as they re found\n- skip partially-collected entries when copying buckets\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=714\n\n\ngit-svn-id:    googlecode com/svn/trunk@239 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5282,     \nFix typo in SimpleForwa(r)dingCheckedFuture\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=713\n\n\ngit-svn-id:    googlecode com/svn/trunk@237 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5283,     \nTweak ListenableFuture Javadoc  primarily to link to common implementations \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=712\n\n\ngit-svn-id:    googlecode com/svn/trunk@236 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5284,     \nSmall javadoc fix to InternetDomainName \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=707\n\n\ngit-svn-id:    googlecode com/svn/trunk@235 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5285,     \nhandle initialCapacity > maximumSize\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=689\n\n\ngit-svn-id:    googlecode com/svn/trunk@234 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5286,     \nCreate Futures transform  and forward Futures compose to it \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=688\n\n\ngit-svn-id:    googlecode com/svn/trunk@233 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5287,     \nFix Eclipse-compiler build breakage caused by raw-types cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=687\n\n\ngit-svn-id:    googlecode com/svn/trunk@232 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5288,     \nAllows for the maximumSize & expiration to be zero by using a light-weight map\nthat stores no data \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=686\n\n\ngit-svn-id:    googlecode com/svn/trunk@231 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5289,     \nremove antiquated comment about upper limits on expiration time\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=685\n\n\ngit-svn-id:    googlecode com/svn/trunk@230 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5290,     \nUse raw types less in common collect \n\nMapMaker:\n- call putIfAbsent instead of custom setComputedValue\n- Allows for the maximumSize & expiration to be zero by using a light-weight map that stores no data \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=675\n\n\ngit-svn-id:    googlecode com/svn/trunk@229 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5291,     \nInternally remove unused  of(E[ )  from the ImmutableSortedSet API \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=564\n\n\ngit-svn-id:    googlecode com/svn/trunk@227 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5292,     \nMapMaker: only allow computed value to be set once  this removes race condition between concurrent put and compute\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=563\n\n\ngit-svn-id:    googlecode com/svn/trunk@226 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5293,     \nMapMaker: refactor cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=562\n\n\ngit-svn-id:    googlecode com/svn/trunk@225 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5294,     \nValueFuture->SettableFuture \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=561\n\n\ngit-svn-id:    googlecode com/svn/trunk@224 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5295,     \nImprove InternetDomainName documentation on validation \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=554\n\n\ngit-svn-id:    googlecode com/svn/trunk@223 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5296,     \nMapMaker:\n- fix inline cleanup to perform locked cleanup when the lock is held!\n- correctly implement read-time cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=553\n\n\ngit-svn-id:    googlecode com/svn/trunk@222 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5297,     \nMapMaker: optimize cleanup when using the default executor by doing lock-requiring-cleanup under lock  instead of requiring a second lock to be taken\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=551\n\n\ngit-svn-id:    googlecode com/svn/trunk@221 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5298,     \nMapMaker:\n- move read-time recencyQueue draining to cleanup executor\n- replcae recencyQueueLength with readCount\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=550\n\n\ngit-svn-id:    googlecode com/svn/trunk@220 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5299,     \nMake ForwardingListenableFuture javadoc consistent\nAdd SimpleForwading*Future\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=549\n\n\ngit-svn-id:    googlecode com/svn/trunk@219 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5300,     \nMapMaker\n- invalidate entries containing partially collected keys\n- assert that expiration list is valid\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=541\n\n\ngit-svn-id:    googlecode com/svn/trunk@218 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5301,     \nWarnings cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=540\n\n\ngit-svn-id:    googlecode com/svn/trunk@217 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5302,     \nMapMaker rollback\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=539\n\n\ngit-svn-id:    googlecode com/svn/trunk@216 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5303,     \nMapMaker:\n- invalidate entries containing partially collected keys\n- assert that expiration list is valid\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=528\n\n\ngit-svn-id:    googlecode com/svn/trunk@215 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5304,     \nAssorted util concurrent tweaks  mostly Javadoc \n- @link from CheckedFuture to common implementations  since it seems that many people can t find them:    google com/a/google com/group/java-libraries-discuss/browse_thread/thread/83589a60aa3c5318\n- Warn that makeListenable(   ) addListener() and friends use a thread \n- Add examples to Futures combine \n- Rewrite the Javadoc for some methods in Futures to cram more information into the first sentence \n- Also  stop extending Assert in ListenableFutureTester in favor of static imports \n- Finally  make combine(     Iterable) more permissive  (This should be backward compatible )\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=527\n\n\ngit-svn-id:    googlecode com/svn/trunk@214 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5305,     \nAdd ForwardingCheckedFuture\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=526\n\n\ngit-svn-id:    googlecode com/svn/trunk@212 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5306,     \nMapMaker:\n- increment count at computation end instead of beginning\n- distinguish computation from partial-collection when put clobbers incomplete\nvalues\n- don t suppress notifications when computation encounters partially-collected\nvalues\n- don t remove computing entries\n- test many more edge cases\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=525\n\n\ngit-svn-id:    googlecode com/svn/trunk@210 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5307,     \nrollback cl/19492453\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=516\n\n\ngit-svn-id:    googlecode com/svn/trunk@209 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5308,     \ncleanup partially-collected entries during computation  since scheduled cleanup uses tryLock and thus may not cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=515\n\n\ngit-svn-id:    googlecode com/svn/trunk@208 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5309,     \ndon t return null value from computation; fixes race condition where value was garbage-collected between null check and return\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=514\n\n\ngit-svn-id:    googlecode com/svn/trunk@207 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5310,     \nintroduce MapMaker cleanupExecutor\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=513\n\n\ngit-svn-id:    googlecode com/svn/trunk@206 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5311,     \nMapMaker:\n- increment count at computation end instead of beginning\n- distinguish computation from partial-collection when put clobbers incomplete\nvalues\n- don t suppress notifications when computation encounters partially-collected\nvalues\n- don t remove computing entries\n- test many more edge cases\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=512\n\n\ngit-svn-id:    googlecode com/svn/trunk@205 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5312,     \nMapMaker:\n- introduce default cleanup executor (not user-visible yet)\n- don t call recordRead on invalidated entries\n- expire entries when over-writting invalid entries\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=507\n\n\ngit-svn-id:    googlecode com/svn/trunk@204 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5313,     \nRegularImmutableSet should never contain one element on the client\nside  or it will cause problem deserializing them\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=499\n\n\ngit-svn-id:    googlecode com/svn/trunk@203 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5314,     \nFix TreeBasedTable to return columns in globally sorted order \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=485\n\n\ngit-svn-id:    googlecode com/svn/trunk@202 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5315,     \nuse invalidation+cleanup for MapMaker gc-cleanup\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=473\n\n\ngit-svn-id:    googlecode com/svn/trunk@201 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5316,     \nMapMaker cleanup:\n- replace computed value reference upon completion\n- account for copied entries when clearing invalid computations\n- properly propagate computation exceptions to waiting threads\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=472\n\n\ngit-svn-id:    googlecode com/svn/trunk@200 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5317,     \nAdd examples to Futures chain() and compose() Javadoc \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=471\n\n\ngit-svn-id:    googlecode com/svn/trunk@199 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5318,     - added Equivalences pairwise()\n-\tcleanup failed MapMaker computes with invalidateValue instead of racy removeEntry\n-\tdetect recursive MapMaker computation and fail fast rather than silently deadlocking\n-\tsend MapMaker notifications after unlocking related to computaiton\n\n\ngit-svn-id:    googlecode com/svn/trunk@198 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5319,     - send removal notification in MapMaker when reclaimed keys are encountered during copies\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=424\n\n\ngit-svn-id:    googlecode com/svn/trunk@181 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5320,     - lower default MapMaker concurrency level to 4\n- remove Equivalences nullAwareEquals()\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@178 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5321,     Fixed bug/532 \nAdd warnings to README \n\nThese should be the last changes for Guava release 08 \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@160 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5322,     Restore CharMatcher SINGLE_WIDTH\nDeprecate MapMaker expiration\nMake Equivalences equals/identity null-aware  deprecate nullAwareEquals\nLists reverse out of beta\nFix some multimap javadoc problems\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@159 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5323,     Send removal notification when entries containing garbage-collected values are reused\nUse StringBuilder instead of implicit concatentation in SingletonImmutableList#toString \nMark Joiner MapJoiner as final \nJDiff update \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=339\n\n\ngit-svn-id:    googlecode com/svn/trunk@151 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5324,     \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@149 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5325,     \nAdd CharMatcher matchesAnyOf()\n\nMake HostSpecifier fromValid s thrown ParseException encapsulate the original exception \n\nIn InternetDomainName  rename from->fromLenient  and add isValidLenient \n\nUpdate error messages on MapMaker#expireAfter Read Write   Fix a bug where the expireAfterAccessNanos wasn t being substituted into error message \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=297\n\n\ngit-svn-id:    googlecode com/svn/trunk@148 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5326,     Today s code refresh \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@147 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5327,     Push of latest guava code which unfortunately includes temporarily backing out\nthe common testing stuff  which still hasn t been figured out properly in a way\nthat allows us to keep internal and external codebases synchronized   That\nstuff may or may not be available as part of release 8 after all \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@146 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5328,     Next gigantic code drop \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@143 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5329,     Next giant code dump  Most interesting stuff: MinMaxPriorityQueue \nOrdering  least greatest Of  SortedMaps \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@138 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5330,     Add expireAfterWrite() and expireAfterAccess() to MapMaker  replacing\nexpiration() (which will be deprecated for release 8) \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@137 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5331,     Batch of 18 days  worth of changes  which I should be itemizing (sorry) \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@136 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5332,     Add the most basic portion of our testing infrastructure required to make the Guava tests pass  and add a replacement for Assert * so we can have the assertions available to the tests in this core library  without forcing a dependency on JUnit or any other testing framework   The tests  themselves  of course  can remain dependent on JUnit \n\ngit-svn-id:    googlecode com/svn/trunk@135 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5333,     bump version to r08-SNAPSHOT\n\ngit-svn-id:    googlecode com/svn/trunk@134 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5334,     Accidentally removed -use and -linksource from javadoc task \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@133 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5335,     @Beta release of MapMaker maximumSize()!\n\nAdd Interners asFunction per issue 398 \n\t\nStart emulating ImmutableAsList  and make it GWT serializable \n\nAdd missing Javadoc to Maps EntryTransformer transformEntry() \n\t\nSince ConcurrentHashMap consistently invokes equals() as\n objectYouJustGaveMe equals(objectAlreadyInMap)   it was suggested we should do\nthe same with our equivalences \n\t\nVarious small doc fixes \n\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@132 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5336,     One forgotten @Beta/@since \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@128 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5337,     JDiff update\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@127 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5338,     Provide default implementations for various methods in ForwardingMap and ForwardingSortedMap \n\nSpecify in Interners javadoc that they don t consume permgen  which is one of\nthe advantages of using them (for strings) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=237923\n\n\ngit-svn-id:    googlecode com/svn/trunk@126 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5339,     \nForward get call on chained future to underlying input future \n\nProvide default implementations of many methods for ForwardingSortedSet \n\nImproved documentation and standardClear method for ForwardingMultiset \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=240546\n\n\ngit-svn-id:    googlecode com/svn/trunk@125 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5340,     \nProvide default implementations for some methods in ForwardingQueue\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=224287\n\n\ngit-svn-id:    googlecode com/svn/trunk@121 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5341,     Fix InternetDomainName case normalization (only ASCII characters are to be normalized to lowercase) \n\nIntroduce new common base Ascii class for ascii-specific functions \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@118 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5342,     \nDelegate from compose(Future  Function) to compose(ListenableFuture  Function) when applicable \n\nAdd some missing @since tags \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=216874\n\n\ngit-svn-id:    googlecode com/svn/trunk@117 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5343,     \nProvide default implementations for various methods for ForwardingMultiset \n\nFix issue 411  NPE in Equivalences nullAwareEquals() hash(null) \n\nMinor style fixes \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=216777\n\n\ngit-svn-id:    googlecode com/svn/trunk@116 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5344,     \nLists charactersOf(CharSequence)\n\nFix RegularImmutableSortedSet containsAll to handle sets with the same comparator  but different element types \n\nOrdering needed @Nullables on a few methods (issue 346) \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=219055\n\n\ngit-svn-id:    googlecode com/svn/trunk@115 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5345,     \nProvide default implementations of methods as protected methods in Forwarding Collection List Set  \n\nAdd Lists reverse() (@Beta) \n\nRework ImmutableSortedMap to be backed by an ImmutableList \n\nMinor internal style fixes \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=218295\n\n\ngit-svn-id:    googlecode com/svn/trunk@113 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5346,     \nRework RegularImmutableSortedSet to be backed by an ImmutableList instead of an array \n\nMake IDN conform more closely to the Mozilla PS algorithm  In the process  we introduce a weird disjunction in our definition  but that seems unavoidable (for now?) \n\nMake com google common base Equivalence  s  GwtCompatible \n\nMake Futures compose(Future  Function) wrap any RuntimeException/Error that occurs in an ExecutionException \nAlso  call the Function only once even if it throws \n(Futures compose(ListenableFuture  Function) already had both these behaviors )\n\nDo not cancel() when interrupted  Do restore the interrupt \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=213626\n\n\ngit-svn-id:    googlecode com/svn/trunk@112 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5347,     \nUpdate ToStringHelper to do what users expect with Class<?> objects   This addresses bug 381 \n\nAdd ImmutableList reverse() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=211340\n\n\ngit-svn-id:    googlecode com/svn/trunk@111 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5348,     \nFix an issue in Multimaps transformValues that did not reflect changes to the backing Multimap\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=202775\n\n\ngit-svn-id:    googlecode com/svn/trunk@110 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5349,     \nRecognize hosts like  www nhs uk  as valid (since they are)  This is probably not the final word on this problem \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=206002\n\n\ngit-svn-id:    googlecode com/svn/trunk@109 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5350,     \nKeep the supersource version of MakMaker in sync with the server version \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=201371\n\n\ngit-svn-id:    googlecode com/svn/trunk@108 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5351,     \nAdd missing @since tags \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=203377\n\n\ngit-svn-id:    googlecode com/svn/trunk@107 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5352,     \nAdded Multimaps transformValues and Multimaps transformEntries\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=204316\n\n\ngit-svn-id:    googlecode com/svn/trunk@106 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5353,     \nAdd getFirst() implementations to Itera*s per external bug 217\n(   google com/p/guava-libraries/issues/detail?id=217) \n\nPlus  some modest documentation clean-up \n\nR=kevinb\nDELTA=70  (68 added  0 deleted  2 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=200293\n\n\ngit-svn-id:    googlecode com/svn/trunk@105 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5354,     \n3-arg version of find()\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=201272\n\n\ngit-svn-id:    googlecode com/svn/trunk@104 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5355,     \nRemove a @since tag that was just plain false\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=200245\n\n\ngit-svn-id:    googlecode com/svn/trunk@103 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5356,     \nHandle some edge cases in createParentDirs \n\nR=kevinb\nDELTA=62  (54 added  1 deleted  7 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=201259\n\n\ngit-svn-id:    googlecode com/svn/trunk@102 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5357,     \nFix up how Immutable* copyOf() work -- they should short-circuit the copy when safe  but not when the copy takes up less memory  etc   \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=202225\n\n\ngit-svn-id:    googlecode com/svn/trunk@101 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5358,     \n(implementation detail) create UnmodifiableListIterator\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=205212\n\n\ngit-svn-id:    googlecode com/svn/trunk@100 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5359,     \nAnd then roll forward \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=205211\n\n\ngit-svn-id:    googlecode com/svn/trunk@99 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5360,     \nRoll back recent Immutable(Sorted)Set change temporarily \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=205210\n\n\ngit-svn-id:    googlecode com/svn/trunk@98 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5361,     Next batch of pent-up fixes \n\nVisible changes:\n- Add ImmutableSortedSet copyOf(Collection) which is safe for concurrent\n  modification \n- Make ImmutableSet copyOf(Collection) public \n- Various Futures javadoc improvements (also use <V> and <X> over <T> and <E>) \n- Revamp javadoc for Function  Predicate and related classes  Highlight the\n  issue about consistency with equals  as this problem has been noticed with\n  utilities like Sets filter() (issue 363) \n\nLess-visible changes:\n- Add a few missing @Nullable annoations \n- In Iterables concat impl  create an Iterator<Iterator> directly rather than via transform() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@97 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5362,     \n- Make GwtCompatible and GwtIncompatible @Documented in the open source\nversion \n- Update links to the documentations \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=197273\n\n\ngit-svn-id:    googlecode com/svn/trunk@96 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5363,     3 days of pent-up improvements:\n- Make setException(null) throw NullPointerException instead of silently \n  setting the future to succeeded (with a result value of null) \n- Remove unnecessary type parameter from transformExceptions() and its \n  implementation class \n- New ConcurrentHashMultiset factory method that takes a MapMaker  This allows \n  using soft/weak keys and expiration on the backing map \n- Turns out it s annoying to not know whether it s the key or value that was\n  null in an ImmutableMap \n- Tiny javadoc fixes  mostly concerning code snippets \n- Introduce a package-private Iterables toArray(Iterable) method as a\n  GWT-compatible alternative to the public Iterables toArray(Iterable  Class) \n  and achieve a marginally more efficient implementation of the GWT emulation\n  for ImmutableSet s Builder and copyOf methods \n- Make EnumBiMap and EnumHashBiMap GwtCompatible \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@94 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5364,     \nFix performance problem in LinkedHashMultimap removeAll(key)  as documented in    google com/p/guava-libraries/issues/detail?id=371&start=100\n\nR=kak\nDELTA=3  (2 added  0 deleted  1 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=177089\n\n\ngit-svn-id:    googlecode com/svn/trunk@93 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5365,     \nUse a simple workaround for    sun com/view_bug do?bug_id=6558557\ninstead of suppressing all over the place \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=177036\n\n\ngit-svn-id:    googlecode com/svn/trunk@92 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5366,     \nMake ImmutableEntry setValue() final   Makes it clearer that ImmutableEntry is  in fact  immutable \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=180040\n\n\ngit-svn-id:    googlecode com/svn/trunk@91 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5367,     \nMinor tweaks\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=176021\n\n\ngit-svn-id:    googlecode com/svn/trunk@90 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5368,     \nExclude CustomFieldSerializers from GWT javadoc\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=179003\n\n\ngit-svn-id:    googlecode com/svn/trunk@89 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5369,     \nAdd ImmutableSet copyOf(Collection)  following lead of ImmutableList  to make it safe with copyOf(synchronizedConcurrentList) \n\nAlso had to add ImmutableSortedSet copyOf(Collection)  to make Java overloading happy \n\nI guess another alternative  is to hide the copyOf(Collection) overload and make sure copyOf(Iterable) is safe when the iterable is actually a Collection  (But why is ImmutableList copyOf(Collection) needed?)\n\nI also added ImmutableSortedSet copyOf(Comparator  Collection)  for sake(excuse) of consistency \n\n(Ben Yu)\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=163006\n\n\ngit-svn-id:    googlecode com/svn/trunk@88 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5370,     \nReduce one temp array creation for ImmutableList of() \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=159004\n\n\ngit-svn-id:    googlecode com/svn/trunk@87 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5371,     \nIrrelevant change to outside users \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=156004\n\n\ngit-svn-id:    googlecode com/svn/trunk@86 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5372,     \nTighten up the restriction of supersource builder to require\nemulated = true to be set in the @GwtIncompatible \n\nUpdated all references to add the emulated=true spec back \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=140002\n\n\ngit-svn-id:    googlecode com/svn/trunk@85 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5373,     \nMakes the result of Futures#chain() cancellable   It will now be\nsuccessfully canceled in these cases:\n1  A thread calls cancel(boolean) directly on it and the Future is\ncurrently running \n2  The underlying input Future is cancelled \n3  The Future result of the Function is cancelled \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=134006\n\n\ngit-svn-id:    googlecode com/svn/trunk@84 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5374,     \nChange InternetDomainName to reflect reality of public suffixes which are websites by changing javadoc to specify safe and unsafe usage patterns \n\nR=jessewilson\nDELTA=51  (40 added  2 deleted  9 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=91009\n\n\ngit-svn-id:    googlecode com/svn/trunk@83 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5375,     \ndelay eviction until a new entry is created\n\nR=bmanes\nDELTA=11  (8 added  2 deleted  1 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=96006\n\n\ngit-svn-id:    googlecode com/svn/trunk@82 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5376,     \nFix our TODO comments to include username as required  usually naming\nmyself   Remove a few I don\ t think we need  and handle one (it said  use\nthis method from Maps when that class is gwt-safe )  Make moe not choke on\nunrecognized usernames  Whitelist a few usernames for non-scrubbing who\nhave agreed to it \n\nR=jlevy\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=92006\n\n\ngit-svn-id:    googlecode com/svn/trunk@81 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5377,     \nRemove the comments about List subList   GWT supports it now \n\nR=cpovirk\nDELTA=9  (0 added  9 deleted  0 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=95006\n\n\ngit-svn-id:    googlecode com/svn/trunk@80 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5378,     \nimplement maximumSize\n\nR=bmanes\nDELTA=451  (309 added  10 deleted  132 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=95005\n\n\ngit-svn-id:    googlecode com/svn/trunk@79 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5379,     \nFix the license headers and @author tags of the new sources \n\nR=cpovirk\nDELTA=104  (84 added  0 deleted  20 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=97002\n\n\ngit-svn-id:    googlecode com/svn/trunk@78 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5380,     \nMove a class to fit the existing organizational scheme in this file \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=96005\n\n\ngit-svn-id:    googlecode com/svn/trunk@77 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5381,     \nAdd fromBytes() wherever there is fromByteArray() \n\nR=martinrb\nDELTA=141  (108 added  8 deleted  25 changed)\n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=95004\n\n\ngit-svn-id:    googlecode com/svn/trunk@76 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5382,     \nGWT serialization stuff \nAdd Table classes \nMinor cleanups \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=87009\n\n\ngit-svn-id:    googlecode com/svn/trunk@74 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5383,     Performance of ImmutableMap improved  while paving the way for us to reduce its memory usage as well \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@73 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5384,     Minor code  javadoc  jdiff update \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@72 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5385,     Dump a bunch of GWT support classes out to guava \nAdd a static factory for InternetDomainName which does full RFC 3490 validation \nAdd MapMaker evictionListener() \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=80001\n\n\ngit-svn-id:    googlecode com/svn/trunk@71 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5386,     Latest code dump \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=\n\n\ngit-svn-id:    googlecode com/svn/trunk@68 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5387,     bump maven version \n\ngit-svn-id:    googlecode com/svn/trunk@66 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5388,     Final code update for r06 (@since tags) \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@61 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5389,     Getting jdiff working more completely  so that a report can always be viewed of\nthe differences between the head revision and the most recent release \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@59 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5390,     Fix bug in InetAddresses and performance problem in InternetDomainName (changed\nfrom regex to CharMatcher) \n\nThis is intended as the last code update before release 06 \n\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@58 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5391,     Code update  only minor javadoc changes \n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=42003\n\n\ngit-svn-id:    googlecode com/svn/trunk@56 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5392,     Spot-fix two corrupted characters again  MOE bug fix on the way next week \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@54 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5393,     ImmutableMultiset:\n- add of() overloads up to 6 elements\n- add copyOf(E[ )\n- deprecate of(E[ )\n\nInetAddresses:\n- partially fix bug in calculation of dotted quad values\n\nUnsignedBytes:\n- new toInt(byte) method\n\nShorts:\n- fix unfinished javadoc (oops)\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=38003\n\n\ngit-svn-id:    googlecode com/svn/trunk@53 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5394,     Spot fix for some Chinese characters that got corrupted by our experimental new\ncodebase-pushing tool \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@52 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5395,     Change on 2010/06/17 by cpovirk\n\n\tRename toStringBuilder() parameter from  object  to  self  in an attempt to discourage people from passing a String  Class literal  etc   e g  \n\tAdd a @param tag for it \n\n\nRevision created by MOE tool push_codebase \nMOE_MIGRATION=29017\n\n\ngit-svn-id:    googlecode com/svn/trunk@50 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5396,     Revision created by MOE tool push_codebase \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@49 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5397,     Turn on linksource when generating javadoc -- why didn t we do this sooner?\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@47 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5398,     Code updates  Nothing particularly noteworthy \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@44 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5399,     Updates \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@43 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5400,     Updates \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@42 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5401,     Make existence of mvn signing plugin dependent on providing a key name/id as a proper parameter \n\ngit-svn-id:    googlecode com/svn/trunk@39 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5402,     re-add a script for maven deployments\n\ngit-svn-id:    googlecode com/svn/trunk@38 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5403,     Last little fixes for release 05  will write up release notes on Monday \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@34 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5404,     remove maven parallel tree for sub-artifacts    they won t break down this way necessarily  and guava is small enough to be a single dependency   we ll just ship monolithic  per the mailing list conversation \n\ngit-svn-id:    googlecode com/svn/trunk@33 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5405,     Next code drop  r05 should be later today \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@32 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5406,     Source and javadoc update; this will likely be r05 \nNew: com google common net!\nFixed: MapMaker bug (expired entries were appearing in collection views)\n\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@31 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5407,     A few final tweaks before release 04 \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@28 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5408,     Adding tests for common base  just to start the process of exposing them \nalthough they are not yet in a compiling state (they rely on other libraries we\nneed to copy out as well) \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@27 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5409,     Bump maven pom versions to r04-SNAPSHOT (where they should be) \n\ngit-svn-id:    googlecode com/svn/trunk@26 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5410,     Big code drop in prep for cutting r04 next week \n\nBrand new MapMaker implementation (expiration works way  way better) \n\n Initial @Beta release:\n  Itera*s get(3-arg)\n  Files createParentDirs\n  ForwardingListenableFuture\n  ThreadFactoryBuilder\n \n Initial release skipping @Beta:\n  Sets powerSet\n  ForwardingBlockingQueue\n \n Exiting @Beta:\n  Charsets\n  Objects toStringHelper\n  Objects firstNonNull\n  Strings\n  Suppliers memoizeWithExpiration\n  Throwables (except 2 methods)\n  ComparisonChain\n  ByteArrayData In Out put\n   In Out putSupplier\n  ForwardingFuture\n  UncheckedTimeoutException\n\nVarious miscellaneous improvements \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@25 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5411,     add a convenient script for doing maven deployments - currently uses the default pgp key of the user deploying  which is acceptable to Sonatype \n\ngit-svn-id:    googlecode com/svn/trunk@24 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5412,     add Kevinb to the developers  section \n\ngit-svn-id:    googlecode com/svn/trunk@23 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5413,     Rename guava-complete to just guava per a conversation with kevinb regarding older naming decisions \n\ngit-svn-id:    googlecode com/svn/trunk@22 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5414,     woops   remove dummy distributionManagement which is in the parent google pom \n\ngit-svn-id:    googlecode com/svn/trunk@21 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5415,     Add maven metadata and a faux maven project hierarchy for multi-module support to build this as several smaller maven modules  as well as the monolithic jar \n\nAlso  add a README maven to talk about this in general\n\nLastly  add a note in README about needing a 1 5 JDK that includes the @Overrides patch  since we use @Overrides to override interface methods  not just concrete/abstract class methods \n\ngit-svn-id:    googlecode com/svn/trunk@20 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5416,     guava-src-r03 zip is a better name than src-r03 zip \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@14 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5417,     Final tweaks for r03 and rebuild javadoc \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@13 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5418,     Huge new source dump for source release 3  which will also become our first\nbinary release shortly \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@12 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5419,     Some fixes to java5-compatible compilation\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@11 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5420,     ARGHGH  guess I was in the wrong directory when submitting    amateurs   \n\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@9 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5421,     Copy in the Google Collections 1 0-final sources  unmodified  Next step:\nrefresh them with newer versions \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@6 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5422,     Update google collections dependency to rc3 \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@4 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5423,     very minor tweaks to make consistent with internal copies  ignore \n\n\n\ngit-svn-id:    googlecode com/svn/trunk@3 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5424,     Initial code dump: version 9 09 15\n\n\n\ngit-svn-id:    googlecode com/svn/trunk@2 8138a162-5c33-11de-8abc-d1c337b90d21\n  
5425,     Initial directory structure \n\ngit-svn-id:    googlecode com/svn/trunk@1 8138a162-5c33-11de-8abc-d1c337b90d21\n  
